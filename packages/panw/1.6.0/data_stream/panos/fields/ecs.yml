- description: Bytes sent from the client to the server.
  name: client.bytes
  type: long
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: |-
    Translated IP of source based NAT sessions (e.g. internal client to internet).
    Typically connections traversing load balancers, firewalls, or routers.
  name: client.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions (e.g. internal client to internet).
    Typically connections traversing load balancers, firewalls, or routers.
  name: client.nat.port
  type: long
- description: Packets sent from the client to the server.
  name: client.packets
  type: long
- description: Port of the client.
  name: client.port
  type: long
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: client.user.name
  type: keyword
- description: Unique container id.
  name: container.id
  type: keyword
- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: destination.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.as.organization.name
  type: keyword
- description: Bytes sent from the destination to the source.
  name: destination.bytes
  type: long
- description: City name.
  name: destination.geo.city_name
  type: keyword
- description: Name of the continent.
  name: destination.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: destination.geo.country_iso_code
  type: keyword
- description: Country name.
  name: destination.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: destination.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: destination.geo.name
  type: keyword
- description: Region ISO code.
  name: destination.geo.region_iso_code
  type: keyword
- description: Region name.
  name: destination.geo.region_name
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: |-
    Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.ip
  type: ip
- description: |-
    Port the source session is translated to by NAT Device.
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.port
  type: long
- description: Packets sent from the destination to the source.
  name: destination.packets
  type: long
- description: Port of the destination.
  name: destination.port
  type: long
- description: User email address.
  name: destination.user.email
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.user.name
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Error message.
  name: error.message
  type: match_only_text
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: |-
    Duration of the event in nanoseconds.
    If event.start and event.end are known this value should be the difference between the end and start time.
  name: event.duration
  type: long
- description: event.end contains the date when the event ended or when the activity was last observed.
  name: event.end
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: event.start contains the date when the event started or when the activity was first observed.
  name: event.start
  type: date
- description: |-
    This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  name: event.timezone
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: File type (file, dir, or symlink).
  name: file.type
  type: keyword
- description: |-
    Custom key/value pairs.
    Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
    Example: `docker` and `k8s` labels.
  name: labels
  type: object
- description: |-
    Custom key/value pairs.
    Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
    Example: `docker` and `k8s` labels.
  name: labels
  type: object
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: |-
    When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.
    For example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.
    The field value must be normalized to lowercase for querying.
  name: network.application
  type: keyword
- description: |-
    Total bytes transferred in both directions.
    If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
  name: network.bytes
  type: long
- description: |-
    A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
    Learn more at https://github.com/corelight/community-id-spec.
  name: network.community_id
  type: keyword
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: Host IP address when the source IP address is the proxy.
  name: network.forwarded_ip
  type: ip
- description: |-
    Total packets transferred in both directions.
    If `source.packets` and `destination.packets` are known, `network.packets` is their sum.
  name: network.packets
  type: long
- description: |-
    Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
    The field value must be normalized to lowercase for querying.
  name: network.transport
  type: keyword
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying.
  name: network.type
  type: keyword
- description: Interface name as reported by the system.
  name: observer.egress.interface.name
  type: keyword
- description: Network zone of outbound traffic as reported by the observer to categorize the destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.
  name: observer.egress.zone
  type: keyword
- description: Hostname of the observer.
  name: observer.hostname
  type: keyword
- description: Interface name as reported by the system.
  name: observer.ingress.interface.name
  type: keyword
- description: Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.
  name: observer.ingress.zone
  type: keyword
- description: The product name of the observer.
  name: observer.product
  type: keyword
- description: Observer serial number.
  name: observer.serial_number
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: Vendor name of the observer.
  name: observer.vendor
  type: keyword
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  type: keyword
- description: All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
  name: related.hosts
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: Bytes sent from the server to the client.
  name: server.bytes
  type: long
- description: IP address of the server (IPv4 or IPv6).
  name: server.ip
  type: ip
- description: |-
    Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: server.nat.ip
  type: ip
- description: |-
    Translated port of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: server.nat.port
  type: long
- description: Packets sent from the server to the client.
  name: server.packets
  type: long
- description: Port of the server.
  name: server.port
  type: long
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: server.user.name
  type: keyword
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.as.organization.name
  type: keyword
- description: Bytes sent from the source to the destination.
  name: source.bytes
  type: long
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: source.geo.name
  type: keyword
- description: Region ISO code.
  name: source.geo.region_iso_code
  type: keyword
- description: Region name.
  name: source.geo.region_name
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: |-
    Translated ip of source based NAT sessions (e.g. internal client to internet)
    Typically connections traversing load balancers, firewalls, or routers.
  name: source.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions. (e.g. internal client to internet)
    Typically used with load balancers, firewalls, or routers.
  name: source.nat.port
  type: long
- description: Packets sent from the source to the destination.
  name: source.packets
  type: long
- description: Port of the source.
  name: source.port
  type: long
- description: User email address.
  name: source.user.email
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: source.user.domain
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.user.name
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  multi_fields:
    - name: text
      type: match_only_text
  name: url.original
  type: wildcard
- description: Unparsed user_agent string.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.original
  type: keyword
