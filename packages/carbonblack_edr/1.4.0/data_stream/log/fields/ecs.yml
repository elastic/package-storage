- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Error message.
  name: error.message
  type: match_only_text
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: |-
    Duration of the event in nanoseconds.
    If event.start and event.end are known this value should be the difference between the end and start time.
  name: event.duration
  type: long
- description: event.end contains the date when the event ended or when the activity was last observed.
  name: event.end
  type: date
- description: Unique ID to describe the event.
  name: event.id
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  doc_values: false
  index: false
  name: event.original
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: event.start contains the date when the event started or when the activity was first observed.
  name: event.start
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: |-
    Array of file attributes.
    Attributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.
  name: file.attributes
  type: keyword
- description: Boolean to capture if a signature is present.
  name: file.code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: file.code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: file.code_signature.subject_name
  type: keyword
- description: MD5 hash.
  name: file.hash.md5
  type: keyword
- description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
  multi_fields:
    - name: text
      type: match_only_text
  name: file.path
  type: keyword
- description: CPU architecture target for the file.
  name: file.pe.architecture
  type: keyword
- description: |-
    File size in bytes.
    Only relevant when `file.type` is "file".
  name: file.size
  type: long
- description: |-
    Name of the host.
    It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
  name: host.name
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: host.os.name
  type: keyword
- description: |-
    Use the `os.type` field to categorize the operating system into one of the broad commercial families.
    One of these following values should be used (lowercase): linux, macos, unix, windows.
    If the OS you're dealing with is not in the list, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
  name: host.os.type
  type: keyword
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: |-
    Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
    The field value must be normalized to lowercase for querying.
  name: network.transport
  type: keyword
- description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.
  name: network.iana_number
  type: keyword
- description: |-
    Custom name of the observer.
    This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
    If no custom name is needed, the field can be left empty.
  name: observer.name
  type: keyword
- description: The product name of the observer.
  name: observer.product
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: Vendor name of the observer.
  name: observer.vendor
  type: keyword
- description: Observer version.
  name: observer.version
  type: keyword
- description: |-
    Use the `os.type` field to categorize the operating system into one of the broad commercial families.
    One of these following values should be used (lowercase): linux, macos, unix, windows.
    If the OS you're dealing with is not in the list, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
  name: os.type
  type: keyword
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.command_line
  type: wildcard
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.entity_id
  type: keyword
- description: Absolute path to the process executable.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.executable
  type: keyword
- description: MD5 hash.
  name: process.hash.md5
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.name
  type: keyword
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.parent.entity_id
  type: keyword
- description: MD5 hash.
  name: process.parent.hash.md5
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.name
  type: keyword
- description: Process id.
  name: process.parent.pid
  type: long
- description: Process id.
  name: process.pid
  type: long
- description: The time the process started.
  name: process.start
  type: date
- description: Full path, including hive, key and value
  name: registry.path
  type: keyword
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  type: keyword
- description: A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
  name: rule.id
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: |-
    Type of indicator as represented by Cyber Observable in STIX 2.0.
    Recommended values:
      * autonomous-system
      * artifact
      * directory
      * domain-name
      * email-addr
      * file
      * ipv4-addr
      * ipv6-addr
      * mac-addr
      * mutex
      * port
      * process
      * software
      * url
      * user-account
      * windows-registry-key
      * x509-certificate
  name: threat.indicator.type
  type: keyword
- description: |-
    Domain of the url, such as "www.elastic.co".
    In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.
  name: threat.indicator.url.domain
  type: keyword
- description: Identifies a threat indicator as an IP address (irrespective of direction).
  name: threat.indicator.ip
  type: ip
- description: MD5 hash.
  name: threat.indicator.file.hash.md5
  type: keyword
- description: Identifies a threat indicator as a port number (irrespective of direction).
  name: threat.indicator.port
  type: long
- description: A hash that identifies clients based on how they perform an SSL/TLS handshake.
  name: tls.client.ja3
  type: keyword
- description: A hash that identifies servers based on how they perform an SSL/TLS handshake.
  name: tls.server.ja3s
  type: keyword
