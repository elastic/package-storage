- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    Duration of the event in nanoseconds.
    If event.start and event.end are known this value should be the difference between the end and start time.
  name: event.duration
  type: long
- description: |-
    Address where data about this service was collected from.
    This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).
  name: service.address
  type: keyword
- description: |-
    The type of the service data is collected from.
    The type can be used to group and correlate logs and metrics from one service type.
    Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.
  name: service.type
  type: keyword
- description: |-
    The network is defined as the communication path over which a host or network event happens.
    The network.* fields should be populated with details about the network activity associated with an event.
  fields:
    - description: |-
        A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
        The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
      name: application
      type: keyword
    - description: |-
        Total bytes transferred in both directions.
        If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
      name: bytes
      type: long
    - description: |-
        A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
        Learn more at https://github.com/corelight/community-id-spec.
      name: community_id
      type: keyword
    - description: |-
        Direction of the network traffic.
        Recommended values are:
          * ingress
          * egress
          * inbound
          * outbound
          * internal
          * external
          * unknown

        When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
        When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
        Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
      name: direction
      type: keyword
    - description: Host IP address when the source IP address is the proxy.
      name: forwarded_ip
      type: ip
    - description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.
      name: iana_number
      type: keyword
    - description: Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)
      name: inner
      type: object
    - description: VLAN ID as reported by the observer.
      name: inner.vlan.id
      type: keyword
    - description: Optional VLAN name as reported by the observer.
      name: inner.vlan.name
      type: keyword
    - description: Name given by operators to sections of their network.
      name: name
      type: keyword
    - description: |-
        Total packets transferred in both directions.
        If `source.packets` and `destination.packets` are known, `network.packets` is their sum.
      name: packets
      type: long
    - description: |-
        L7 Network protocol name. ex. http, lumberjack, transport protocol.
        The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
      name: protocol
      type: keyword
    - description: |-
        Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
        The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
      name: transport
      type: keyword
    - description: |-
        In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
        The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
      name: type
      type: keyword
    - description: VLAN ID as reported by the observer.
      name: vlan.id
      type: keyword
    - description: Optional VLAN name as reported by the observer.
      name: vlan.name
      type: keyword
  name: network
  type: group
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
  name: network.type
  type: keyword
- description: |-
    These fields contain information about a process.
    These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.
  fields:
    - description: |-
        Array of process arguments, starting with the absolute path to the executable.
        May be filtered to protect sensitive information.
      name: args
      type: keyword
    - description: |-
        Length of the process.args array.
        This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
      name: args_count
      type: long
    - description: |-
        The hashing algorithm used to sign the process.
        This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.
      name: code_signature.digest_algorithm
      type: keyword
    - description: Boolean to capture if a signature is present.
      name: code_signature.exists
      type: boolean
    - description: |-
        The identifier used to sign the process.
        This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.
      name: code_signature.signing_id
      type: keyword
    - description: |-
        Additional information about the certificate status.
        This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
      name: code_signature.status
      type: keyword
    - description: Subject name of the code signer
      name: code_signature.subject_name
      type: keyword
    - description: |-
        The team identifier used to sign the process.
        This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.
      name: code_signature.team_id
      type: keyword
    - description: Date and time when the code signature was generated and signed.
      name: code_signature.timestamp
      type: date
    - description: |-
        Stores the trust status of the certificate chain.
        Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
      name: code_signature.trusted
      type: boolean
    - description: |-
        Boolean to capture if the digital signature is verified against the binary content.
        Leave unpopulated if a certificate was unchecked.
      name: code_signature.valid
      type: boolean
    - description: |-
        Full command line that started the process, including the absolute path to the executable, and all arguments.
        Some arguments may be filtered to protect sensitive information.
      name: command_line
      type: wildcard
    - description: Machine architecture of the ELF file.
      name: elf.architecture
      type: keyword
    - description: Byte sequence of ELF file.
      name: elf.byte_order
      type: keyword
    - description: CPU type of the ELF file.
      name: elf.cpu_type
      type: keyword
    - description: Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.
      name: elf.creation_date
      type: date
    - description: List of exported element names and types.
      name: elf.exports
      type: flattened
    - description: Version of the ELF Application Binary Interface (ABI).
      name: elf.header.abi_version
      type: keyword
    - description: Header class of the ELF file.
      name: elf.header.class
      type: keyword
    - description: Data table of the ELF header.
      name: elf.header.data
      type: keyword
    - description: Header entrypoint of the ELF file.
      name: elf.header.entrypoint
      type: long
    - description: '"0x1" for original ELF files.'
      name: elf.header.object_version
      type: keyword
    - description: Application Binary Interface (ABI) of the Linux OS.
      name: elf.header.os_abi
      type: keyword
    - description: Header type of the ELF file.
      name: elf.header.type
      type: keyword
    - description: Version of the ELF header.
      name: elf.header.version
      type: keyword
    - description: List of imported element names and types.
      name: elf.imports
      type: flattened
    - description: |-
        An array containing an object for each section of the ELF file.
        The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.
      name: elf.sections
      type: nested
    - description: Chi-square probability distribution of the section.
      name: elf.sections.chi2
      type: long
    - description: Shannon entropy calculation from the section.
      name: elf.sections.entropy
      type: long
    - description: ELF Section List flags.
      name: elf.sections.flags
      type: keyword
    - description: ELF Section List name.
      name: elf.sections.name
      type: keyword
    - description: ELF Section List offset.
      name: elf.sections.physical_offset
      type: keyword
    - description: ELF Section List physical size.
      name: elf.sections.physical_size
      type: long
    - description: ELF Section List type.
      name: elf.sections.type
      type: keyword
    - description: ELF Section List virtual address.
      name: elf.sections.virtual_address
      type: long
    - description: ELF Section List virtual size.
      name: elf.sections.virtual_size
      type: long
    - description: |-
        An array containing an object for each segment of the ELF file.
        The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.
      name: elf.segments
      type: nested
    - description: ELF object segment sections.
      name: elf.segments.sections
      type: keyword
    - description: ELF object segment type.
      name: elf.segments.type
      type: keyword
    - description: List of shared libraries used by this ELF object.
      name: elf.shared_libraries
      type: keyword
    - description: telfhash symbol hash for ELF file.
      name: elf.telfhash
      type: keyword
    - description: The time the process ended.
      name: end
      type: date
    - description: |-
        Unique identifier for the process.
        The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
        Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
      name: entity_id
      type: keyword
    - description: Absolute path to the process executable.
      name: executable
      type: keyword
    - description: |-
        The exit code of the process, if this is a termination event.
        The field should be absent if there is no exit code for the event (e.g. process start).
      name: exit_code
      type: long
    - description: MD5 hash.
      name: hash.md5
      type: keyword
    - description: SHA1 hash.
      name: hash.sha1
      type: keyword
    - description: SHA256 hash.
      name: hash.sha256
      type: keyword
    - description: SHA512 hash.
      name: hash.sha512
      type: keyword
    - description: SSDEEP hash.
      name: hash.ssdeep
      type: keyword
    - description: |-
        Process name.
        Sometimes called program name or similar.
      name: name
      type: keyword
    - description: |-
        Array of process arguments, starting with the absolute path to the executable.
        May be filtered to protect sensitive information.
      name: parent.args
      type: keyword
    - description: |-
        Length of the process.args array.
        This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
      name: parent.args_count
      type: long
    - description: |-
        The hashing algorithm used to sign the process.
        This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.
      name: parent.code_signature.digest_algorithm
      type: keyword
    - description: Boolean to capture if a signature is present.
      name: parent.code_signature.exists
      type: boolean
    - description: |-
        The identifier used to sign the process.
        This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.
      name: parent.code_signature.signing_id
      type: keyword
    - description: |-
        Additional information about the certificate status.
        This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
      name: parent.code_signature.status
      type: keyword
    - description: Subject name of the code signer
      name: parent.code_signature.subject_name
      type: keyword
    - description: |-
        The team identifier used to sign the process.
        This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.
      name: parent.code_signature.team_id
      type: keyword
    - description: Date and time when the code signature was generated and signed.
      name: parent.code_signature.timestamp
      type: date
    - description: |-
        Stores the trust status of the certificate chain.
        Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
      name: parent.code_signature.trusted
      type: boolean
    - description: |-
        Boolean to capture if the digital signature is verified against the binary content.
        Leave unpopulated if a certificate was unchecked.
      name: parent.code_signature.valid
      type: boolean
    - description: |-
        Full command line that started the process, including the absolute path to the executable, and all arguments.
        Some arguments may be filtered to protect sensitive information.
      name: parent.command_line
      type: wildcard
    - description: Machine architecture of the ELF file.
      name: parent.elf.architecture
      type: keyword
    - description: Byte sequence of ELF file.
      name: parent.elf.byte_order
      type: keyword
    - description: CPU type of the ELF file.
      name: parent.elf.cpu_type
      type: keyword
    - description: Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.
      name: parent.elf.creation_date
      type: date
    - description: List of exported element names and types.
      name: parent.elf.exports
      type: flattened
    - description: Version of the ELF Application Binary Interface (ABI).
      name: parent.elf.header.abi_version
      type: keyword
    - description: Header class of the ELF file.
      name: parent.elf.header.class
      type: keyword
    - description: Data table of the ELF header.
      name: parent.elf.header.data
      type: keyword
    - description: Header entrypoint of the ELF file.
      name: parent.elf.header.entrypoint
      type: long
    - description: '"0x1" for original ELF files.'
      name: parent.elf.header.object_version
      type: keyword
    - description: Application Binary Interface (ABI) of the Linux OS.
      name: parent.elf.header.os_abi
      type: keyword
    - description: Header type of the ELF file.
      name: parent.elf.header.type
      type: keyword
    - description: Version of the ELF header.
      name: parent.elf.header.version
      type: keyword
    - description: List of imported element names and types.
      name: parent.elf.imports
      type: flattened
    - description: |-
        An array containing an object for each section of the ELF file.
        The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.
      name: parent.elf.sections
      type: nested
    - description: Chi-square probability distribution of the section.
      name: parent.elf.sections.chi2
      type: long
    - description: Shannon entropy calculation from the section.
      name: parent.elf.sections.entropy
      type: long
    - description: ELF Section List flags.
      name: parent.elf.sections.flags
      type: keyword
    - description: ELF Section List name.
      name: parent.elf.sections.name
      type: keyword
    - description: ELF Section List offset.
      name: parent.elf.sections.physical_offset
      type: keyword
    - description: ELF Section List physical size.
      name: parent.elf.sections.physical_size
      type: long
    - description: ELF Section List type.
      name: parent.elf.sections.type
      type: keyword
    - description: ELF Section List virtual address.
      name: parent.elf.sections.virtual_address
      type: long
    - description: ELF Section List virtual size.
      name: parent.elf.sections.virtual_size
      type: long
    - description: |-
        An array containing an object for each segment of the ELF file.
        The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.
      name: parent.elf.segments
      type: nested
    - description: ELF object segment sections.
      name: parent.elf.segments.sections
      type: keyword
    - description: ELF object segment type.
      name: parent.elf.segments.type
      type: keyword
    - description: List of shared libraries used by this ELF object.
      name: parent.elf.shared_libraries
      type: keyword
    - description: telfhash symbol hash for ELF file.
      name: parent.elf.telfhash
      type: keyword
    - description: The time the process ended.
      name: parent.end
      type: date
    - description: |-
        Unique identifier for the process.
        The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
        Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
      name: parent.entity_id
      type: keyword
    - description: Absolute path to the process executable.
      name: parent.executable
      type: keyword
    - description: |-
        The exit code of the process, if this is a termination event.
        The field should be absent if there is no exit code for the event (e.g. process start).
      name: parent.exit_code
      type: long
    - description: MD5 hash.
      name: parent.hash.md5
      type: keyword
    - description: SHA1 hash.
      name: parent.hash.sha1
      type: keyword
    - description: SHA256 hash.
      name: parent.hash.sha256
      type: keyword
    - description: SHA512 hash.
      name: parent.hash.sha512
      type: keyword
    - description: SSDEEP hash.
      name: parent.hash.ssdeep
      type: keyword
    - description: |-
        Process name.
        Sometimes called program name or similar.
      name: parent.name
      type: keyword
    - description: CPU architecture target for the file.
      name: parent.pe.architecture
      type: keyword
    - description: Internal company name of the file, provided at compile-time.
      name: parent.pe.company
      type: keyword
    - description: Internal description of the file, provided at compile-time.
      name: parent.pe.description
      type: keyword
    - description: Internal version of the file, provided at compile-time.
      name: parent.pe.file_version
      type: keyword
    - description: |-
        A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
        Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
      name: parent.pe.imphash
      type: keyword
    - description: Internal name of the file, provided at compile-time.
      name: parent.pe.original_file_name
      type: keyword
    - description: Internal product name of the file, provided at compile-time.
      name: parent.pe.product
      type: keyword
    - description: Identifier of the group of processes the process belongs to.
      name: parent.pgid
      type: long
    - description: Process id.
      name: parent.pid
      type: long
    - description: Parent process' pid.
      name: parent.ppid
      type: long
    - description: The time the process started.
      name: parent.start
      type: date
    - description: Thread ID.
      name: parent.thread.id
      type: long
    - description: Thread name.
      name: parent.thread.name
      type: keyword
    - description: |-
        Process title.
        The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
      name: parent.title
      type: keyword
    - description: Seconds the process has been up.
      name: parent.uptime
      type: long
    - description: The working directory of the process.
      name: parent.working_directory
      type: keyword
    - description: CPU architecture target for the file.
      name: pe.architecture
      type: keyword
    - description: Internal company name of the file, provided at compile-time.
      name: pe.company
      type: keyword
    - description: Internal description of the file, provided at compile-time.
      name: pe.description
      type: keyword
    - description: Internal version of the file, provided at compile-time.
      name: pe.file_version
      type: keyword
    - description: |-
        A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
        Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
      name: pe.imphash
      type: keyword
    - description: Internal name of the file, provided at compile-time.
      name: pe.original_file_name
      type: keyword
    - description: Internal product name of the file, provided at compile-time.
      name: pe.product
      type: keyword
    - description: Identifier of the group of processes the process belongs to.
      name: pgid
      type: long
    - description: Process id.
      name: pid
      type: long
    - description: Parent process' pid.
      name: ppid
      type: long
    - description: The time the process started.
      name: start
      type: date
    - description: Thread ID.
      name: thread.id
      type: long
    - description: Thread name.
      name: thread.name
      type: keyword
    - description: |-
        Process title.
        The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
      name: title
      type: keyword
    - description: Seconds the process has been up.
      name: uptime
      type: long
    - description: The working directory of the process.
      name: working_directory
      type: keyword
  name: process
  type: group
- description: Absolute path to the process executable.
  name: process.executable
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  name: process.name
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: |-
    The user fields describe information about the user that is relevant to the event.
    Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.
  fields:
    - description: |-
        Name of the directory the user is a member of.
        For example, an LDAP or Active Directory domain name.
      name: changes.domain
      type: keyword
    - description: User email address.
      name: changes.email
      type: keyword
    - description: User's full name, if available.
      name: changes.full_name
      type: keyword
    - description: |-
        Name of the directory the group is a member of.
        For example, an LDAP or Active Directory domain name.
      name: changes.group.domain
      type: keyword
    - description: Unique identifier for the group on the system/platform.
      name: changes.group.id
      type: keyword
    - description: Name of the group.
      name: changes.group.name
      type: keyword
    - description: |-
        Unique user hash to correlate information for a user in anonymized form.
        Useful if `user.id` or `user.name` contain confidential information and cannot be used.
      name: changes.hash
      type: keyword
    - description: Unique identifier of the user.
      name: changes.id
      type: keyword
    - description: Short name or login of the user.
      name: changes.name
      type: keyword
    - description: Array of user roles at the time of the event.
      name: changes.roles
      type: keyword
    - description: |-
        Name of the directory the user is a member of.
        For example, an LDAP or Active Directory domain name.
      name: domain
      type: keyword
    - description: |-
        Name of the directory the user is a member of.
        For example, an LDAP or Active Directory domain name.
      name: effective.domain
      type: keyword
    - description: User email address.
      name: effective.email
      type: keyword
    - description: User's full name, if available.
      name: effective.full_name
      type: keyword
    - description: |-
        Name of the directory the group is a member of.
        For example, an LDAP or Active Directory domain name.
      name: effective.group.domain
      type: keyword
    - description: Unique identifier for the group on the system/platform.
      name: effective.group.id
      type: keyword
    - description: Name of the group.
      name: effective.group.name
      type: keyword
    - description: |-
        Unique user hash to correlate information for a user in anonymized form.
        Useful if `user.id` or `user.name` contain confidential information and cannot be used.
      name: effective.hash
      type: keyword
    - description: Unique identifier of the user.
      name: effective.id
      type: keyword
    - description: Short name or login of the user.
      name: effective.name
      type: keyword
    - description: Array of user roles at the time of the event.
      name: effective.roles
      type: keyword
    - description: User email address.
      name: email
      type: keyword
    - description: User's full name, if available.
      name: full_name
      type: keyword
    - description: |-
        Name of the directory the group is a member of.
        For example, an LDAP or Active Directory domain name.
      name: group.domain
      type: keyword
    - description: Unique identifier for the group on the system/platform.
      name: group.id
      type: keyword
    - description: Name of the group.
      name: group.name
      type: keyword
    - description: |-
        Unique user hash to correlate information for a user in anonymized form.
        Useful if `user.id` or `user.name` contain confidential information and cannot be used.
      name: hash
      type: keyword
    - description: Unique identifier of the user.
      name: id
      type: keyword
    - description: Short name or login of the user.
      name: name
      type: keyword
    - description: Array of user roles at the time of the event.
      name: roles
      type: keyword
    - description: |-
        Name of the directory the user is a member of.
        For example, an LDAP or Active Directory domain name.
      name: target.domain
      type: keyword
    - description: User email address.
      name: target.email
      type: keyword
    - description: User's full name, if available.
      name: target.full_name
      type: keyword
    - description: |-
        Name of the directory the group is a member of.
        For example, an LDAP or Active Directory domain name.
      name: target.group.domain
      type: keyword
    - description: Unique identifier for the group on the system/platform.
      name: target.group.id
      type: keyword
    - description: Name of the group.
      name: target.group.name
      type: keyword
    - description: |-
        Unique user hash to correlate information for a user in anonymized form.
        Useful if `user.id` or `user.name` contain confidential information and cannot be used.
      name: target.hash
      type: keyword
    - description: Unique identifier of the user.
      name: target.id
      type: keyword
    - description: Short name or login of the user.
      name: target.name
      type: keyword
    - description: Array of user roles at the time of the event.
      name: target.roles
      type: keyword
  name: user
  type: group
- description: User's full name, if available.
  name: user.full_name
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
