- description: |-
    Date/time when the event originated.
    This is the date/time extracted from the event, typically representing when the event was generated by the source.
    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
    Required field for all events.
  name: '@timestamp'
  type: date
- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: destination.as.number
  type: long
- description: Organization name.
  name: destination.as.organization.name
  type: keyword
- description: Bytes sent from the destination to the source.
  name: destination.bytes
  type: long
- description: |-
    The domain name of the destination system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: destination.domain
  type: keyword
- description: City name.
  name: destination.geo.city_name
  type: keyword
- description: Name of the continent.
  name: destination.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: destination.geo.country_iso_code
  type: keyword
- description: Country name.
  name: destination.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: destination.geo.location
  type: geo_point
- description: Region ISO code.
  name: destination.geo.region_iso_code
  type: keyword
- description: Region name.
  name: destination.geo.region_name
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: |-
    MAC address of the destination.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: destination.mac
  type: keyword
- description: Packets sent from the destination to the source.
  name: destination.packets
  type: long
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: |-
    A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
    Learn more at https://github.com/corelight/community-id-spec.
  name: network.community_id
  type: keyword
- description: |-
    In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.
    The field value must be normalized to lowercase for querying.
  name: network.protocol
  type: keyword
- description: |-
    Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
    The field value must be normalized to lowercase for querying.
  name: network.transport
  type: keyword
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying.
  name: network.type
  type: keyword
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: A categorization value keyword used by the entity using the rule for detection of this event.
  name: rule.category
  type: keyword
- description: A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
  name: rule.id
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: The description of the rule generating the event.
  name: rule.description
  type: keyword
- description: The version / revision of the rule being used for analysis.
  name: rule.version
  type: keyword
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: Bytes sent from the source to the destination.
  name: source.bytes
  type: long
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: Region ISO code.
  name: source.geo.region_iso_code
  type: keyword
- description: Region name.
  name: source.geo.region_name
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: |-
    MAC address of the source.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: source.mac
  type: keyword
- description: Packets sent from the source to the destination.
  name: source.packets
  type: long
- description: Port of the source.
  name: source.port
  type: long
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  name: source.as.organization.name
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: |-
    Custom name of the observer.
    This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
    If no custom name is needed, the field can be left empty.
  name: observer.name
  type: keyword
- description: IP addresses of the observer.
  name: observer.ip
  type: ip
- description: Vendor name of the observer.
  name: observer.vendor
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: The product name of the observer.
  name: observer.product
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  name: process.name
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
