- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    Name of the dataset.
    If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
    It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.
  name: event.dataset
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.
    The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID`.
  name: http.request.id
  type: keyword
- description: |-
    HTTP request method.
    The value should retain its casing from the original event. For example, `GET`, `get`, and `GeT` are all considered valid values for this field.
  name: http.request.method
  type: keyword
- description: Size in bytes of the response body.
  name: http.response.body.bytes
  type: long
- description: HTTP response status code.
  name: http.response.status_code
  type: long
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.
  name: log.logger
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: Process id.
  name: process.pid
  type: long
- description: |-
    Roles of a service node.
    This allows for distinction between different running roles of the same service.
    In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.
    In the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.
    Other services could use this to distinguish between a `web` and `worker` role running as part of the service.
  name: service.node.roles
  normalize:
    - array
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  normalize:
    - array
  type: keyword
- description: |-
    Unique identifier of the trace.
    A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.
  name: trace.id
  type: keyword
- description: |-
    Unique identifier of the transaction within the scope of its trace.
    A transaction is the highest level of work measured within a service, such as a request to a server.
  name: transaction.id
  type: keyword
- description: Path of the request, such as "/search".
  name: url.path
  type: wildcard
- description: |-
    The query field describes the query string of the request, such as "q=elasticsearch".
    The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.
  name: url.query
  type: keyword
