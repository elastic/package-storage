- description: |-
    Ephemeral identifier of this agent (if one exists).
    This id normally changes across restarts, but `agent.id` does not.
  name: agent.ephemeral_id
  type: keyword
- description: |-
    Custom name of the agent.
    This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
  name: agent.name
  type: keyword
- description: Version of the agent.
  name: agent.version
  type: keyword
- description: |-
    The domain name of the client system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: client.domain
  type: keyword
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: Port of the client.
  name: client.port
  type: long
- description: City name.
  name: client.geo.city_name
  type: keyword
- description: Name of the continent.
  name: client.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: client.geo.country_iso_code
  type: keyword
- description: Country name.
  name: client.geo.country_name
  type: keyword
- description: Longitude and latitude.
  name: client.geo.location
  type: geo_point
- description: Region ISO code.
  name: client.geo.region_iso_code
  type: keyword
- description: Region name.
  name: client.geo.region_name
  type: keyword
- description: |-
    The cloud account or organization id used to identify different entities in a multi-tenant environment.
    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.
  name: cloud.account.id
  type: keyword
- description: |-
    The cloud account name or alias used to identify different entities in a multi-tenant environment.
    Examples: AWS account name, Google Cloud ORG display name.
  name: cloud.account.name
  type: keyword
- description: Availability zone in which this host, resource, or service is located.
  name: cloud.availability_zone
  type: keyword
- description: Instance ID of the host machine.
  name: cloud.instance.id
  type: keyword
- description: Instance name of the host machine.
  name: cloud.instance.name
  type: keyword
- description: Machine type of the host machine.
  name: cloud.machine.type
  type: keyword
- description: |-
    The cloud project identifier.
    Examples: Google Cloud Project id, Azure Project id.
  name: cloud.project.id
  type: keyword
- description: |-
    The cloud project name.
    Examples: Google Cloud Project name, Azure Project name.
  name: cloud.project.name
  type: keyword
- description: Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.
  name: cloud.provider
  type: keyword
- description: Region in which this host, resource, or service is located.
  name: cloud.region
  type: keyword
- description: |-
    The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.
    Examples: app engine, app service, cloud run, fargate, lambda.
  name: cloud.service.name
  type: keyword
- description: Unique container id.
  name: container.id
  type: keyword
- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: constant_keyword
  value: 8.6.0-dev
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: Operating system architecture.
  name: host.architecture
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: Host ip addresses.
  name: host.ip
  normalize:
    - array
  type: ip
- description: |-
    Name of the host.
    It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
  name: host.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: host.os.platform
  type: keyword
- description: |-
    Custom key/value pairs.
    Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
    Example: `docker` and `k8s` labels.
  dynamic: true
  name: labels
  type: object
- description: Hostname of the observer.
  name: observer.hostname
  type: keyword
- description: |-
    Custom name of the observer.
    This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
    If no custom name is needed, the field can be left empty.
  name: observer.name
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: Observer version.
  name: observer.version
  type: keyword
- description: |-
    Array of process arguments, starting with the absolute path to the executable.
    May be filtered to protect sensitive information.
  name: process.args
  normalize:
    - array
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: Process id.
  name: process.parent.pid
  type: long
- description: |-
    Process title.
    The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.title
  type: keyword
- description: |-
    Identifies the environment where the service is running.
    If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.
  name: service.environment
  type: keyword
- description: |-
    Name of the service data is collected from.
    The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
    In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.
  name: service.name
  type: keyword
- description: |-
    Name of a service node.
    This allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.
    In the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.
  name: service.node.name
  type: keyword
- description: |-
    Version of the service the data was collected from.
    This allows to look at a data set only for a specific version of a service.
  name: service.version
  type: keyword
- description: |-
    The domain name of the source system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: source.domain
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: Port of the source.
  name: source.port
  type: long
- description: |-
    Translated ip of source based NAT sessions (e.g. internal client to internet)
    Typically connections traversing load balancers, firewalls, or routers.
  name: source.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions. (e.g. internal client to internet)
    Typically used with load balancers, firewalls, or routers.
  name: source.nat.port
  type: long
- description: List of keywords used to tag each event.
  name: tags
  normalize:
    - array
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.domain
  type: keyword
- description: User email address.
  name: user.email
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
- description: Name of the device.
  name: user_agent.device.name
  type: keyword
- description: Name of the user agent.
  name: user_agent.name
  type: keyword
- description: Unparsed user_agent string.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.original
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: user_agent.os.family
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.full
  type: keyword
- description: Operating system kernel version as a raw string.
  name: user_agent.os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: user_agent.os.platform
  type: keyword
- description: Operating system version as a raw string.
  name: user_agent.os.version
  type: keyword
- description: Version of the user agent.
  name: user_agent.version
  type: keyword
