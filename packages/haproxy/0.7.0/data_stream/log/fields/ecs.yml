- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Size in bytes of the request body.
  name: http.request.body.bytes
  type: long
- description: The full HTTP request body.
  name: http.request.body.content
  type: wildcard
- description: Total size in bytes of the request (body and headers).
  name: http.request.bytes
  type: long
- description: |-
    HTTP request method.
    Prior to ECS 1.6.0 the following guidance was provided:
    "The field value must be normalized to lowercase for querying."
    As of ECS 1.6.0, the guidance is deprecated because the original case of the method may be useful in anomaly detection.  Original case will be mandated in ECS 2.0.0
  name: http.request.method
  type: keyword
- description: Referrer for this HTTP request.
  name: http.request.referrer
  type: keyword
- description: Size in bytes of the response body.
  name: http.response.body.bytes
  type: long
- description: The full HTTP response body.
  name: http.response.body.content
  type: wildcard
- description: Total size in bytes of the response (body and headers).
  name: http.response.bytes
  type: long
- description: HTTP response status code.
  name: http.response.status_code
  type: long
- description: HTTP version.
  name: http.version
  type: keyword
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  name: process.name
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: Region ISO code.
  name: source.geo.region_iso_code
  type: keyword
- description: Region name.
  name: source.geo.region_name
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: Port of the source.
  name: source.port
  type: long
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: |-
    Domain of the url, such as "www.elastic.co".
    In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.
  name: url.domain
  type: keyword
- description: |-
    The field contains the file extension from the original request url, excluding the leading dot.
    The file extension is only set if it exists, as not every url has a file extension.
    The leading period must not be included. For example, the value must be "png", not ".png".
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: url.extension
  type: keyword
- description: |-
    Portion of the url after the `#`, such as "top".
    The `#` is not part of the fragment.
  name: url.fragment
  type: keyword
- description: If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.
  name: url.full
  type: wildcard
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  name: url.original
  type: wildcard
- description: Password of the request.
  name: url.password
  type: keyword
- description: Path of the request, such as "/search".
  name: url.path
  type: wildcard
- description: Port of the request, such as 443.
  name: url.port
  type: long
- description: |-
    The query field describes the query string of the request, such as "q=elasticsearch".
    The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.
  name: url.query
  type: keyword
- description: |-
    The highest registered url domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: url.registered_domain
  type: keyword
- description: |-
    Scheme of the request, such as "https".
    Note: The `:` is not part of the scheme.
  name: url.scheme
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: url.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: url.top_level_domain
  type: keyword
- description: Username of the request.
  name: url.username
  type: keyword
