- description: Bytes sent from the client to the server.
  name: client.bytes
  type: long
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: Port of the client.
  name: client.port
  type: long
- description: Bytes sent from the destination to the source.
  name: destination.bytes
  type: long
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    Name of the dataset.
    If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
    It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.
  name: event.dataset
  type: keyword
- description: |-
    Duration of the event in nanoseconds.
    If event.start and event.end are known this value should be the difference between the end and start time.
  name: event.duration
  type: long
- description: event.end contains the date when the event ended or when the activity was last observed.
  name: event.end
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: event.start contains the date when the event started or when the activity was first observed.
  name: event.start
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: |-
    Total bytes transferred in both directions.
    If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
  name: network.bytes
  type: long
- description: |-
    A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
    Learn more at https://github.com/corelight/community-id-spec.
  name: network.community_id
  type: keyword
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: Host IP address when the source IP address is the proxy.
  name: network.forwarded_ip
  type: ip
- description: |-
    In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.
    The field value must be normalized to lowercase for querying.
  name: network.protocol
  type: keyword
- description: |-
    Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
    The field value must be normalized to lowercase for querying.
  name: network.transport
  type: keyword
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying.
  name: network.type
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: Bytes sent from the server to the client.
  name: server.bytes
  type: long
- description: IP address of the server (IPv4 or IPv6).
  name: server.ip
  type: ip
- description: Port of the server.
  name: server.port
  type: long
- description: Bytes sent from the source to the destination.
  name: source.bytes
  type: long
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: Port of the source.
  name: source.port
  type: long
- description: |-
    The domain name of the destination system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: destination.domain
  type: keyword
- description: |-
    The domain name of the server system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: server.domain
  type: keyword
- description: String indicating the cipher used during the current connection.
  name: tls.cipher
  type: keyword
- description: A hash that identifies clients based on how they perform an SSL/TLS handshake.
  name: tls.client.ja3
  type: keyword
- description: Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.
  name: tls.client.server_name
  type: keyword
- description: Array of ciphers offered by the client during the client hello.
  name: tls.client.supported_ciphers
  type: keyword
- description: Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
  name: tls.established
  type: boolean
- description: Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
  name: tls.resumed
  type: boolean
- description: Numeric part of the version parsed from the original string.
  name: tls.version
  type: keyword
- description: Normalized lowercase protocol name parsed from original string.
  name: tls.version_protocol
  type: keyword
