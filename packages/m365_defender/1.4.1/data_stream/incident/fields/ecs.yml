- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: The date and time when the email message was received by the service or client.
  name: email.delivery_timestamp
  type: date
- description: The direction of the message based on the sending and receiving domains.
  name: email.direction
  type: keyword
- description: The email address of the sender, typically from the RFC 5322 `From:` header field.
  name: email.from.address
  normalize:
    - array
  type: keyword
- description: A brief summary of the topic of the message.
  multi_fields:
    - name: text
      type: match_only_text
  name: email.subject
  type: keyword
- description: The email address of recipient
  name: email.to.address
  normalize:
    - array
  type: keyword
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  normalize:
    - array
  type: keyword
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: Unique ID to describe the event.
  name: event.id
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  doc_values: false
  index: false
  name: event.original
  type: keyword
- description: |-
    Source of the event.
    Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).
  name: event.provider
  type: keyword
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  normalize:
    - array
  type: keyword
- description: |-
    URL linking to an external system to continue investigation of this event.
    This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.
  name: event.url
  type: keyword
- description: SHA1 hash.
  name: file.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: file.hash.sha256
  type: keyword
- description: Name of the file including the extension, without the directory.
  name: file.name
  type: keyword
- description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
  multi_fields:
    - name: text
      type: match_only_text
  name: file.path
  type: keyword
- description: |-
    File size in bytes.
    Only relevant when `file.type` is "file".
  name: file.size
  type: long
- description: Unique identifier for the group on the system/platform.
  name: group.id
  type: keyword
- description: Name of the group.
  name: group.name
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.command_line
  type: wildcard
- description: SHA1 hash.
  name: process.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: process.hash.sha256
  type: keyword
- description: SHA1 hash.
  name: process.parent.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: process.parent.hash.sha256
  type: keyword
- description: Process id.
  name: process.parent.pid
  type: long
- description: The time the process started.
  name: process.parent.start
  type: date
- description: Process id.
  name: process.pid
  type: long
- description: The time the process started.
  name: process.start
  type: date
- description: Unique identifier of the user.
  name: process.user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.user.name
  type: keyword
- description: Standard registry type for encoding contents
  name: registry.data.type
  type: keyword
- description: Abbreviated name for the hive.
  name: registry.hive
  type: keyword
- description: Hive-relative path of keys.
  name: registry.key
  type: keyword
- description: Name of the value written.
  name: registry.value
  type: keyword
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  normalize:
    - array
  type: keyword
- description: All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
  name: related.hosts
  normalize:
    - array
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  normalize:
    - array
  type: ip
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  normalize:
    - array
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.user.name
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  normalize:
    - array
  type: keyword
- description: |-
    The name of the group for a set of related intrusion activity that are tracked by a common name in the security community.
    While not required, you can use a MITRE ATT&CK® group name.
  name: threat.group.name
  type: keyword
- description: Name of the type of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)
  name: threat.tactic.name
  normalize:
    - array
  type: keyword
- description: The full id of subtechnique used by this threat. You can use a MITRE ATT&CK® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)
  name: threat.technique.subtechnique.id
  normalize:
    - array
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.domain
  type: keyword
- description: User email address.
  name: user.email
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
