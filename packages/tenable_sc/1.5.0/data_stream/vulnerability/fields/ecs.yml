- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  normalize:
    - array
  type: keyword
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  normalize:
    - array
  type: keyword
- description: All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
  name: related.hosts
  normalize:
    - array
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  normalize:
    - array
  type: ip
- description: List of keywords used to tag each event.
  name: tags
  normalize:
    - array
  type: keyword
- description: |-
    The type of system or architecture that the vulnerability affects. These may be platform-specific (for example, Debian or SUSE) or general (for example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys vulnerability categories])
    This field must be an array.
  name: vulnerability.category
  normalize:
    - array
  type: keyword
- description: The classification of the vulnerability scoring system. For example (https://www.first.org/cvss/)
  name: vulnerability.classification
  type: keyword
- description: The description of the vulnerability that provides additional context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common Vulnerabilities and Exposure CVE description])
  multi_fields:
    - name: text
      type: match_only_text
  name: vulnerability.description
  type: keyword
- description: The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)
  name: vulnerability.enumeration
  type: keyword
- description: The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and Exposure CVE ID]
  name: vulnerability.id
  type: keyword
- description: The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  name: vulnerability.severity
  type: keyword
- description: A resource that provides additional information, context, and mitigations for the identified vulnerability.
  name: vulnerability.reference
  type: keyword
- description: The report or scan identification number.
  name: vulnerability.report_id
  type: keyword
- description: The name of the vulnerability scanner vendor.
  name: vulnerability.scanner.vendor
  type: keyword
- description: |-
    Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
    Base scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)
  name: vulnerability.score.base
  type: float
- description: |-
    Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
    Temporal scores cover an assessment for code maturity, remediation level, and confidence. For example (https://www.first.org/cvss/specification-document)
  name: vulnerability.score.temporal
  type: float
- description: |-
    The National Vulnerability Database (NVD) provides qualitative severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.
    CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  name: vulnerability.score.version
  type: keyword
