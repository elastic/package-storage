- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: The email address of the sender, typically from the RFC 5322 `From:` header field.
  name: email.from.address
  type: keyword
- description: The email address of recipient
  name: email.to.address
  type: keyword
- description: A brief summary of the topic of the message.
  multi_fields:
    - name: text
      type: match_only_text
  name: email.subject
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  doc_values: false
  index: false
  name: event.original
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    Reason why this event happened, according to the source.
    This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).
  name: event.reason
  type: keyword
- description: |-
    Name of the domain of which the host is a member.
    For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.
  name: host.domain
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: Operating system version as a raw string.
  name: host.os.version
  type: keyword
- description: |-
    Host MAC addresses.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: host.mac
  pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Unique host id.
    As hostname is not always unique, use values that are meaningful in your environment.
    Example: The current usage of `beat.name`.
  name: host.id
  type: keyword
- description: |-
    The name being queried.
    If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
  name: dns.question.name
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: Port of the destination.
  name: destination.port
  type: long
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: destination.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.as.organization.name
  type: keyword
- description: Name of the continent.
  name: destination.geo.continent_name
  type: keyword
- description: City name.
  name: destination.geo.city_name
  type: keyword
- description: Country ISO code.
  name: destination.geo.country_iso_code
  type: keyword
- description: Country name.
  name: destination.geo.country_name
  type: keyword
- description: Region ISO code.
  name: destination.geo.region_iso_code
  type: keyword
- description: Region name.
  name: destination.geo.region_name
  type: keyword
- description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  name: destination.geo.location
  type: geo_point
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: Port of the source.
  name: source.port
  type: long
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.as.organization.name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  name: source.geo.location
  type: geo_point
- description: SHA256 hash.
  name: process.hash.sha256
  type: keyword
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.command_line
  type: wildcard
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.name
  type: keyword
- description: Subject name of the code signer
  name: process.code_signature.subject_name
  type: keyword
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: process.code_signature.status
  type: keyword
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.entity_id
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: Absolute path to the process executable.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.executable
  type: keyword
- description: MD5 hash.
  name: process.hash.md5
  type: keyword
- description: Thread ID.
  name: process.thread.id
  type: long
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.name
  type: keyword
- description: Absolute path to the process executable.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.executable
  type: keyword
- description: MD5 hash.
  name: process.parent.hash.md5
  type: keyword
- description: SHA256 hash.
  name: process.parent.hash.sha256
  type: keyword
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.parent.entity_id
  type: keyword
- description: Subject name of the code signer
  name: process.parent.code_signature.subject_name
  type: keyword
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: process.parent.code_signature.status
  type: keyword
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.command_line
  type: wildcard
- description: Seconds the process has been up.
  name: process.parent.uptime
  type: long
- description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
  multi_fields:
    - name: text
      type: match_only_text
  name: file.path
  type: keyword
- description: Name of the file including the extension, without the directory.
  name: file.name
  type: keyword
- description: MD5 hash.
  name: file.hash.md5
  type: keyword
- description: SHA256 hash.
  name: file.hash.sha256
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
  name: rule.id
  type: keyword
- description: Interface name as reported by the system.
  name: observer.ingress.interface.name
  type: keyword
- description: Interface name as reported by the system.
  name: observer.egress.interface.name
  type: keyword
- description: Observer serial number.
  name: observer.serial_number
  type: keyword
- description: Hive-relative path of keys.
  name: registry.key
  type: keyword
- description: Name of the value written.
  name: registry.value
  type: keyword
- description: Full path, including hive, key and value
  name: registry.path
  type: keyword
- description: |-
    Content when writing string types.
    Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"`).
  name: registry.data.strings
  type: wildcard
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  type: keyword
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  type: keyword
