- description: |-
    Date/time when the event originated.
    This is the date/time extracted from the event, typically representing when the event was generated by the source.
    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
    Required field for all events.
  name: '@timestamp'
  type: date
- description: |-
    Extended build information for the agent.
    This field is intended to contain any build information that a data source may provide, no specific formatting is required.
  name: agent.build.original
  type: keyword
- description: |-
    Ephemeral identifier of this agent (if one exists).
    This id normally changes across restarts, but `agent.id` does not.
  name: agent.ephemeral_id
  type: keyword
- description: |-
    Unique identifier of this agent (if one exists).
    Example: For Beats this would be beat.id.
  name: agent.id
  type: keyword
- description: |-
    Custom name of the agent.
    This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
    If no name is given, the name is often left empty.
  name: agent.name
  type: keyword
- description: |-
    Type of the agent.
    The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.
  name: agent.type
  type: keyword
- description: Version of the agent.
  name: agent.version
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: as.organization.name
  type: keyword
- description: |-
    Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: client.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: client.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: client.as.organization.name
  type: keyword
- description: Bytes sent from the client to the server.
  name: client.bytes
  type: long
- description: |-
    The domain name of the client system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: client.domain
  type: keyword
- description: City name.
  name: client.geo.city_name
  type: keyword
- description: Name of the continent.
  name: client.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: client.geo.country_iso_code
  type: keyword
- description: Country name.
  name: client.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: client.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: client.geo.name
  type: keyword
- description: Region ISO code.
  name: client.geo.region_iso_code
  type: keyword
- description: Region name.
  name: client.geo.region_name
  type: keyword
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: |-
    MAC address of the client.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: client.mac
  type: keyword
- description: |-
    Translated IP of source based NAT sessions (e.g. internal client to internet).
    Typically connections traversing load balancers, firewalls, or routers.
  name: client.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions (e.g. internal client to internet).
    Typically connections traversing load balancers, firewalls, or routers.
  name: client.nat.port
  type: long
- description: Packets sent from the client to the server.
  name: client.packets
  type: long
- description: Port of the client.
  name: client.port
  type: long
- description: |-
    The highest registered client domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: client.registered_domain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: client.top_level_domain
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: client.user.domain
  type: keyword
- description: User email address.
  name: client.user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: client.user.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: client.user.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: client.user.group.id
  type: keyword
- description: Name of the group.
  name: client.user.group.name
  type: keyword
- description: |-
    Unique user hash to correlate information for a user in anonymized form.
    Useful if `user.id` or `user.name` contain confidential information and cannot be used.
  name: client.user.hash
  type: keyword
- description: Unique identifier of the user.
  name: client.user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: client.user.name
  type: keyword
- description: Array of user roles at the time of the event.
  name: client.user.roles
  type: keyword
- description: |-
    The cloud account or organization id used to identify different entities in a multi-tenant environment.
    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.
  name: cloud.account.id
  type: keyword
- description: |-
    The cloud account name or alias used to identify different entities in a multi-tenant environment.
    Examples: AWS account name, Google Cloud ORG display name.
  name: cloud.account.name
  type: keyword
- description: Availability zone in which this host, resource, or service is located.
  name: cloud.availability_zone
  type: keyword
- description: Instance ID of the host machine.
  name: cloud.instance.id
  type: keyword
- description: Instance name of the host machine.
  name: cloud.instance.name
  type: keyword
- description: Machine type of the host machine.
  name: cloud.machine.type
  type: keyword
- description: |-
    The cloud project identifier.
    Examples: Google Cloud Project id, Azure Project id.
  name: cloud.project.id
  type: keyword
- description: |-
    The cloud project name.
    Examples: Google Cloud Project name, Azure Project name.
  name: cloud.project.name
  type: keyword
- description: Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.
  name: cloud.provider
  type: keyword
- description: Region in which this host, resource, or service is located.
  name: cloud.region
  type: keyword
- description: Boolean to capture if a signature is present.
  name: code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: code_signature.subject_name
  type: keyword
- description: |-
    Stores the trust status of the certificate chain.
    Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
  name: code_signature.trusted
  type: boolean
- description: |-
    Boolean to capture if the digital signature is verified against the binary content.
    Leave unpopulated if a certificate was unchecked.
  name: code_signature.valid
  type: boolean
- description: Unique container id.
  name: container.id
  type: keyword
- description: Name of the image the container was built on.
  name: container.image.name
  type: keyword
- description: Container image tags.
  name: container.image.tag
  type: keyword
- description: Image labels.
  name: container.labels
  type: object
- description: Container name.
  name: container.name
  type: keyword
- description: Runtime managing this container.
  name: container.runtime
  type: keyword
- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: destination.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.as.organization.name
  type: keyword
- description: Bytes sent from the destination to the source.
  name: destination.bytes
  type: long
- description: |-
    The domain name of the destination system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: destination.domain
  type: keyword
- description: City name.
  name: destination.geo.city_name
  type: keyword
- description: Name of the continent.
  name: destination.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: destination.geo.country_iso_code
  type: keyword
- description: Country name.
  name: destination.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: destination.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: destination.geo.name
  type: keyword
- description: Region ISO code.
  name: destination.geo.region_iso_code
  type: keyword
- description: Region name.
  name: destination.geo.region_name
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: |-
    MAC address of the destination.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: destination.mac
  type: keyword
- description: |-
    Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.ip
  type: ip
- description: |-
    Port the source session is translated to by NAT Device.
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.port
  type: long
- description: Packets sent from the destination to the source.
  name: destination.packets
  type: long
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    The highest registered destination domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: destination.registered_domain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: destination.top_level_domain
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: destination.user.domain
  type: keyword
- description: User email address.
  name: destination.user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.user.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: destination.user.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: destination.user.group.id
  type: keyword
- description: Name of the group.
  name: destination.user.group.name
  type: keyword
- description: |-
    Unique user hash to correlate information for a user in anonymized form.
    Useful if `user.id` or `user.name` contain confidential information and cannot be used.
  name: destination.user.hash
  type: keyword
- description: Unique identifier of the user.
  name: destination.user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: destination.user.name
  type: keyword
- description: Array of user roles at the time of the event.
  name: destination.user.roles
  type: keyword
- description: Boolean to capture if a signature is present.
  name: dll.code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: dll.code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: dll.code_signature.subject_name
  type: keyword
- description: |-
    Stores the trust status of the certificate chain.
    Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
  name: dll.code_signature.trusted
  type: boolean
- description: |-
    Boolean to capture if the digital signature is verified against the binary content.
    Leave unpopulated if a certificate was unchecked.
  name: dll.code_signature.valid
  type: boolean
- description: MD5 hash.
  name: dll.hash.md5
  type: keyword
- description: SHA1 hash.
  name: dll.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: dll.hash.sha256
  type: keyword
- description: SHA512 hash.
  name: dll.hash.sha512
  type: keyword
- description: |-
    Name of the library.
    This generally maps to the name of the file on disk.
  name: dll.name
  type: keyword
- description: Full file path of the library.
  name: dll.path
  type: keyword
- description: CPU architecture target for the file.
  name: dll.pe.architecture
  type: keyword
- description: Internal company name of the file, provided at compile-time.
  name: dll.pe.company
  type: keyword
- description: Internal description of the file, provided at compile-time.
  name: dll.pe.description
  type: keyword
- description: Internal version of the file, provided at compile-time.
  name: dll.pe.file_version
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: dll.pe.imphash
  type: keyword
- description: Internal name of the file, provided at compile-time.
  name: dll.pe.original_file_name
  type: keyword
- description: Internal product name of the file, provided at compile-time.
  name: dll.pe.product
  type: keyword
- description: |-
    An array containing an object for each answer section returned by the server.
    The main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.
    Not all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.
  name: dns.answers
  type: object
- description: The class of DNS data contained in this resource record.
  name: dns.answers.class
  type: keyword
- description: |-
    The data describing the resource.
    The meaning of this data depends on the type and class of the resource record.
  name: dns.answers.data
  type: keyword
- description: |-
    The domain name to which this resource record pertains.
    If a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.
  name: dns.answers.name
  type: keyword
- description: The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.
  name: dns.answers.ttl
  type: long
- description: The type of data contained in this resource record.
  name: dns.answers.type
  type: keyword
- description: |-
    Array of 2 letter DNS header flags.
    Expected values are: AA, TC, RD, RA, AD, CD, DO.
  name: dns.header_flags
  type: keyword
- description: The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.
  name: dns.id
  type: keyword
- description: The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.
  name: dns.op_code
  type: keyword
- description: The class of records being queried.
  name: dns.question.class
  type: keyword
- description: |-
    The name being queried.
    If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
  name: dns.question.name
  type: keyword
- description: |-
    The highest registered domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: dns.question.registered_domain
  type: keyword
- description: |-
    The subdomain is all of the labels under the registered_domain.
    If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: dns.question.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: dns.question.top_level_domain
  type: keyword
- description: The type of record being queried.
  name: dns.question.type
  type: keyword
- description: |-
    Array containing all IPs seen in `answers.data`.
    The `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.
  name: dns.resolved_ip
  type: ip
- description: The DNS response code.
  name: dns.response_code
  type: keyword
- description: |-
    The type of DNS event captured, query or answer.
    If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.
    If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.
  name: dns.type
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Error code describing the error.
  name: error.code
  type: keyword
- description: Unique identifier for the error.
  name: error.id
  type: keyword
- description: Error message.
  name: error.message
  type: match_only_text
- description: The stack trace of this error in plain text.
  multi_fields:
    - name: text
      type: match_only_text
  name: error.stack_trace
  type: wildcard
- description: The type of the error, for example the class name of the exception.
  name: error.type
  type: keyword
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    Identification code for this event, if one exists.
    Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.
  name: event.code
  type: keyword
- description: |-
    event.created contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, @timestamp should be used.
  name: event.created
  type: date
- description: |-
    Duration of the event in nanoseconds.
    If event.start and event.end are known this value should be the difference between the end and start time.
  name: event.duration
  type: long
- description: event.end contains the date when the event ended or when the activity was last observed.
  name: event.end
  type: date
- description: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.
  name: event.hash
  type: keyword
- description: Unique ID to describe the event.
  name: event.id
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  doc_values: false
  index: false
  name: event.original
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    Source of the event.
    Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).
  name: event.provider
  type: keyword
- description: |-
    Reason why this event happened, according to the source.
    This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).
  name: event.reason
  type: keyword
- description: |-
    Reference URL linking to additional information about this event.
    This URL links to a static definition of this event. Alert events, indicated by `event.kind:alert`, are a common use case for this field.
  name: event.reference
  type: keyword
- description: Risk score or priority of the event (e.g. security solutions). Use your system's original value here.
  name: event.risk_score
  type: float
- description: |-
    Normalized risk score or priority of the event, on a scale of 0 to 100.
    This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.
  name: event.risk_score_norm
  type: float
- description: |-
    Sequence number of the event.
    The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.
  name: event.sequence
  type: long
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: event.start contains the date when the event started or when the activity was first observed.
  name: event.start
  type: date
- description: |-
    This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  name: event.timezone
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: |-
    URL linking to an external system to continue investigation of this event.
    This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.
  name: event.url
  type: keyword
- description: |-
    Last time the file was accessed.
    Note that not all filesystems keep track of access time.
  name: file.accessed
  type: date
- description: |-
    Array of file attributes.
    Attributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.
  name: file.attributes
  type: keyword
- description: Boolean to capture if a signature is present.
  name: file.code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: file.code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: file.code_signature.subject_name
  type: keyword
- description: |-
    Stores the trust status of the certificate chain.
    Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
  name: file.code_signature.trusted
  type: boolean
- description: |-
    Boolean to capture if the digital signature is verified against the binary content.
    Leave unpopulated if a certificate was unchecked.
  name: file.code_signature.valid
  type: boolean
- description: |-
    File creation time.
    Note that not all filesystems store the creation time.
  name: file.created
  type: date
- description: |-
    Last time the file attributes or metadata changed.
    Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.
  name: file.ctime
  type: date
- description: Device that is the source of the file.
  name: file.device
  type: keyword
- description: Directory where the file is located. It should include the drive letter, when appropriate.
  name: file.directory
  type: keyword
- description: |-
    Drive letter where the file is located. This field is only relevant on Windows.
    The value should be uppercase, and not include the colon.
  name: file.drive_letter
  type: keyword
- description: |-
    File extension, excluding the leading dot.
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: file.extension
  type: keyword
- description: Primary group ID (GID) of the file.
  name: file.gid
  type: keyword
- description: Primary group name of the file.
  name: file.group
  type: keyword
- description: MD5 hash.
  name: file.hash.md5
  type: keyword
- description: SHA1 hash.
  name: file.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: file.hash.sha256
  type: keyword
- description: SHA512 hash.
  name: file.hash.sha512
  type: keyword
- description: Inode representing the file in the filesystem.
  name: file.inode
  type: keyword
- description: MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.
  name: file.mime_type
  type: keyword
- description: Mode of the file in octal representation.
  name: file.mode
  type: keyword
- description: Last time the file content was modified.
  name: file.mtime
  type: date
- description: Name of the file including the extension, without the directory.
  name: file.name
  type: keyword
- description: File owner's username.
  name: file.owner
  type: keyword
- description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
  multi_fields:
    - name: text
      type: match_only_text
  name: file.path
  type: keyword
- description: CPU architecture target for the file.
  name: file.pe.architecture
  type: keyword
- description: Internal company name of the file, provided at compile-time.
  name: file.pe.company
  type: keyword
- description: Internal description of the file, provided at compile-time.
  name: file.pe.description
  type: keyword
- description: Internal version of the file, provided at compile-time.
  name: file.pe.file_version
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: file.pe.imphash
  type: keyword
- description: Internal name of the file, provided at compile-time.
  name: file.pe.original_file_name
  type: keyword
- description: Internal product name of the file, provided at compile-time.
  name: file.pe.product
  type: keyword
- description: |-
    File size in bytes.
    Only relevant when `file.type` is "file".
  name: file.size
  type: long
- description: Target path for symlinks.
  multi_fields:
    - name: text
      type: match_only_text
  name: file.target_path
  type: keyword
- description: File type (file, dir, or symlink).
  name: file.type
  type: keyword
- description: The user ID (UID) or security identifier (SID) of the file owner.
  name: file.uid
  type: keyword
- description: List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.
  name: file.x509.alternative_names
  type: keyword
- description: List of common name (CN) of issuing certificate authority.
  name: file.x509.issuer.common_name
  type: keyword
- description: List of country (C) codes
  name: file.x509.issuer.country
  type: keyword
- description: Distinguished name (DN) of issuing certificate authority.
  name: file.x509.issuer.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: file.x509.issuer.locality
  type: keyword
- description: List of organizations (O) of issuing certificate authority.
  name: file.x509.issuer.organization
  type: keyword
- description: List of organizational units (OU) of issuing certificate authority.
  name: file.x509.issuer.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: file.x509.issuer.state_or_province
  type: keyword
- description: Time at which the certificate is no longer considered valid.
  name: file.x509.not_after
  type: date
- description: Time at which the certificate is first considered valid.
  name: file.x509.not_before
  type: date
- description: Algorithm used to generate the public key.
  name: file.x509.public_key_algorithm
  type: keyword
- description: The curve used by the elliptic curve public key algorithm. This is algorithm specific.
  name: file.x509.public_key_curve
  type: keyword
- description: Exponent used to derive the public key. This is algorithm specific.
  doc_values: false
  index: false
  name: file.x509.public_key_exponent
  type: long
- description: The size of the public key space in bits.
  name: file.x509.public_key_size
  type: long
- description: Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.
  name: file.x509.serial_number
  type: keyword
- description: Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
  name: file.x509.signature_algorithm
  type: keyword
- description: List of common names (CN) of subject.
  name: file.x509.subject.common_name
  type: keyword
- description: List of country (C) code
  name: file.x509.subject.country
  type: keyword
- description: Distinguished name (DN) of the certificate subject entity.
  name: file.x509.subject.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: file.x509.subject.locality
  type: keyword
- description: List of organizations (O) of subject.
  name: file.x509.subject.organization
  type: keyword
- description: List of organizational units (OU) of subject.
  name: file.x509.subject.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: file.x509.subject.state_or_province
  type: keyword
- description: Version of x509 format.
  name: file.x509.version_number
  type: keyword
- description: City name.
  name: geo.city_name
  type: keyword
- description: Name of the continent.
  name: geo.continent_name
  type: keyword
- description: Country ISO code.
  name: geo.country_iso_code
  type: keyword
- description: Country name.
  name: geo.country_name
  type: keyword
- description: Longitude and latitude.
  name: geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: geo.name
  type: keyword
- description: Region ISO code.
  name: geo.region_iso_code
  type: keyword
- description: Region name.
  name: geo.region_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: group.id
  type: keyword
- description: Name of the group.
  name: group.name
  type: keyword
- description: MD5 hash.
  name: hash.md5
  type: keyword
- description: SHA1 hash.
  name: hash.sha1
  type: keyword
- description: SHA256 hash.
  name: hash.sha256
  type: keyword
- description: SHA512 hash.
  name: hash.sha512
  type: keyword
- description: Operating system architecture.
  name: host.architecture
  type: keyword
- description: |-
    Name of the domain of which the host is a member.
    For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.
  name: host.domain
  type: keyword
- description: City name.
  name: host.geo.city_name
  type: keyword
- description: Name of the continent.
  name: host.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: host.geo.country_iso_code
  type: keyword
- description: Country name.
  name: host.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: host.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: host.geo.name
  type: keyword
- description: Region ISO code.
  name: host.geo.region_iso_code
  type: keyword
- description: Region name.
  name: host.geo.region_name
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: |-
    Unique host id.
    As hostname is not always unique, use values that are meaningful in your environment.
    Example: The current usage of `beat.name`.
  name: host.id
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Host MAC addresses.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: host.mac
  type: keyword
- description: |-
    Name of the host.
    It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
  name: host.name
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: host.os.family
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: host.os.full
  type: keyword
- description: Operating system kernel version as a raw string.
  name: host.os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: host.os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: host.os.platform
  type: keyword
- description: Operating system version as a raw string.
  name: host.os.version
  type: keyword
- description: |-
    Type of host.
    For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.
  name: host.type
  type: keyword
- description: Seconds the host has been up.
  name: host.uptime
  type: long
- description: Size in bytes of the request body.
  name: http.request.body.bytes
  type: long
- description: The full HTTP request body.
  multi_fields:
    - name: text
      type: match_only_text
  name: http.request.body.content
  type: wildcard
- description: Total size in bytes of the request (body and headers).
  name: http.request.bytes
  type: long
- description: |-
    HTTP request method.
    The value should retain its casing from the original event. For example, `GET`, `get`, and `GeT` are all considered valid values for this field.
  name: http.request.method
  type: keyword
- description: Referrer for this HTTP request.
  name: http.request.referrer
  type: keyword
- description: Size in bytes of the response body.
  name: http.response.body.bytes
  type: long
- description: The full HTTP response body.
  multi_fields:
    - name: text
      type: match_only_text
  name: http.response.body.content
  type: wildcard
- description: Total size in bytes of the response (body and headers).
  name: http.response.bytes
  type: long
- description: HTTP response status code.
  name: http.response.status_code
  type: long
- description: HTTP version.
  name: http.version
  type: keyword
- description: Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.
  name: interface.alias
  type: keyword
- description: Interface ID as reported by an observer (typically SNMP interface ID).
  name: interface.id
  type: keyword
- description: Interface name as reported by the system.
  name: interface.name
  type: keyword
- description: |-
    Custom key/value pairs.
    Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
    Example: `docker` and `k8s` labels.
  name: labels
  type: object
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.
  name: log.logger
  type: keyword
- description: The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.
  name: log.syslog
  type: object
- description: |-
    The Syslog numeric facility of the log event, if available.
    According to RFCs 5424 and 3164, this value should be an integer between 0 and 23.
  name: log.syslog.facility.code
  type: long
- description: The Syslog text-based facility of the log event, if available.
  name: log.syslog.facility.name
  type: keyword
- description: |-
    Syslog numeric priority of the event, if available.
    According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This number is therefore expected to contain a value between 0 and 191.
  name: log.syslog.priority
  type: long
- description: |-
    The Syslog numeric severity of the log event, if available.
    If the event source publishing via Syslog provides a different numeric severity value (e.g. firewall, IDS), your source's numeric severity should go to `event.severity`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `event.severity`.
  name: log.syslog.severity.code
  type: long
- description: |-
    The Syslog numeric severity of the log event, if available.
    If the event source publishing via Syslog provides a different severity value (e.g. firewall, IDS), your source's text severity should go to `log.level`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `log.level`.
  name: log.syslog.severity.name
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: |-
    When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.
    For example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.
    The field value must be normalized to lowercase for querying.
  name: network.application
  type: keyword
- description: |-
    Total bytes transferred in both directions.
    If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
  name: network.bytes
  type: long
- description: |-
    A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
    Learn more at https://github.com/corelight/community-id-spec.
  name: network.community_id
  type: keyword
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: Host IP address when the source IP address is the proxy.
  name: network.forwarded_ip
  type: ip
- description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.
  name: network.iana_number
  type: keyword
- description: Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)
  name: network.inner
  type: object
- description: VLAN ID as reported by the observer.
  name: network.inner.vlan.id
  type: keyword
- description: Optional VLAN name as reported by the observer.
  name: network.inner.vlan.name
  type: keyword
- description: Name given by operators to sections of their network.
  name: network.name
  type: keyword
- description: |-
    Total packets transferred in both directions.
    If `source.packets` and `destination.packets` are known, `network.packets` is their sum.
  name: network.packets
  type: long
- description: |-
    In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.
    The field value must be normalized to lowercase for querying.
  name: network.protocol
  type: keyword
- description: |-
    Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
    The field value must be normalized to lowercase for querying.
  name: network.transport
  type: keyword
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying.
  name: network.type
  type: keyword
- description: VLAN ID as reported by the observer.
  name: network.vlan.id
  type: keyword
- description: Optional VLAN name as reported by the observer.
  name: network.vlan.name
  type: keyword
- description: Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.
  name: observer.egress
  type: object
- description: Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.
  name: observer.egress.interface.alias
  type: keyword
- description: Interface ID as reported by an observer (typically SNMP interface ID).
  name: observer.egress.interface.id
  type: keyword
- description: Interface name as reported by the system.
  name: observer.egress.interface.name
  type: keyword
- description: VLAN ID as reported by the observer.
  name: observer.egress.vlan.id
  type: keyword
- description: Optional VLAN name as reported by the observer.
  name: observer.egress.vlan.name
  type: keyword
- description: Network zone of outbound traffic as reported by the observer to categorize the destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.
  name: observer.egress.zone
  type: keyword
- description: City name.
  name: observer.geo.city_name
  type: keyword
- description: Name of the continent.
  name: observer.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: observer.geo.country_iso_code
  type: keyword
- description: Country name.
  name: observer.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: observer.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: observer.geo.name
  type: keyword
- description: Region ISO code.
  name: observer.geo.region_iso_code
  type: keyword
- description: Region name.
  name: observer.geo.region_name
  type: keyword
- description: Hostname of the observer.
  name: observer.hostname
  type: keyword
- description: Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.
  name: observer.ingress
  type: object
- description: Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.
  name: observer.ingress.interface.alias
  type: keyword
- description: Interface ID as reported by an observer (typically SNMP interface ID).
  name: observer.ingress.interface.id
  type: keyword
- description: Interface name as reported by the system.
  name: observer.ingress.interface.name
  type: keyword
- description: VLAN ID as reported by the observer.
  name: observer.ingress.vlan.id
  type: keyword
- description: Optional VLAN name as reported by the observer.
  name: observer.ingress.vlan.name
  type: keyword
- description: Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.
  name: observer.ingress.zone
  type: keyword
- description: IP addresses of the observer.
  name: observer.ip
  type: ip
- description: |-
    MAC addresses of the observer.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: observer.mac
  type: keyword
- description: |-
    Custom name of the observer.
    This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
    If no custom name is needed, the field can be left empty.
  name: observer.name
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: observer.os.family
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: observer.os.full
  type: keyword
- description: Operating system kernel version as a raw string.
  name: observer.os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: observer.os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: observer.os.platform
  type: keyword
- description: Operating system version as a raw string.
  name: observer.os.version
  type: keyword
- description: The product name of the observer.
  name: observer.product
  type: keyword
- description: Observer serial number.
  name: observer.serial_number
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: Vendor name of the observer.
  name: observer.vendor
  type: keyword
- description: Observer version.
  name: observer.version
  type: keyword
- description: Unique identifier for the organization.
  name: organization.id
  type: keyword
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: organization.name
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: os.family
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: os.full
  type: keyword
- description: Operating system kernel version as a raw string.
  name: os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: os.platform
  type: keyword
- description: Operating system version as a raw string.
  name: os.version
  type: keyword
- description: Package architecture.
  name: package.architecture
  type: keyword
- description: |-
    Additional information about the build version of the installed package.
    For example use the commit SHA of a non-released package.
  name: package.build_version
  type: keyword
- description: Checksum of the installed package for verification.
  name: package.checksum
  type: keyword
- description: Description of the package.
  name: package.description
  type: keyword
- description: Indicating how the package was installed, e.g. user-local, global.
  name: package.install_scope
  type: keyword
- description: Time when package was installed.
  name: package.installed
  type: date
- description: |-
    License under which the package was released.
    Use a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).
  name: package.license
  type: keyword
- description: Package name
  name: package.name
  type: keyword
- description: Path where the package is installed.
  name: package.path
  type: keyword
- description: Home page or reference URL of the software in this package, if available.
  name: package.reference
  type: keyword
- description: Package size in bytes.
  name: package.size
  type: long
- description: |-
    Type of package.
    This should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.
  name: package.type
  type: keyword
- description: Package version
  name: package.version
  type: keyword
- description: CPU architecture target for the file.
  name: pe.architecture
  type: keyword
- description: Internal company name of the file, provided at compile-time.
  name: pe.company
  type: keyword
- description: Internal description of the file, provided at compile-time.
  name: pe.description
  type: keyword
- description: Internal version of the file, provided at compile-time.
  name: pe.file_version
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: pe.imphash
  type: keyword
- description: Internal name of the file, provided at compile-time.
  name: pe.original_file_name
  type: keyword
- description: Internal product name of the file, provided at compile-time.
  name: pe.product
  type: keyword
- description: |-
    Array of process arguments, starting with the absolute path to the executable.
    May be filtered to protect sensitive information.
  name: process.args
  type: keyword
- description: |-
    Length of the process.args array.
    This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
  name: process.args_count
  type: long
- description: Boolean to capture if a signature is present.
  name: process.code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: process.code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: process.code_signature.subject_name
  type: keyword
- description: |-
    Stores the trust status of the certificate chain.
    Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
  name: process.code_signature.trusted
  type: boolean
- description: |-
    Boolean to capture if the digital signature is verified against the binary content.
    Leave unpopulated if a certificate was unchecked.
  name: process.code_signature.valid
  type: boolean
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.command_line
  type: wildcard
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.entity_id
  type: keyword
- description: Absolute path to the process executable.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.executable
  type: keyword
- description: |-
    The exit code of the process, if this is a termination event.
    The field should be absent if there is no exit code for the event (e.g. process start).
  name: process.exit_code
  type: long
- description: MD5 hash.
  name: process.hash.md5
  type: keyword
- description: SHA1 hash.
  name: process.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: process.hash.sha256
  type: keyword
- description: SHA512 hash.
  name: process.hash.sha512
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.name
  type: keyword
- description: |-
    Array of process arguments, starting with the absolute path to the executable.
    May be filtered to protect sensitive information.
  name: process.parent.args
  type: keyword
- description: |-
    Length of the process.args array.
    This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
  name: process.parent.args_count
  type: long
- description: Boolean to capture if a signature is present.
  name: process.parent.code_signature.exists
  type: boolean
- description: |-
    Additional information about the certificate status.
    This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
  name: process.parent.code_signature.status
  type: keyword
- description: Subject name of the code signer
  name: process.parent.code_signature.subject_name
  type: keyword
- description: |-
    Stores the trust status of the certificate chain.
    Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
  name: process.parent.code_signature.trusted
  type: boolean
- description: |-
    Boolean to capture if the digital signature is verified against the binary content.
    Leave unpopulated if a certificate was unchecked.
  name: process.parent.code_signature.valid
  type: boolean
- description: |-
    Full command line that started the process, including the absolute path to the executable, and all arguments.
    Some arguments may be filtered to protect sensitive information.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.command_line
  type: wildcard
- description: |-
    Unique identifier for the process.
    The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
    Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.
  name: process.parent.entity_id
  type: keyword
- description: Absolute path to the process executable.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.executable
  type: keyword
- description: |-
    The exit code of the process, if this is a termination event.
    The field should be absent if there is no exit code for the event (e.g. process start).
  name: process.parent.exit_code
  type: long
- description: MD5 hash.
  name: process.parent.hash.md5
  type: keyword
- description: SHA1 hash.
  name: process.parent.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: process.parent.hash.sha256
  type: keyword
- description: SHA512 hash.
  name: process.parent.hash.sha512
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.name
  type: keyword
- description: CPU architecture target for the file.
  name: process.parent.pe.architecture
  type: keyword
- description: Internal company name of the file, provided at compile-time.
  name: process.parent.pe.company
  type: keyword
- description: Internal description of the file, provided at compile-time.
  name: process.parent.pe.description
  type: keyword
- description: Internal version of the file, provided at compile-time.
  name: process.parent.pe.file_version
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: process.parent.pe.imphash
  type: keyword
- description: Internal name of the file, provided at compile-time.
  name: process.parent.pe.original_file_name
  type: keyword
- description: Internal product name of the file, provided at compile-time.
  name: process.parent.pe.product
  type: keyword
- description: Identifier of the group of processes the process belongs to.
  name: process.parent.pgid
  type: long
- description: Process id.
  name: process.parent.pid
  type: long
- description: The time the process started.
  name: process.parent.start
  type: date
- description: Thread ID.
  name: process.parent.thread.id
  type: long
- description: Thread name.
  name: process.parent.thread.name
  type: keyword
- description: |-
    Process title.
    The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.title
  type: keyword
- description: Seconds the process has been up.
  name: process.parent.uptime
  type: long
- description: The working directory of the process.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.parent.working_directory
  type: keyword
- description: CPU architecture target for the file.
  name: process.pe.architecture
  type: keyword
- description: Internal company name of the file, provided at compile-time.
  name: process.pe.company
  type: keyword
- description: Internal description of the file, provided at compile-time.
  name: process.pe.description
  type: keyword
- description: Internal version of the file, provided at compile-time.
  name: process.pe.file_version
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: process.pe.imphash
  type: keyword
- description: Internal name of the file, provided at compile-time.
  name: process.pe.original_file_name
  type: keyword
- description: Internal product name of the file, provided at compile-time.
  name: process.pe.product
  type: keyword
- description: Identifier of the group of processes the process belongs to.
  name: process.pgid
  type: long
- description: Process id.
  name: process.pid
  type: long
- description: The time the process started.
  name: process.start
  type: date
- description: Thread ID.
  name: process.thread.id
  type: long
- description: Thread name.
  name: process.thread.name
  type: keyword
- description: |-
    Process title.
    The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.title
  type: keyword
- description: Seconds the process has been up.
  name: process.uptime
  type: long
- description: The working directory of the process.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.working_directory
  type: keyword
- description: |-
    Original bytes written with base64 encoding.
    For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.
  name: registry.data.bytes
  type: keyword
- description: |-
    Content when writing string types.
    Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"`).
  name: registry.data.strings
  type: wildcard
- description: Standard registry type for encoding contents
  name: registry.data.type
  type: keyword
- description: Abbreviated name for the hive.
  name: registry.hive
  type: keyword
- description: Hive-relative path of keys.
  name: registry.key
  type: keyword
- description: Full path, including hive, key and value
  name: registry.path
  type: keyword
- description: Name of the value written.
  name: registry.value
  type: keyword
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  type: keyword
- description: All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
  name: related.hosts
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  type: keyword
- description: Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.
  name: rule.author
  type: keyword
- description: A categorization value keyword used by the entity using the rule for detection of this event.
  name: rule.category
  type: keyword
- description: The description of the rule generating the event.
  name: rule.description
  type: keyword
- description: A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
  name: rule.id
  type: keyword
- description: Name of the license under which the rule used to generate this event is made available.
  name: rule.license
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: |-
    Reference URL to additional information about the rule used to generate this event.
    The URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.
  name: rule.reference
  type: keyword
- description: Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.
  name: rule.ruleset
  type: keyword
- description: A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.
  name: rule.uuid
  type: keyword
- description: The version / revision of the rule being used for analysis.
  name: rule.version
  type: keyword
- description: |-
    Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: server.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: server.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: server.as.organization.name
  type: keyword
- description: Bytes sent from the server to the client.
  name: server.bytes
  type: long
- description: |-
    The domain name of the server system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: server.domain
  type: keyword
- description: City name.
  name: server.geo.city_name
  type: keyword
- description: Name of the continent.
  name: server.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: server.geo.country_iso_code
  type: keyword
- description: Country name.
  name: server.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: server.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: server.geo.name
  type: keyword
- description: Region ISO code.
  name: server.geo.region_iso_code
  type: keyword
- description: Region name.
  name: server.geo.region_name
  type: keyword
- description: IP address of the server (IPv4 or IPv6).
  name: server.ip
  type: ip
- description: |-
    MAC address of the server.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: server.mac
  type: keyword
- description: |-
    Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: server.nat.ip
  type: ip
- description: |-
    Translated port of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: server.nat.port
  type: long
- description: Packets sent from the server to the client.
  name: server.packets
  type: long
- description: Port of the server.
  name: server.port
  type: long
- description: |-
    The highest registered server domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: server.registered_domain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: server.top_level_domain
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: server.user.domain
  type: keyword
- description: User email address.
  name: server.user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: server.user.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: server.user.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: server.user.group.id
  type: keyword
- description: Name of the group.
  name: server.user.group.name
  type: keyword
- description: |-
    Unique user hash to correlate information for a user in anonymized form.
    Useful if `user.id` or `user.name` contain confidential information and cannot be used.
  name: server.user.hash
  type: keyword
- description: Unique identifier of the user.
  name: server.user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: server.user.name
  type: keyword
- description: Array of user roles at the time of the event.
  name: server.user.roles
  type: keyword
- description: |-
    Ephemeral identifier of this service (if one exists).
    This id normally changes across restarts, but `service.id` does not.
  name: service.ephemeral_id
  type: keyword
- description: |-
    Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.
    This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.
    Note that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.
  name: service.id
  type: keyword
- description: |-
    Name of the service data is collected from.
    The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
    In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.
  name: service.name
  type: keyword
- description: |-
    Name of a service node.
    This allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.
    In the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.
  name: service.node.name
  type: keyword
- description: Current state of the service.
  name: service.state
  type: keyword
- description: |-
    The type of the service data is collected from.
    The type can be used to group and correlate logs and metrics from one service type.
    Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.
  name: service.type
  type: keyword
- description: |-
    Version of the service the data was collected from.
    This allows to look at a data set only for a specific version of a service.
  name: service.version
  type: keyword
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.as.organization.name
  type: keyword
- description: Bytes sent from the source to the destination.
  name: source.bytes
  type: long
- description: |-
    The domain name of the source system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: source.domain
  type: keyword
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: source.geo.name
  type: keyword
- description: Region ISO code.
  name: source.geo.region_iso_code
  type: keyword
- description: Region name.
  name: source.geo.region_name
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: |-
    MAC address of the source.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: source.mac
  type: keyword
- description: |-
    Translated ip of source based NAT sessions (e.g. internal client to internet)
    Typically connections traversing load balancers, firewalls, or routers.
  name: source.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions. (e.g. internal client to internet)
    Typically used with load balancers, firewalls, or routers.
  name: source.nat.port
  type: long
- description: Packets sent from the source to the destination.
  name: source.packets
  type: long
- description: Port of the source.
  name: source.port
  type: long
- description: |-
    The highest registered source domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: source.registered_domain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: source.top_level_domain
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: source.user.domain
  type: keyword
- description: User email address.
  name: source.user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.user.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: source.user.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: source.user.group.id
  type: keyword
- description: Name of the group.
  name: source.user.group.name
  type: keyword
- description: |-
    Unique user hash to correlate information for a user in anonymized form.
    Useful if `user.id` or `user.name` contain confidential information and cannot be used.
  name: source.user.hash
  type: keyword
- description: Unique identifier of the user.
  name: source.user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.user.name
  type: keyword
- description: Array of user roles at the time of the event.
  name: source.user.roles
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.
  name: threat.framework
  type: keyword
- description: The id of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )
  name: threat.tactic.id
  type: keyword
- description: Name of the type of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)
  name: threat.tactic.name
  type: keyword
- description: The reference url of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )
  name: threat.tactic.reference
  type: keyword
- description: The id of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
  name: threat.technique.id
  type: keyword
- description: The name of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
  multi_fields:
    - name: text
      type: match_only_text
  name: threat.technique.name
  type: keyword
- description: The reference url of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
  name: threat.technique.reference
  type: keyword
- description: String indicating the cipher used during the current connection.
  name: tls.cipher
  type: keyword
- description: PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.
  name: tls.client.certificate
  type: keyword
- description: Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.
  name: tls.client.certificate_chain
  type: keyword
- description: Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.client.hash.md5
  type: keyword
- description: Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.client.hash.sha1
  type: keyword
- description: Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.client.hash.sha256
  type: keyword
- description: Distinguished name of subject of the issuer of the x.509 certificate presented by the client.
  name: tls.client.issuer
  type: keyword
- description: A hash that identifies clients based on how they perform an SSL/TLS handshake.
  name: tls.client.ja3
  type: keyword
- description: Date/Time indicating when client certificate is no longer considered valid.
  name: tls.client.not_after
  type: date
- description: Date/Time indicating when client certificate is first considered valid.
  name: tls.client.not_before
  type: date
- description: Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.
  name: tls.client.server_name
  type: keyword
- description: Distinguished name of subject of the x.509 certificate presented by the client.
  name: tls.client.subject
  type: keyword
- description: Array of ciphers offered by the client during the client hello.
  name: tls.client.supported_ciphers
  type: keyword
- description: List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.
  name: tls.client.x509.alternative_names
  type: keyword
- description: List of common name (CN) of issuing certificate authority.
  name: tls.client.x509.issuer.common_name
  type: keyword
- description: List of country (C) codes
  name: tls.client.x509.issuer.country
  type: keyword
- description: Distinguished name (DN) of issuing certificate authority.
  name: tls.client.x509.issuer.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: tls.client.x509.issuer.locality
  type: keyword
- description: List of organizations (O) of issuing certificate authority.
  name: tls.client.x509.issuer.organization
  type: keyword
- description: List of organizational units (OU) of issuing certificate authority.
  name: tls.client.x509.issuer.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: tls.client.x509.issuer.state_or_province
  type: keyword
- description: Time at which the certificate is no longer considered valid.
  name: tls.client.x509.not_after
  type: date
- description: Time at which the certificate is first considered valid.
  name: tls.client.x509.not_before
  type: date
- description: Algorithm used to generate the public key.
  name: tls.client.x509.public_key_algorithm
  type: keyword
- description: The curve used by the elliptic curve public key algorithm. This is algorithm specific.
  name: tls.client.x509.public_key_curve
  type: keyword
- description: Exponent used to derive the public key. This is algorithm specific.
  doc_values: false
  index: false
  name: tls.client.x509.public_key_exponent
  type: long
- description: The size of the public key space in bits.
  name: tls.client.x509.public_key_size
  type: long
- description: Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.
  name: tls.client.x509.serial_number
  type: keyword
- description: Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
  name: tls.client.x509.signature_algorithm
  type: keyword
- description: List of common names (CN) of subject.
  name: tls.client.x509.subject.common_name
  type: keyword
- description: List of country (C) code
  name: tls.client.x509.subject.country
  type: keyword
- description: Distinguished name (DN) of the certificate subject entity.
  name: tls.client.x509.subject.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: tls.client.x509.subject.locality
  type: keyword
- description: List of organizations (O) of subject.
  name: tls.client.x509.subject.organization
  type: keyword
- description: List of organizational units (OU) of subject.
  name: tls.client.x509.subject.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: tls.client.x509.subject.state_or_province
  type: keyword
- description: Version of x509 format.
  name: tls.client.x509.version_number
  type: keyword
- description: String indicating the curve used for the given cipher, when applicable.
  name: tls.curve
  type: keyword
- description: Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
  name: tls.established
  type: boolean
- description: String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.
  name: tls.next_protocol
  type: keyword
- description: Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
  name: tls.resumed
  type: boolean
- description: PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.
  name: tls.server.certificate
  type: keyword
- description: Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.
  name: tls.server.certificate_chain
  type: keyword
- description: Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.server.hash.md5
  type: keyword
- description: Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.server.hash.sha1
  type: keyword
- description: Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
  name: tls.server.hash.sha256
  type: keyword
- description: Subject of the issuer of the x.509 certificate presented by the server.
  name: tls.server.issuer
  type: keyword
- description: A hash that identifies servers based on how they perform an SSL/TLS handshake.
  name: tls.server.ja3s
  type: keyword
- description: Timestamp indicating when server certificate is no longer considered valid.
  name: tls.server.not_after
  type: date
- description: Timestamp indicating when server certificate is first considered valid.
  name: tls.server.not_before
  type: date
- description: Subject of the x.509 certificate presented by the server.
  name: tls.server.subject
  type: keyword
- description: List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.
  name: tls.server.x509.alternative_names
  type: keyword
- description: List of common name (CN) of issuing certificate authority.
  name: tls.server.x509.issuer.common_name
  type: keyword
- description: List of country (C) codes
  name: tls.server.x509.issuer.country
  type: keyword
- description: Distinguished name (DN) of issuing certificate authority.
  name: tls.server.x509.issuer.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: tls.server.x509.issuer.locality
  type: keyword
- description: List of organizations (O) of issuing certificate authority.
  name: tls.server.x509.issuer.organization
  type: keyword
- description: List of organizational units (OU) of issuing certificate authority.
  name: tls.server.x509.issuer.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: tls.server.x509.issuer.state_or_province
  type: keyword
- description: Time at which the certificate is no longer considered valid.
  name: tls.server.x509.not_after
  type: date
- description: Time at which the certificate is first considered valid.
  name: tls.server.x509.not_before
  type: date
- description: Algorithm used to generate the public key.
  name: tls.server.x509.public_key_algorithm
  type: keyword
- description: The curve used by the elliptic curve public key algorithm. This is algorithm specific.
  name: tls.server.x509.public_key_curve
  type: keyword
- description: Exponent used to derive the public key. This is algorithm specific.
  doc_values: false
  index: false
  name: tls.server.x509.public_key_exponent
  type: long
- description: The size of the public key space in bits.
  name: tls.server.x509.public_key_size
  type: long
- description: Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.
  name: tls.server.x509.serial_number
  type: keyword
- description: Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
  name: tls.server.x509.signature_algorithm
  type: keyword
- description: List of common names (CN) of subject.
  name: tls.server.x509.subject.common_name
  type: keyword
- description: List of country (C) code
  name: tls.server.x509.subject.country
  type: keyword
- description: Distinguished name (DN) of the certificate subject entity.
  name: tls.server.x509.subject.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: tls.server.x509.subject.locality
  type: keyword
- description: List of organizations (O) of subject.
  name: tls.server.x509.subject.organization
  type: keyword
- description: List of organizational units (OU) of subject.
  name: tls.server.x509.subject.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: tls.server.x509.subject.state_or_province
  type: keyword
- description: Version of x509 format.
  name: tls.server.x509.version_number
  type: keyword
- description: Numeric part of the version parsed from the original string.
  name: tls.version
  type: keyword
- description: Normalized lowercase protocol name parsed from original string.
  name: tls.version_protocol
  type: keyword
- description: |-
    Unique identifier of the span within the scope of its trace.
    A span represents an operation within a transaction, such as a request to another service, or a database query.
  name: span.id
  type: keyword
- description: |-
    Unique identifier of the trace.
    A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.
  name: trace.id
  type: keyword
- description: |-
    Unique identifier of the transaction within the scope of its trace.
    A transaction is the highest level of work measured within a service, such as a request to a server.
  name: transaction.id
  type: keyword
- description: |-
    Domain of the url, such as "www.elastic.co".
    In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.
  name: url.domain
  type: keyword
- description: |-
    The field contains the file extension from the original request url, excluding the leading dot.
    The file extension is only set if it exists, as not every url has a file extension.
    The leading period must not be included. For example, the value must be "png", not ".png".
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: url.extension
  type: keyword
- description: |-
    Portion of the url after the `#`, such as "top".
    The `#` is not part of the fragment.
  name: url.fragment
  type: keyword
- description: If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.
  multi_fields:
    - name: text
      type: match_only_text
  name: url.full
  type: wildcard
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  multi_fields:
    - name: text
      type: match_only_text
  name: url.original
  type: wildcard
- description: Password of the request.
  name: url.password
  type: keyword
- description: Path of the request, such as "/search".
  name: url.path
  type: wildcard
- description: Port of the request, such as 443.
  name: url.port
  type: long
- description: |-
    The query field describes the query string of the request, such as "q=elasticsearch".
    The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.
  name: url.query
  type: keyword
- description: |-
    The highest registered url domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: url.registered_domain
  type: keyword
- description: |-
    Scheme of the request, such as "https".
    Note: The `:` is not part of the scheme.
  name: url.scheme
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: url.top_level_domain
  type: keyword
- description: Username of the request.
  name: url.username
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.domain
  type: keyword
- description: User email address.
  name: user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: user.group.id
  type: keyword
- description: Name of the group.
  name: user.group.name
  type: keyword
- description: |-
    Unique user hash to correlate information for a user in anonymized form.
    Useful if `user.id` or `user.name` contain confidential information and cannot be used.
  name: user.hash
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
- description: Array of user roles at the time of the event.
  name: user.roles
  type: keyword
- description: Name of the device.
  name: user_agent.device.name
  type: keyword
- description: Name of the user agent.
  name: user_agent.name
  type: keyword
- description: Unparsed user_agent string.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.original
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: user_agent.os.family
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.full
  type: keyword
- description: Operating system kernel version as a raw string.
  name: user_agent.os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: user_agent.os.platform
  type: keyword
- description: Operating system version as a raw string.
  name: user_agent.os.version
  type: keyword
- description: Version of the user agent.
  name: user_agent.version
  type: keyword
- description: VLAN ID as reported by the observer.
  name: vlan.id
  type: keyword
- description: Optional VLAN name as reported by the observer.
  name: vlan.name
  type: keyword
- description: |-
    The type of system or architecture that the vulnerability affects. These may be platform-specific (for example, Debian or SUSE) or general (for example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys vulnerability categories])
    This field must be an array.
  name: vulnerability.category
  type: keyword
- description: The classification of the vulnerability scoring system. For example (https://www.first.org/cvss/)
  name: vulnerability.classification
  type: keyword
- description: The description of the vulnerability that provides additional context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common Vulnerabilities and Exposure CVE description])
  multi_fields:
    - name: text
      type: match_only_text
  name: vulnerability.description
  type: keyword
- description: The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)
  name: vulnerability.enumeration
  type: keyword
- description: The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and Exposure CVE ID]
  name: vulnerability.id
  type: keyword
- description: A resource that provides additional information, context, and mitigations for the identified vulnerability.
  name: vulnerability.reference
  type: keyword
- description: The report or scan identification number.
  name: vulnerability.report_id
  type: keyword
- description: The name of the vulnerability scanner vendor.
  name: vulnerability.scanner.vendor
  type: keyword
- description: |-
    Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
    Base scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)
  name: vulnerability.score.base
  type: float
- description: |-
    Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
    Environmental scores cover an assessment for any modified Base metrics, confidentiality, integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)
  name: vulnerability.score.environmental
  type: float
- description: |-
    Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
    Temporal scores cover an assessment for code maturity, remediation level, and confidence. For example (https://www.first.org/cvss/specification-document)
  name: vulnerability.score.temporal
  type: float
- description: |-
    The National Vulnerability Database (NVD) provides qualitative severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.
    CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  name: vulnerability.score.version
  type: keyword
- description: The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)
  name: vulnerability.severity
  type: keyword
- description: List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.
  name: x509.alternative_names
  type: keyword
- description: List of common name (CN) of issuing certificate authority.
  name: x509.issuer.common_name
  type: keyword
- description: List of country (C) codes
  name: x509.issuer.country
  type: keyword
- description: Distinguished name (DN) of issuing certificate authority.
  name: x509.issuer.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: x509.issuer.locality
  type: keyword
- description: List of organizations (O) of issuing certificate authority.
  name: x509.issuer.organization
  type: keyword
- description: List of organizational units (OU) of issuing certificate authority.
  name: x509.issuer.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: x509.issuer.state_or_province
  type: keyword
- description: Time at which the certificate is no longer considered valid.
  name: x509.not_after
  type: date
- description: Time at which the certificate is first considered valid.
  name: x509.not_before
  type: date
- description: Algorithm used to generate the public key.
  name: x509.public_key_algorithm
  type: keyword
- description: The curve used by the elliptic curve public key algorithm. This is algorithm specific.
  name: x509.public_key_curve
  type: keyword
- description: Exponent used to derive the public key. This is algorithm specific.
  doc_values: false
  index: false
  name: x509.public_key_exponent
  type: long
- description: The size of the public key space in bits.
  name: x509.public_key_size
  type: long
- description: Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.
  name: x509.serial_number
  type: keyword
- description: Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.
  name: x509.signature_algorithm
  type: keyword
- description: List of common names (CN) of subject.
  name: x509.subject.common_name
  type: keyword
- description: List of country (C) code
  name: x509.subject.country
  type: keyword
- description: Distinguished name (DN) of the certificate subject entity.
  name: x509.subject.distinguished_name
  type: keyword
- description: List of locality names (L)
  name: x509.subject.locality
  type: keyword
- description: List of organizations (O) of subject.
  name: x509.subject.organization
  type: keyword
- description: List of organizational units (OU) of subject.
  name: x509.subject.organizational_unit
  type: keyword
- description: List of state or province names (ST, S, or P)
  name: x509.subject.state_or_province
  type: keyword
- description: Version of x509 format.
  name: x509.version_number
  type: keyword
