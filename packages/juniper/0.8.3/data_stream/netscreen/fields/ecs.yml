- description: |-
    Date/time when the event originated.
    This is the date/time extracted from the event, typically representing when the event was generated by the source.
    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
    Required field for all events.
  name: '@timestamp'
  type: date
- description: Client domain.
  name: client.domain
  type: keyword
- description: |-
    The highest registered client domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: client.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: client.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: client.top_level_domain
  type: keyword
- description: |-
    Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: destination.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: destination.as.number
  type: long
- description: Organization name.
  name: destination.as.organization.name
  type: keyword
- description: Bytes sent from the destination to the source.
  name: destination.bytes
  type: long
- description: Destination domain.
  name: destination.domain
  type: keyword
- description: City name.
  name: destination.geo.city_name
  type: keyword
- description: Country name.
  name: destination.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: destination.geo.location
  type: geo_point
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: |-
    MAC address of the destination.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: destination.mac
  type: keyword
- description: |-
    Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.ip
  type: ip
- description: |-
    Port the source session is translated to by NAT Device.
    Typically used with load balancers, firewalls, or routers.
  name: destination.nat.port
  type: long
- description: Port of the destination.
  name: destination.port
  type: long
- description: |-
    The highest registered destination domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: destination.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: destination.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: destination.top_level_domain
  type: keyword
- description: |-
    The domain name to which this resource record pertains.
    If a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.
  name: dns.answers.name
  type: keyword
- description: The type of data contained in this resource record.
  name: dns.answers.type
  type: keyword
- description: |-
    The highest registered domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: dns.question.registered_domain
  type: keyword
- description: |-
    The subdomain is all of the labels under the registered_domain.
    If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: dns.question.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: dns.question.top_level_domain
  type: keyword
- description: The type of record being queried.
  name: dns.question.type
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Error message.
  name: error.message
  type: text
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    Identification code for this event, if one exists.
    Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.
  name: event.code
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  name: event.original
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  name: event.timezone
  type: keyword
- description: |-
    Array of file attributes.
    Attributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.
  name: file.attributes
  type: keyword
- description: Directory where the file is located. It should include the drive letter, when appropriate.
  name: file.directory
  type: keyword
- description: |-
    File extension, excluding the leading dot.
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: file.extension
  type: keyword
- description: Name of the file including the extension, without the directory.
  name: file.name
  type: keyword
- description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
  name: file.path
  type: keyword
- description: |-
    File size in bytes.
    Only relevant when `file.type` is "file".
  name: file.size
  type: long
- description: File type (file, dir, or symlink).
  name: file.type
  type: keyword
- description: City name.
  name: geo.city_name
  type: keyword
- description: Country name.
  name: geo.country_name
  type: keyword
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: geo.name
  type: keyword
- description: Region name.
  name: geo.region_name
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: group.id
  type: keyword
- description: Name of the group.
  name: group.name
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Host MAC addresses.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: host.mac
  type: keyword
- description: |-
    Name of the host.
    It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
  name: host.name
  type: keyword
- description: |-
    HTTP request method.
    Prior to ECS 1.6.0 the following guidance was provided:
    "The field value must be normalized to lowercase for querying."
    As of ECS 1.6.0, the guidance is deprecated because the original case of the method may be useful in anomaly detection.  Original case will be mandated in ECS 2.0.0
  name: http.request.method
  type: keyword
- description: Referrer for this HTTP request.
  name: http.request.referrer
  type: keyword
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: |-
    Deprecated for removal in next major version release. This field is superseded by  `event.original`.
    This is the original log message and contains the full log message before splitting it up in multiple parts.
    In contrast to the `message` field which can contain an extracted part of the log message, this field contains the original, full log message. It can have already some modifications applied like encoding or new lines removed to clean up the log message.
    This field is not indexed and doc_values are disabled so it can't be queried but the value can be retrieved from `_source`.
  name: log.original
  type: keyword
- description: |-
    The Syslog numeric facility of the log event, if available.
    According to RFCs 5424 and 3164, this value should be an integer between 0 and 23.
  name: log.syslog.facility.code
  type: long
- description: |-
    Syslog numeric priority of the event, if available.
    According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This number is therefore expected to contain a value between 0 and 191.
  name: log.syslog.priority
  type: long
- description: |-
    The Syslog numeric severity of the log event, if available.
    If the event source publishing via Syslog provides a different numeric severity value (e.g. firewall, IDS), your source's numeric severity should go to `event.severity`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `event.severity`.
  name: log.syslog.severity.code
  type: long
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: text
- description: |-
    A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
    The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
  name: network.application
  type: keyword
- description: |-
    Total bytes transferred in both directions.
    If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.
  name: network.bytes
  type: long
- description: |-
    Direction of the network traffic.
    Recommended values are:
      * ingress
      * egress
      * inbound
      * outbound
      * internal
      * external
      * unknown

    When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
    When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
    Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
  name: network.direction
  type: keyword
- description: Host IP address when the source IP address is the proxy.
  name: network.forwarded_ip
  type: ip
- description: |-
    Total packets transferred in both directions.
    If `source.packets` and `destination.packets` are known, `network.packets` is their sum.
  name: network.packets
  type: long
- description: |-
    L7 Network protocol name. ex. http, lumberjack, transport protocol.
    The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
  name: network.protocol
  type: keyword
- description: Interface name as reported by the system.
  name: observer.egress.interface.name
  type: keyword
- description: Interface name as reported by the system.
  name: observer.ingress.interface.name
  type: keyword
- description: The product name of the observer.
  name: observer.product
  type: keyword
- description: |-
    The type of the observer the data is coming from.
    There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.
  name: observer.type
  type: keyword
- description: Vendor name of the observer.
  name: observer.vendor
  type: keyword
- description: Observer version.
  name: observer.version
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  name: process.name
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  name: process.parent.name
  type: keyword
- description: |-
    Process title.
    The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
  name: process.parent.title
  type: keyword
- description: Process id.
  name: process.pid
  type: long
- description: Parent process' pid.
  name: process.ppid
  type: long
- description: |-
    Process title.
    The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
  name: process.title
  type: keyword
- description: All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
  name: related.hosts
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: Server domain.
  name: server.domain
  type: keyword
- description: |-
    The highest registered server domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: server.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: server.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: server.top_level_domain
  type: keyword
- description: |-
    Name of the service data is collected from.
    The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
    In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.
  name: service.name
  type: keyword
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  name: source.as.organization.name
  type: keyword
- description: Bytes sent from the source to the destination.
  name: source.bytes
  type: long
- description: Source domain.
  name: source.domain
  type: keyword
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: |-
    MAC address of the source.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: source.mac
  type: keyword
- description: |-
    Translated ip of source based NAT sessions (e.g. internal client to internet)
    Typically connections traversing load balancers, firewalls, or routers.
  name: source.nat.ip
  type: ip
- description: |-
    Translated port of source based NAT sessions. (e.g. internal client to internet)
    Typically used with load balancers, firewalls, or routers.
  name: source.nat.port
  type: long
- description: Port of the source.
  name: source.port
  type: long
- description: |-
    The highest registered source domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: source.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: source.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: source.top_level_domain
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: |-
    Domain of the url, such as "www.elastic.co".
    In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.
  name: url.domain
  type: keyword
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  name: url.original
  type: keyword
- description: Path of the request, such as "/search".
  name: url.path
  type: keyword
- description: |-
    The query field describes the query string of the request, such as "q=elasticsearch".
    The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.
  name: url.query
  type: keyword
- description: |-
    The highest registered url domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: url.registered_domain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: url.top_level_domain
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.domain
  type: keyword
- description: User's full name, if available.
  name: user.full_name
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
- description: Short name or login of the user.
  name: user.name
  type: keyword
- description: Unparsed user_agent string.
  name: user_agent.original
  type: keyword
