paths:
{{#each paths as |path i|}}
  - {{path}}
{{/each}}
exclude_files: [".gz$"]
tags:
{{#each tags as |tag i|}}
 - {{tag}}
{{/each}}
fields_under_root: true
fields:
    observer:
        vendor: "Citrix"
        product: "Netscaler"
        type: "Firewall"
publisher_pipeline.disable_host: true

processors:
- script:
    lang: javascript
    params:
      ecs: true
      rsa: {{rsa_fields}}
      tz_offset: {{tz_offset}}
      keep_raw: {{keep_raw_fields}}
      debug: {{debug}}
    source: |
      // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
      // or more contributor license agreements. Licensed under the Elastic License;
      // you may not use this file except in compliance with the Elastic License.
      
      /* jshint -W014,-W016,-W097,-W116 */
      
      var processor = require("processor");
      var console = require("console");
      
      var FLAG_FIELD = "log.flags";
      var FIELDS_OBJECT = "nwparser";
      var FIELDS_PREFIX = FIELDS_OBJECT + ".";
      
      var defaults = {
          debug: false,
          ecs: true,
          rsa: false,
          keep_raw: false,
          tz_offset: "local",
          strip_priority: true
      };
      
      var saved_flags = null;
      var debug;
      var map_ecs;
      var map_rsa;
      var keep_raw;
      var device;
      var tz_offset;
      var strip_priority;
      
      // Register params from configuration.
      function register(params) {
          debug = params.debug !== undefined ? params.debug : defaults.debug;
          map_ecs = params.ecs !== undefined ? params.ecs : defaults.ecs;
          map_rsa = params.rsa !== undefined ? params.rsa : defaults.rsa;
          keep_raw = params.keep_raw !== undefined ? params.keep_raw : defaults.keep_raw;
          tz_offset = parse_tz_offset(params.tz_offset !== undefined? params.tz_offset : defaults.tz_offset);
          strip_priority = params.strip_priority !== undefined? params.strip_priority : defaults.strip_priority;
          device = new DeviceProcessor();
      }
      
      function parse_tz_offset(offset) {
          var date;
          var m;
          switch(offset) {
              // local uses the tz offset from the JS VM.
              case "local":
                  date = new Date();
                  // Reversing the sign as we the offset from UTC, not to UTC.
                  return parse_local_tz_offset(-date.getTimezoneOffset());
              // event uses the tz offset from event.timezone (add_locale processor).
              case "event":
                  return offset;
              // Otherwise a tz offset in the form "[+-][0-9]{4}" is required.
              default:
                  m = offset.match(/^([+\-])([0-9]{2}):?([0-9]{2})?$/);
                  if (m === null || m.length !== 4) {
                      throw("bad timezone offset: '" + offset + "'. Must have the form +HH:MM");
                  }
                  return m[1] + m[2] + ":" + (m[3]!==undefined? m[3] : "00");
          }
      }
      
      function parse_local_tz_offset(minutes) {
          var neg = minutes < 0;
          minutes = Math.abs(minutes);
          var min = minutes % 60;
          var hours = Math.floor(minutes / 60);
          var pad2digit = function(n) {
              if (n < 10) { return "0" + n;}
              return "" + n;
          };
          return (neg? "-" : "+") + pad2digit(hours) + ":" + pad2digit(min);
      }
      
      function process(evt) {
          // Function register is only called by the processor when `params` are set
          // in the processor config.
          if (device === undefined) {
              register(defaults);
          }
          return device.process(evt);
      }
      
      function processor_chain(subprocessors) {
          var builder = new processor.Chain();
          subprocessors.forEach(builder.Add);
          return builder.Build().Run;
      }
      
      function linear_select(subprocessors) {
          return function (evt) {
              var flags = evt.Get(FLAG_FIELD);
              var i;
              for (i = 0; i < subprocessors.length; i++) {
                  evt.Delete(FLAG_FIELD);
                  if (debug) console.warn("linear_select trying entry " + i);
                  subprocessors[i](evt);
                  // Dissect processor succeeded?
                  if (evt.Get(FLAG_FIELD) == null) break;
                  if (debug) console.warn("linear_select failed entry " + i);
              }
              if (flags !== null) {
                  evt.Put(FLAG_FIELD, flags);
              }
              if (debug) {
                  if (i < subprocessors.length) {
                      console.warn("linear_select matched entry " + i);
                  } else {
                      console.warn("linear_select didn't match");
                  }
              }
          };
      }
      
      function conditional(opt) {
          return function(evt) {
              if (opt.if(evt)) {
                  opt.then(evt);
              } else if (opt.else) {
                  opt.else(evt);
              }
          };
      }
      
      var strip_syslog_priority = (function() {
          var isEnabled = function() { return strip_priority === true; };
          var fetchPRI = field("_pri");
          var fetchPayload = field("payload");
          var removePayload = remove(["payload"]);
          var cleanup = remove(["_pri", "payload"]);
          var onMatch = function(evt) {
              var pri, priStr = fetchPRI(evt);
              if (priStr != null
                  && 0 < priStr.length && priStr.length < 4
                  && !isNaN((pri = Number(priStr)))
                  && 0 <= pri && pri < 192) {
                  var severity = pri & 7,
                      facility = pri >> 3;
                  setc("_severity", "" + severity)(evt);
                  setc("_facility", "" + facility)(evt);
                  // Replace message with priority stripped.
                  evt.Put("message", fetchPayload(evt));
                  removePayload(evt);
              } else {
                  // not a valid syslog PRI, cleanup.
                  cleanup(evt);
              }
          };
          return conditional({
              if: isEnabled,
              then: cleanup_flags(match(
                  "STRIP_PRI",
                  "message",
                  "<%{_pri}>%{payload}",
                  onMatch
              ))
          });
      })();
      
      function match(id, src, pattern, on_success) {
          var dissect = new processor.Dissect({
              field: src,
              tokenizer: pattern,
              target_prefix: FIELDS_OBJECT,
              ignore_failure: true,
              overwrite_keys: true,
              trim_values: "right"
          });
          return function (evt) {
              var msg = evt.Get(src);
              dissect.Run(evt);
              var failed = evt.Get(FLAG_FIELD) != null;
              if (debug) {
                  if (failed) {
                      console.debug("dissect fail: " + id + " field:" + src);
                  } else {
                      console.debug("dissect   OK: " + id + " field:" + src);
                  }
                  console.debug("        expr: <<" + pattern + ">>");
                  console.debug("       input: <<" + msg + ">>");
              }
              if (on_success != null && !failed) {
                  on_success(evt);
              }
          };
      }
      
      function match_copy(id, src, dst, on_success) {
          dst = FIELDS_PREFIX + dst;
          if (dst === FIELDS_PREFIX || dst === src) {
              return function (evt) {
                  if (debug) {
                      console.debug("noop      OK: " + id + " field:" + src);
                      console.debug("       input: <<" + evt.Get(src) + ">>");
                  }
                  if (on_success != null) on_success(evt);
              }
          }
          return function (evt) {
              var msg = evt.Get(src);
              evt.Put(dst, msg);
              if (debug) {
                  console.debug("copy      OK: " + id + " field:" + src);
                  console.debug("      target: '" + dst + "'");
                  console.debug("       input: <<" + msg + ">>");
              }
              if (on_success != null) on_success(evt);
          }
      }
      
      function cleanup_flags(processor) {
          return function(evt) {
              processor(evt);
              evt.Delete(FLAG_FIELD);
          };
      }
      
      function all_match(opts) {
          return function (evt) {
              var i;
              for (i = 0; i < opts.processors.length; i++) {
                  evt.Delete(FLAG_FIELD);
                  opts.processors[i](evt);
                  // Dissect processor succeeded?
                  if (evt.Get(FLAG_FIELD) != null) {
                      if (debug) console.warn("all_match failure at " + i);
                      if (opts.on_failure != null) opts.on_failure(evt);
                      return;
                  }
                  if (debug) console.warn("all_match success at " + i);
              }
              if (opts.on_success != null) opts.on_success(evt);
          };
      }
      
      function msgid_select(mapping) {
          return function (evt) {
              var msgid = evt.Get(FIELDS_PREFIX + "messageid");
              if (msgid == null) {
                  if (debug) console.warn("msgid_select: no messageid captured!");
                  return;
              }
              var next = mapping[msgid];
              if (next === undefined) {
                  if (debug) console.warn("msgid_select: no mapping for messageid:" + msgid);
                  return;
              }
              if (debug) console.info("msgid_select: matched key=" + msgid);
              return next(evt);
          };
      }
      
      function msg(msg_id, match) {
          return function (evt) {
              match(evt);
              if (evt.Get(FLAG_FIELD) == null) {
                  evt.Put(FIELDS_PREFIX + "msg_id1", msg_id);
              }
          };
      }
      
      var start;
      
      function save_flags(evt) {
          saved_flags = evt.Get(FLAG_FIELD);
          evt.Put("event.original", evt.Get("message"));
      }
      
      function restore_flags(evt) {
          if (saved_flags !== null) {
              evt.Put(FLAG_FIELD, saved_flags);
          }
          evt.Delete("message");
      }
      
      function constant(value) {
          return function (evt) {
              return value;
          };
      }
      
      function field(name) {
          var fullname = FIELDS_PREFIX + name;
          return function (evt) {
              return evt.Get(fullname);
          };
      }
      
      function STRCAT(args) {
          var s = "";
          var i;
          for (i = 0; i < args.length; i++) {
              s += args[i];
          }
          return s;
      }
      
      // TODO: Implement
      function DIRCHK(args) {
          unimplemented("DIRCHK");
      }
      
      function strictToInt(str) {
          return str * 1;
      }
      
      function CALC(args) {
          if (args.length !== 3) {
              console.warn("skipped call to CALC with " + args.length + " arguments.");
              return;
          }
          var a = strictToInt(args[0]);
          var b = strictToInt(args[2]);
          if (isNaN(a) || isNaN(b)) {
              console.warn("failed evaluating CALC arguments a='" + args[0] + "' b='" + args[2] + "'.");
              return;
          }
          var result;
          switch (args[1]) {
              case "+":
                  result = a + b;
                  break;
              case "-":
                  result = a - b;
                  break;
              case "*":
                  result = a * b;
                  break;
              default:
                  // Only * and + seen in the parsers.
                  console.warn("unknown CALC operation '" + args[1] + "'.");
                  return;
          }
          // Always return a string
          return result !== undefined ? "" + result : result;
      }
      
      var quoteChars = "\"'`";
      function RMQ(args) {
          if(args.length !== 1) {
              console.warn("RMQ: only one argument expected");
              return;
          }
          var value = args[0].trim();
          var n = value.length;
          var char;
          return n > 1
              && (char=value.charAt(0)) === value.charAt(n-1)
              && quoteChars.indexOf(char) !== -1?
                  value.substr(1, n-2)
                  : value;
      }
      
      function call(opts) {
          var args = new Array(opts.args.length);
          return function (evt) {
              for (var i = 0; i < opts.args.length; i++)
                  if ((args[i] = opts.args[i](evt)) == null) return;
              var result = opts.fn(args);
              if (result != null) {
                  evt.Put(opts.dest, result);
              }
          };
      }
      
      function nop(evt) {
      }
      
      function appendErrorMsg(evt, msg) {
          var value = evt.Get("error.message");
          if (value == null) {
              value = [msg];
          } else if (msg instanceof Array) {
              value.push(msg);
          } else {
              value = [value, msg];
          }
          evt.Put("error.message", value);
      }
      
      function unimplemented(name) {
          appendErrorMsg("unimplemented feature: " + name);
      }
      
      function lookup(opts) {
          return function (evt) {
              var key = opts.key(evt);
              if (key == null) return;
              var value = opts.map.keyvaluepairs[key];
              if (value === undefined) {
                  value = opts.map.default;
              }
              if (value !== undefined) {
                  evt.Put(opts.dest, value(evt));
              }
          };
      }
      
      function set(fields) {
          return new processor.AddFields({
              target: FIELDS_OBJECT,
              fields: fields,
          });
      }
      
      function setf(dst, src) {
          return function (evt) {
              var val = evt.Get(FIELDS_PREFIX + src);
              if (val != null) evt.Put(FIELDS_PREFIX + dst, val);
          };
      }
      
      function setc(dst, value) {
          return function (evt) {
              evt.Put(FIELDS_PREFIX + dst, value);
          };
      }
      
      function set_field(opts) {
          return function (evt) {
              var val = opts.value(evt);
              if (val != null) evt.Put(opts.dest, val);
          };
      }
      
      function dump(label) {
          return function (evt) {
              console.log("Dump of event at " + label + ": " + JSON.stringify(evt, null, "\t"));
          };
      }
      
      function date_time_join_args(evt, arglist) {
          var str = "";
          for (var i = 0; i < arglist.length; i++) {
              var fname = FIELDS_PREFIX + arglist[i];
              var val = evt.Get(fname);
              if (val != null) {
                  if (str !== "") str += " ";
                  str += val;
              } else {
                  if (debug) console.warn("in date_time: input arg " + fname + " is not set");
              }
          }
          return str;
      }
      
      function to2Digit(num) {
          return num? (num < 10? "0" + num : num) : "00";
      }
      
      // Make two-digit dates 00-69 interpreted as 2000-2069
      // and dates 70-99 translated to 1970-1999.
      var twoDigitYearEpoch = 70;
      var twoDigitYearCentury = 2000;
      
      // This is to accept dates up to 2 days in the future, only used when
      // no year is specified in a date. 2 days should be enough to account for
      // time differences between systems and different tz offsets.
      var maxFutureDelta = 2*24*60*60*1000;
      
      // DateContainer stores date fields and then converts those fields into
      // a Date. Necessary because building a Date using its set() methods gives
      // different results depending on the order of components.
      function DateContainer(tzOffset) {
          this.offset = tzOffset === undefined? "Z" : tzOffset;
      }
      
      DateContainer.prototype = {
          setYear: function(v) {this.year = v;},
          setMonth: function(v) {this.month = v;},
          setDay: function(v) {this.day = v;},
          setHours: function(v) {this.hours = v;},
          setMinutes: function(v) {this.minutes = v;},
          setSeconds: function(v) {this.seconds = v;},
      
          setUNIX: function(v) {this.unix = v;},
      
          set2DigitYear: function(v) {
              this.year = v < twoDigitYearEpoch? twoDigitYearCentury + v : twoDigitYearCentury + v - 100;
          },
      
          toDate: function() {
              if (this.unix !== undefined) {
                  return new Date(this.unix * 1000);
              }
              if (this.day === undefined || this.month === undefined) {
                  // Can't make a date from this.
                  return undefined;
              }
              if (this.year === undefined) {
                  // A date without a year. Set current year, or previous year
                  // if date would be in the future.
                  var now = new Date();
                  this.year = now.getFullYear();
                  var date = this.toDate();
                  if (date.getTime() - now.getTime() > maxFutureDelta) {
                      date.setFullYear(now.getFullYear() - 1);
                  }
                  return date;
              }
              var MM = to2Digit(this.month);
              var DD = to2Digit(this.day);
              var hh = to2Digit(this.hours);
              var mm = to2Digit(this.minutes);
              var ss = to2Digit(this.seconds);
              return new Date(this.year + "-" + MM + "-" + DD + "T" + hh + ":" + mm + ":" + ss + this.offset);
          }
      }
      
      function date_time_try_pattern(fmt, str, tzOffset) {
          var date = new DateContainer(tzOffset);
          var pos = date_time_try_pattern_at_pos(fmt, str, 0, date);
          return pos !== undefined? date.toDate() : undefined;
      }
      
      function date_time_try_pattern_at_pos(fmt, str, pos, date) {
          var len = str.length;
          for (var proc = 0; pos !== undefined && pos < len && proc < fmt.length; proc++) {
              pos = fmt[proc](str, pos, date);
          }
          return pos;
      }
      
      function date_time(opts) {
          return function (evt) {
              var tzOffset = opts.tz || tz_offset;
              if (tzOffset === "event") {
                  tzOffset = evt.Get("event.timezone");
              }
              var str = date_time_join_args(evt, opts.args);
              for (var i = 0; i < opts.fmts.length; i++) {
                  var date = date_time_try_pattern(opts.fmts[i], str, tzOffset);
                  if (date !== undefined) {
                      evt.Put(FIELDS_PREFIX + opts.dest, date);
                      return;
                  }
              }
              if (debug) console.warn("in date_time: id=" + opts.id + " FAILED: " + str);
          };
      }
      
      var uA = 60 * 60 * 24;
      var uD = 60 * 60 * 24;
      var uF = 60 * 60;
      var uG = 60 * 60 * 24 * 30;
      var uH = 60 * 60;
      var uI = 60 * 60;
      var uJ = 60 * 60 * 24;
      var uM = 60 * 60 * 24 * 30;
      var uN = 60 * 60;
      var uO = 1;
      var uS = 1;
      var uT = 60;
      var uU = 60;
      var uc = dc;
      
      function duration(opts) {
          return function(evt) {
              var str = date_time_join_args(evt, opts.args);
              for (var i = 0; i < opts.fmts.length; i++) {
                  var seconds = duration_try_pattern(opts.fmts[i], str);
                  if (seconds !== undefined) {
                      evt.Put(FIELDS_PREFIX + opts.dest, seconds);
                      return;
                  }
              }
              if (debug) console.warn("in duration: id=" + opts.id + " (s) FAILED: " + str);
          };
      }
      
      function duration_try_pattern(fmt, str) {
          var secs = 0;
          var pos = 0;
          for (var i=0; i<fmt.length; i++) {
              if (fmt[i] instanceof Function) {
                  if ((pos = fmt[i](str, pos)) === undefined) return;
                  continue;
              }
              var start = skipws(str, pos);
              var end = skipdigits(str, start);
              if (end === start) return;
              var s = str.substr(start, end - start);
              var value = parseInt(s, 10);
              if (isNaN(value)) return;
              secs += value * fmt[i];
              pos = end;
          }
          return secs;
      }
      
      function remove(fields) {
          return function (evt) {
              for (var i = 0; i < fields.length; i++) {
                  evt.Delete(FIELDS_PREFIX + fields[i]);
              }
          };
      }
      
      function dc(ct) {
          var match = function (ct, str, pos) {
              var n = str.length;
              if (n - pos < ct.length) return;
              var part = str.substr(pos, ct.length);
              if (part !== ct) {
                  return;
              }
              return pos + ct.length;
          };
          return function (str, pos, date) {
              var outPos = match(ct, str, pos);
              if (outPos === undefined) {
                  // Try again, trimming leading space at str[pos:] and ct
                  outPos = match(ct.substr(skipws(ct, 0)), str, skipws(str, pos));
              }
              return outPos;
          };
      }
      
      
      var shortMonths = {
          // mon => [ month_id , how many chars to skip if month in long form ]
          "Jan": [0, 4],
          "Feb": [1, 5],
          "Mar": [2, 2],
          "Apr": [3, 2],
          "May": [4, 0],
          "Jun": [5, 1],
          "Jul": [6, 1],
          "Aug": [7, 3],
          "Sep": [8, 6],
          "Oct": [9, 4],
          "Nov": [10, 5],
          "Dec": [11, 4],
          "jan": [0, 4],
          "feb": [1, 5],
          "mar": [2, 2],
          "apr": [3, 2],
          "may": [4, 0],
          "jun": [5, 1],
          "jul": [6, 1],
          "aug": [7, 3],
          "sep": [8, 6],
          "oct": [9, 4],
          "nov": [10, 5],
          "dec": [11, 4],
      };
      
      // var dC = undefined;
      var dR = dateMonthName(true);
      var dB = dateMonthName(false);
      var dM = dateFixedWidthNumber("M", 2, 1, 12, DateContainer.prototype.setMonth);
      var dG = dateVariableWidthNumber("G", 1, 12,  DateContainer.prototype.setMonth);
      var dD = dateFixedWidthNumber("D", 2, 1, 31, DateContainer.prototype.setDay);
      var dF = dateVariableWidthNumber("F", 1, 31, DateContainer.prototype.setDay);
      var dH = dateFixedWidthNumber("H", 2, 0, 24, DateContainer.prototype.setHours);
      var dI = dateVariableWidthNumber("I", 0, 24, DateContainer.prototype.setHours); // Accept hours >12
      var dN = dateVariableWidthNumber("N", 0, 24, DateContainer.prototype.setHours);
      var dT = dateFixedWidthNumber("T", 2, 0, 59, DateContainer.prototype.setMinutes);
      var dU = dateVariableWidthNumber("U", 0, 59, DateContainer.prototype.setMinutes);
      var dP = parseAMPM; // AM|PM
      var dQ = parseAMPM; // A.M.|P.M
      var dS = dateFixedWidthNumber("S", 2, 0, 60, DateContainer.prototype.setSeconds);
      var dO = dateVariableWidthNumber("O", 0, 60, DateContainer.prototype.setSeconds);
      var dY = dateFixedWidthNumber("Y", 2, 0, 99, DateContainer.prototype.set2DigitYear);
      var dW = dateFixedWidthNumber("W", 4, 1000, 9999, DateContainer.prototype.setYear);
      var dZ = parseHMS;
      var dX = dateVariableWidthNumber("X", 0, 0x10000000000, DateContainer.prototype.setUNIX);
      
      // parseAMPM parses "A.M", "AM", "P.M", "PM" from logs.
      // Only works if this modifier appears after the hour has been read from logs
      // which is always the case in the 300 devices.
      function parseAMPM(str, pos, date) {
          var n = str.length;
          var start = skipws(str, pos);
          if (start + 2 > n) return;
          var head = str.substr(start, 2).toUpperCase();
          var isPM = false;
          var skip = false;
          switch (head) {
              case "A.":
                  skip = true;
              /* falls through */
              case "AM":
                  break;
              case "P.":
                  skip = true;
              /* falls through */
              case "PM":
                  isPM = true;
                  break;
              default:
                  if (debug) console.warn("can't parse pos " + start + " as AM/PM: " + str + "(head:" + head + ")");
                  return;
          }
          pos = start + 2;
          if (skip) {
              if (pos+2 > n || str.substr(pos, 2).toUpperCase() !== "M.") {
                  if (debug) console.warn("can't parse pos " + start + " as AM/PM: " + str + "(tail)");
                  return;
              }
              pos += 2;
          }
          var hh = date.hours;
          if (isPM) {
              // Accept existing hour in 24h format.
              if (hh < 12) hh += 12;
          } else {
              if (hh === 12) hh = 0;
          }
          date.setHours(hh);
          return pos;
      }
      
      function parseHMS(str, pos, date) {
          return date_time_try_pattern_at_pos([dN, dc(":"), dU, dc(":"), dO], str, pos, date);
      }
      
      function skipws(str, pos) {
          for ( var n = str.length;
                pos < n && str.charAt(pos) === " ";
                pos++)
              ;
          return pos;
      }
      
      function skipdigits(str, pos) {
          var c;
          for (var n = str.length;
               pos < n && (c = str.charAt(pos)) >= "0" && c <= "9";
               pos++)
              ;
          return pos;
      }
      
      function dSkip(str, pos, date) {
          var chr;
          for (;pos < str.length && (chr=str[pos])<'0' || chr>'9'; pos++) {}
          return pos < str.length? pos : undefined;
      }
      
      function dateVariableWidthNumber(fmtChar, min, max, setter) {
          return function (str, pos, date) {
              var start = skipws(str, pos);
              pos = skipdigits(str, start);
              var s = str.substr(start, pos - start);
              var value = parseInt(s, 10);
              if (value >= min && value <= max) {
                  setter.call(date, value);
                  return pos;
              }
              return;
          };
      }
      
      function dateFixedWidthNumber(fmtChar, width, min, max, setter) {
          return function (str, pos, date) {
              pos = skipws(str, pos);
              var n = str.length;
              if (pos + width > n) return;
              var s = str.substr(pos, width);
              var value = parseInt(s, 10);
              if (value >= min && value <= max) {
                  setter.call(date, value);
                  return pos + width;
              }
              return;
          };
      }
      
      // Short month name (Jan..Dec).
      function dateMonthName(long) {
          return function (str, pos, date) {
              pos = skipws(str, pos);
              var n = str.length;
              if (pos + 3 > n) return;
              var mon = str.substr(pos, 3);
              var idx = shortMonths[mon];
              if (idx === undefined) {
                  idx = shortMonths[mon.toLowerCase()];
              }
              if (idx === undefined) {
                  //console.warn("parsing date_time: '" + mon + "' is not a valid short month (%B)");
                  return;
              }
              date.setMonth(idx[0]+1);
              return pos + 3 + (long ? idx[1] : 0);
          };
      }
      
      function url_wrapper(dst, src, fn) {
          return function(evt) {
              var value = evt.Get(FIELDS_PREFIX + src), result;
              if (value != null && (result = fn(value))!== undefined) {
                  evt.Put(FIELDS_PREFIX + dst, result);
              } else {
                  console.error(fn.name + " failed for '" + value + "'");
              }
          };
      }
      
      // The following regular expression for parsing URLs from:
      // https://github.com/wizard04wsu/URI_Parsing
      //
      // The MIT License (MIT)
      //
      // Copyright (c) 2014 Andrew Harrison
      //
      // Permission is hereby granted, free of charge, to any person obtaining a copy of
      // this software and associated documentation files (the "Software"), to deal in
      // the Software without restriction, including without limitation the rights to
      // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      // the Software, and to permit persons to whom the Software is furnished to do so,
      // subject to the following conditions:
      //
      // The above copyright notice and this permission notice shall be included in all
      // copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      var uriRegExp = /^([a-z][a-z0-9+.\-]*):(?:\/\/((?:(?=((?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\3)@)?(?=(\[[0-9A-F:.]{2,}\]|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\5(?::(?=(\d*))\6)?)(\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/]|%[0-9A-F]{2})*))\8)?|(\/?(?!\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/]|%[0-9A-F]{2})*))\10)?)(?:\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/?]|%[0-9A-F]{2})*))\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/?]|%[0-9A-F]{2})*))\12)?$/i;
      
      var uriScheme = 1;
      var uriDomain = 5;
      var uriPort = 6;
      var uriPath = 7;
      var uriPathAlt = 9;
      var uriQuery = 11;
      
      function domain(dst, src) {
          return url_wrapper(dst, src, extract_domain);
      }
      
      function split_url(value) {
          var m = value.match(uriRegExp);
          if (m && m[uriDomain]) return m;
          // Support input in the form "www.example.net/path", but not "/path".
          m = ("null://" + value).match(uriRegExp);
          if (m) return m;
      }
      
      function extract_domain(value) {
          var m = split_url(value);
          if (m && m[uriDomain]) return m[uriDomain];
      }
      
      var extFromPage = /\.[^.]+$/;
      function extract_ext(value) {
          var page = extract_page(value);
          if (page) {
              var m = page.match(extFromPage);
              if (m) return m[0];
          }
      }
      
      function ext(dst, src) {
          return url_wrapper(dst, src, extract_ext);
      }
      
      function fqdn(dst, src) {
          // TODO: fqdn and domain(eTLD+1) are currently the same.
          return domain(dst, src);
      }
      
      var pageFromPathRegExp = /\/([^\/]+)$/;
      var pageName = 1;
      
      function extract_page(value) {
          value = extract_path(value);
          if (!value) return undefined;
          var m = value.match(pageFromPathRegExp);
          if (m) return m[pageName];
      }
      
      function page(dst, src) {
          return url_wrapper(dst, src, extract_page);
      }
      
      function extract_path(value) {
          var m = split_url(value);
          return m? m[uriPath] || m[uriPathAlt] : undefined;
      }
      
      function path(dst, src) {
          return url_wrapper(dst, src, extract_path);
      }
      
      // Map common schemes to their default port.
      // port has to be a string (will be converted at a later stage).
      var schemePort = {
          "ftp": "21",
          "ssh": "22",
          "http": "80",
          "https": "443",
      };
      
      function extract_port(value) {
          var m = split_url(value);
          if (!m) return undefined;
          if (m[uriPort]) return m[uriPort];
          if (m[uriScheme]) {
              return schemePort[m[uriScheme]];
          }
      }
      
      function port(dst, src) {
          return url_wrapper(dst, src, extract_port);
      }
      
      function extract_query(value) {
          var m = split_url(value);
          if (m && m[uriQuery]) return m[uriQuery];
      }
      
      function query(dst, src) {
          return url_wrapper(dst, src, extract_query);
      }
      
      function extract_root(value) {
          var m = split_url(value);
          if (m && m[uriDomain] && m[uriDomain]) {
              var scheme = m[uriScheme] && m[uriScheme] !== "null"?
                  m[uriScheme] + "://" : "";
              var port = m[uriPort]? ":" + m[uriPort] : "";
              return scheme + m[uriDomain] + port;
          }
      }
      
      function root(dst, src) {
          return url_wrapper(dst, src, extract_root);
      }
      
      function tagval(id, src, cfg, keys, on_success) {
          var fail = function(evt) {
              evt.Put(FLAG_FIELD, "tagval_parsing_error");
          }
          if (cfg.kv_separator.length !== 1) {
              throw("Invalid TAGVALMAP ValueDelimiter (must have 1 character)");
          }
          var quotes_len = cfg.open_quote.length > 0 && cfg.close_quote.length > 0?
              cfg.open_quote.length + cfg.close_quote.length : 0;
          var kv_regex = new RegExp('^*([^' + cfg.kv_separator + ']*)*' + cfg.kv_separator + '*(.*)*$');
          return function(evt) {
              var msg = evt.Get(src);
              if (msg === undefined) {
                  console.warn("tagval: input field is missing");
                  return fail(evt);
              }
              var pairs = msg.split(cfg.pair_separator);
              var i;
              var success = false;
              var prev = "";
              for (i=0; i<pairs.length; i++) {
                  var m = pairs[i].match(kv_regex);
                  var field;
                  if (m === null || m.length !== 3 || m[1] === undefined || m[2] === undefined) {
                      prev += pairs[i] + cfg.pair_separator;
                      continue;
                  }
                  var key = prev + m[1];
                  prev = "";
                  if ( (field=keys[key]) === undefined && (field=keys[key.trim()])===undefined ) {
                      continue;
                  }
                  var value = m[2].trim();
                  if (quotes_len > 0 &&
                      value.length >= cfg.open_quote.length + cfg.close_quote.length &&
                      value.substr(0, cfg.open_quote.length) === cfg.open_quote &&
                      value.substr(value.length - cfg.close_quote.length) === cfg.close_quote) {
                      value = value.substr(cfg.open_quote.length, value.length - quotes_len);
                  }
                  evt.Put(FIELDS_PREFIX + field, value);
                  success = true;
              }
              if (!success) {
                  return fail(evt);
              }
              if (on_success != null) {
                  on_success(evt);
              }
          }
      }
      
      var ecs_mappings = {
          "_facility": {convert: to_long, to:[{field: "log.syslog.facility.code", setter: fld_set}]},
          "_pri": {convert: to_long, to:[{field: "log.syslog.priority", setter: fld_set}]},
          "_severity": {convert: to_long, to:[{field: "log.syslog.severity.code", setter: fld_set}]},
          "action": {to:[{field: "event.action", setter: fld_prio, prio: 0}]},
          "administrator": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 4}]},
          "alias.ip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 3},{field: "related.ip", setter: fld_append}]},
          "alias.ipv6": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 4},{field: "related.ip", setter: fld_append}]},
          "alias.mac": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 1}]},
          "application": {to:[{field: "network.application", setter: fld_set}]},
          "bytes": {convert: to_long, to:[{field: "network.bytes", setter: fld_set}]},
          "c_domain": {to:[{field: "source.domain", setter: fld_prio, prio: 1}]},
          "c_logon_id": {to:[{field: "user.id", setter: fld_prio, prio: 2}]},
          "c_user_name": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 8}]},
          "c_username": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 2}]},
          "cctld": {to:[{field: "url.top_level_domain", setter: fld_prio, prio: 1}]},
          "child_pid": {convert: to_long, to:[{field: "process.pid", setter: fld_prio, prio: 1}]},
          "child_pid_val": {to:[{field: "process.title", setter: fld_set}]},
          "child_process": {to:[{field: "process.name", setter: fld_prio, prio: 1}]},
          "city.dst": {to:[{field: "destination.geo.city_name", setter: fld_set}]},
          "city.src": {to:[{field: "source.geo.city_name", setter: fld_set}]},
          "daddr": {convert: to_ip, to:[{field: "destination.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "daddr_v6": {convert: to_ip, to:[{field: "destination.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "ddomain": {to:[{field: "destination.domain", setter: fld_prio, prio: 0}]},
          "devicehostip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 2},{field: "related.ip", setter: fld_append}]},
          "devicehostmac": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 0}]},
          "dhost": {to:[{field: "destination.address", setter: fld_set}]},
          "dinterface": {to:[{field: "observer.egress.interface.name", setter: fld_set}]},
          "direction": {to:[{field: "network.direction", setter: fld_set}]},
          "directory": {to:[{field: "file.directory", setter: fld_set}]},
          "dmacaddr": {convert: to_mac, to:[{field: "destination.mac", setter: fld_set}]},
          "dns.responsetype": {to:[{field: "dns.answers.type", setter: fld_set}]},
          "dns.resptext": {to:[{field: "dns.answers.name", setter: fld_set}]},
          "dns_querytype": {to:[{field: "dns.question.type", setter: fld_set}]},
          "domain": {to:[{field: "server.domain", setter: fld_prio, prio: 0}]},
          "domain.dst": {to:[{field: "destination.domain", setter: fld_prio, prio: 1}]},
          "domain.src": {to:[{field: "source.domain", setter: fld_prio, prio: 2}]},
          "domain_id": {to:[{field: "user.domain", setter: fld_set}]},
          "domainname": {to:[{field: "server.domain", setter: fld_prio, prio: 1}]},
          "dport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 0}]},
          "dtransaddr": {convert: to_ip, to:[{field: "destination.nat.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "dtransport": {convert: to_long, to:[{field: "destination.nat.port", setter: fld_prio, prio: 0}]},
          "ec_outcome": {to:[{field: "event.outcome", setter: fld_ecs_outcome}]},
          "event_description": {to:[{field: "message", setter: fld_prio, prio: 0}]},
          "event_time": {convert: to_date, to:[{field: "@timestamp", setter: fld_set}]},
          "event_type": {to:[{field: "event.action", setter: fld_prio, prio: 1}]},
          "extension": {to:[{field: "file.extension", setter: fld_prio, prio: 1}]},
          "file.attributes": {to:[{field: "file.attributes", setter: fld_set}]},
          "filename": {to:[{field: "file.name", setter: fld_prio, prio: 0}]},
          "filename_size": {convert: to_long, to:[{field: "file.size", setter: fld_set}]},
          "filepath": {to:[{field: "file.path", setter: fld_set}]},
          "filetype": {to:[{field: "file.type", setter: fld_set}]},
          "group": {to:[{field: "group.name", setter: fld_set}]},
          "groupid": {to:[{field: "group.id", setter: fld_set}]},
          "host": {to:[{field: "host.name", setter: fld_prio, prio: 1}]},
          "hostip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "hostip_v6": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "hostname": {to:[{field: "host.name", setter: fld_prio, prio: 0}]},
          "id": {to:[{field: "event.code", setter: fld_prio, prio: 0}]},
          "interface": {to:[{field: "network.interface.name", setter: fld_set}]},
          "ip.orig": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "ip.trans.dst": {convert: to_ip, to:[{field: "destination.nat.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "ip.trans.src": {convert: to_ip, to:[{field: "source.nat.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "ipv6.orig": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 2},{field: "related.ip", setter: fld_append}]},
          "latdec_dst": {convert: to_double, to:[{field: "destination.geo.location.lat", setter: fld_set}]},
          "latdec_src": {convert: to_double, to:[{field: "source.geo.location.lat", setter: fld_set}]},
          "location_city": {to:[{field: "geo.city_name", setter: fld_set}]},
          "location_country": {to:[{field: "geo.country_name", setter: fld_set}]},
          "location_desc": {to:[{field: "geo.name", setter: fld_set}]},
          "location_dst": {to:[{field: "destination.geo.country_name", setter: fld_set}]},
          "location_src": {to:[{field: "source.geo.country_name", setter: fld_set}]},
          "location_state": {to:[{field: "geo.region_name", setter: fld_set}]},
          "logon_id": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 5}]},
          "longdec_dst": {convert: to_double, to:[{field: "destination.geo.location.lon", setter: fld_set}]},
          "longdec_src": {convert: to_double, to:[{field: "source.geo.location.lon", setter: fld_set}]},
          "macaddr": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 2}]},
          "messageid": {to:[{field: "event.code", setter: fld_prio, prio: 1}]},
          "method": {to:[{field: "http.request.method", setter: fld_set}]},
          "msg": {to:[{field: "log.original", setter: fld_set}]},
          "orig_ip": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "owner": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 6}]},
          "packets": {convert: to_long, to:[{field: "network.packets", setter: fld_set}]},
          "parent_pid": {convert: to_long, to:[{field: "process.ppid", setter: fld_prio, prio: 0}]},
          "parent_pid_val": {to:[{field: "process.parent.title", setter: fld_set}]},
          "parent_process": {to:[{field: "process.parent.name", setter: fld_prio, prio: 0}]},
          "patient_fullname": {to:[{field: "user.full_name", setter: fld_prio, prio: 1}]},
          "port.dst": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 1}]},
          "port.src": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 1}]},
          "port.trans.dst": {convert: to_long, to:[{field: "destination.nat.port", setter: fld_prio, prio: 1}]},
          "port.trans.src": {convert: to_long, to:[{field: "source.nat.port", setter: fld_prio, prio: 1}]},
          "process": {to:[{field: "process.name", setter: fld_prio, prio: 0}]},
          "process_id": {convert: to_long, to:[{field: "process.pid", setter: fld_prio, prio: 0}]},
          "process_id_src": {convert: to_long, to:[{field: "process.ppid", setter: fld_prio, prio: 1}]},
          "process_src": {to:[{field: "process.parent.name", setter: fld_prio, prio: 1}]},
          "product": {to:[{field: "observer.product", setter: fld_set}]},
          "protocol": {to:[{field: "network.protocol", setter: fld_set}]},
          "query": {to:[{field: "url.query", setter: fld_prio, prio: 2}]},
          "rbytes": {convert: to_long, to:[{field: "destination.bytes", setter: fld_set}]},
          "referer": {to:[{field: "http.request.referrer", setter: fld_prio, prio: 1}]},
          "rulename": {to:[{field: "rule.name", setter: fld_set}]},
          "saddr": {convert: to_ip, to:[{field: "source.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "saddr_v6": {convert: to_ip, to:[{field: "source.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "sbytes": {convert: to_long, to:[{field: "source.bytes", setter: fld_set}]},
          "sdomain": {to:[{field: "source.domain", setter: fld_prio, prio: 0}]},
          "service": {to:[{field: "service.name", setter: fld_prio, prio: 1}]},
          "service.name": {to:[{field: "service.name", setter: fld_prio, prio: 0}]},
          "service_account": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 7}]},
          "severity": {to:[{field: "log.level", setter: fld_set}]},
          "shost": {to:[{field: "host.hostname", setter: fld_set},{field: "source.address", setter: fld_set}]},
          "sinterface": {to:[{field: "observer.ingress.interface.name", setter: fld_set}]},
          "sld": {to:[{field: "url.registered_domain", setter: fld_set}]},
          "smacaddr": {convert: to_mac, to:[{field: "source.mac", setter: fld_set}]},
          "sport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 0}]},
          "stransaddr": {convert: to_ip, to:[{field: "source.nat.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "stransport": {convert: to_long, to:[{field: "source.nat.port", setter: fld_prio, prio: 0}]},
          "tcp.dstport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 2}]},
          "tcp.srcport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 2}]},
          "timezone": {to:[{field: "event.timezone", setter: fld_set}]},
          "tld": {to:[{field: "url.top_level_domain", setter: fld_prio, prio: 0}]},
          "udp.dstport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 3}]},
          "udp.srcport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 3}]},
          "uid": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 3}]},
          "url": {to:[{field: "url.original", setter: fld_prio, prio: 1}]},
          "url_raw": {to:[{field: "url.original", setter: fld_prio, prio: 0}]},
          "urldomain": {to:[{field: "url.domain", setter: fld_prio, prio: 0}]},
          "urlquery": {to:[{field: "url.query", setter: fld_prio, prio: 0}]},
          "user": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 0}]},
          "user.id": {to:[{field: "user.id", setter: fld_prio, prio: 1}]},
          "user_agent": {to:[{field: "user_agent.original", setter: fld_set}]},
          "user_fullname": {to:[{field: "user.full_name", setter: fld_prio, prio: 0}]},
          "user_id": {to:[{field: "user.id", setter: fld_prio, prio: 0}]},
          "username": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 1}]},
          "version": {to:[{field: "observer.version", setter: fld_set}]},
          "web_domain": {to:[{field: "url.domain", setter: fld_prio, prio: 1}]},
          "web_extension": {to:[{field: "file.extension", setter: fld_prio, prio: 0}]},
          "web_query": {to:[{field: "url.query", setter: fld_prio, prio: 1}]},
          "web_referer": {to:[{field: "http.request.referrer", setter: fld_prio, prio: 0}]},
          "web_root": {to:[{field: "url.path", setter: fld_set}]},
          "webpage": {to:[{field: "file.name", setter: fld_prio, prio: 1}]},
      };
      
      var rsa_mappings = {
          "access_point": {to:[{field: "rsa.wireless.access_point", setter: fld_set}]},
          "accesses": {to:[{field: "rsa.identity.accesses", setter: fld_set}]},
          "acl_id": {to:[{field: "rsa.misc.acl_id", setter: fld_set}]},
          "acl_op": {to:[{field: "rsa.misc.acl_op", setter: fld_set}]},
          "acl_pos": {to:[{field: "rsa.misc.acl_pos", setter: fld_set}]},
          "acl_table": {to:[{field: "rsa.misc.acl_table", setter: fld_set}]},
          "action": {to:[{field: "rsa.misc.action", setter: fld_append}]},
          "ad_computer_dst": {to:[{field: "rsa.network.ad_computer_dst", setter: fld_set}]},
          "addr": {to:[{field: "rsa.network.addr", setter: fld_set}]},
          "admin": {to:[{field: "rsa.misc.admin", setter: fld_set}]},
          "agent": {to:[{field: "rsa.misc.client", setter: fld_prio, prio: 0}]},
          "agent.id": {to:[{field: "rsa.misc.agent_id", setter: fld_set}]},
          "alarm_id": {to:[{field: "rsa.misc.alarm_id", setter: fld_set}]},
          "alarmname": {to:[{field: "rsa.misc.alarmname", setter: fld_set}]},
          "alert": {to:[{field: "rsa.threat.alert", setter: fld_set}]},
          "alert_id": {to:[{field: "rsa.misc.alert_id", setter: fld_set}]},
          "alias.host": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "analysis.file": {to:[{field: "rsa.investigations.analysis_file", setter: fld_set}]},
          "analysis.service": {to:[{field: "rsa.investigations.analysis_service", setter: fld_set}]},
          "analysis.session": {to:[{field: "rsa.investigations.analysis_session", setter: fld_set}]},
          "app_id": {to:[{field: "rsa.misc.app_id", setter: fld_set}]},
          "attachment": {to:[{field: "rsa.file.attachment", setter: fld_set}]},
          "audit": {to:[{field: "rsa.misc.audit", setter: fld_set}]},
          "audit_class": {to:[{field: "rsa.internal.audit_class", setter: fld_set}]},
          "audit_object": {to:[{field: "rsa.misc.audit_object", setter: fld_set}]},
          "auditdata": {to:[{field: "rsa.misc.auditdata", setter: fld_set}]},
          "authmethod": {to:[{field: "rsa.identity.auth_method", setter: fld_set}]},
          "autorun_type": {to:[{field: "rsa.misc.autorun_type", setter: fld_set}]},
          "bcc": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "benchmark": {to:[{field: "rsa.misc.benchmark", setter: fld_set}]},
          "binary": {to:[{field: "rsa.file.binary", setter: fld_set}]},
          "boc": {to:[{field: "rsa.investigations.boc", setter: fld_set}]},
          "bssid": {to:[{field: "rsa.wireless.wlan_ssid", setter: fld_prio, prio: 1}]},
          "bypass": {to:[{field: "rsa.misc.bypass", setter: fld_set}]},
          "c_sid": {to:[{field: "rsa.identity.user_sid_src", setter: fld_set}]},
          "cache": {to:[{field: "rsa.misc.cache", setter: fld_set}]},
          "cache_hit": {to:[{field: "rsa.misc.cache_hit", setter: fld_set}]},
          "calling_from": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 1}]},
          "calling_to": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 0}]},
          "category": {to:[{field: "rsa.misc.category", setter: fld_set}]},
          "cc": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "cc.number": {convert: to_long, to:[{field: "rsa.misc.cc_number", setter: fld_set}]},
          "cefversion": {to:[{field: "rsa.misc.cefversion", setter: fld_set}]},
          "cert.serial": {to:[{field: "rsa.crypto.cert_serial", setter: fld_set}]},
          "cert_ca": {to:[{field: "rsa.crypto.cert_ca", setter: fld_set}]},
          "cert_checksum": {to:[{field: "rsa.crypto.cert_checksum", setter: fld_set}]},
          "cert_common": {to:[{field: "rsa.crypto.cert_common", setter: fld_set}]},
          "cert_error": {to:[{field: "rsa.crypto.cert_error", setter: fld_set}]},
          "cert_hostname": {to:[{field: "rsa.crypto.cert_host_name", setter: fld_set}]},
          "cert_hostname_cat": {to:[{field: "rsa.crypto.cert_host_cat", setter: fld_set}]},
          "cert_issuer": {to:[{field: "rsa.crypto.cert_issuer", setter: fld_set}]},
          "cert_keysize": {to:[{field: "rsa.crypto.cert_keysize", setter: fld_set}]},
          "cert_status": {to:[{field: "rsa.crypto.cert_status", setter: fld_set}]},
          "cert_subject": {to:[{field: "rsa.crypto.cert_subject", setter: fld_set}]},
          "cert_username": {to:[{field: "rsa.crypto.cert_username", setter: fld_set}]},
          "cfg.attr": {to:[{field: "rsa.misc.cfg_attr", setter: fld_set}]},
          "cfg.obj": {to:[{field: "rsa.misc.cfg_obj", setter: fld_set}]},
          "cfg.path": {to:[{field: "rsa.misc.cfg_path", setter: fld_set}]},
          "change_attribute": {to:[{field: "rsa.misc.change_attrib", setter: fld_set}]},
          "change_new": {to:[{field: "rsa.misc.change_new", setter: fld_set}]},
          "change_old": {to:[{field: "rsa.misc.change_old", setter: fld_set}]},
          "changes": {to:[{field: "rsa.misc.changes", setter: fld_set}]},
          "checksum": {to:[{field: "rsa.misc.checksum", setter: fld_set}]},
          "checksum.dst": {to:[{field: "rsa.misc.checksum_dst", setter: fld_set}]},
          "checksum.src": {to:[{field: "rsa.misc.checksum_src", setter: fld_set}]},
          "cid": {to:[{field: "rsa.internal.cid", setter: fld_set}]},
          "client": {to:[{field: "rsa.misc.client", setter: fld_prio, prio: 1}]},
          "client_ip": {to:[{field: "rsa.misc.client_ip", setter: fld_set}]},
          "clustermembers": {to:[{field: "rsa.misc.clustermembers", setter: fld_set}]},
          "cmd": {to:[{field: "rsa.misc.cmd", setter: fld_set}]},
          "cn_acttimeout": {to:[{field: "rsa.misc.cn_acttimeout", setter: fld_set}]},
          "cn_asn_dst": {to:[{field: "rsa.web.cn_asn_dst", setter: fld_set}]},
          "cn_asn_src": {to:[{field: "rsa.misc.cn_asn_src", setter: fld_set}]},
          "cn_bgpv4nxthop": {to:[{field: "rsa.misc.cn_bgpv4nxthop", setter: fld_set}]},
          "cn_ctr_dst_code": {to:[{field: "rsa.misc.cn_ctr_dst_code", setter: fld_set}]},
          "cn_dst_tos": {to:[{field: "rsa.misc.cn_dst_tos", setter: fld_set}]},
          "cn_dst_vlan": {to:[{field: "rsa.misc.cn_dst_vlan", setter: fld_set}]},
          "cn_engine_id": {to:[{field: "rsa.misc.cn_engine_id", setter: fld_set}]},
          "cn_engine_type": {to:[{field: "rsa.misc.cn_engine_type", setter: fld_set}]},
          "cn_f_switch": {to:[{field: "rsa.misc.cn_f_switch", setter: fld_set}]},
          "cn_flowsampid": {to:[{field: "rsa.misc.cn_flowsampid", setter: fld_set}]},
          "cn_flowsampintv": {to:[{field: "rsa.misc.cn_flowsampintv", setter: fld_set}]},
          "cn_flowsampmode": {to:[{field: "rsa.misc.cn_flowsampmode", setter: fld_set}]},
          "cn_inacttimeout": {to:[{field: "rsa.misc.cn_inacttimeout", setter: fld_set}]},
          "cn_inpermbyts": {to:[{field: "rsa.misc.cn_inpermbyts", setter: fld_set}]},
          "cn_inpermpckts": {to:[{field: "rsa.misc.cn_inpermpckts", setter: fld_set}]},
          "cn_invalid": {to:[{field: "rsa.misc.cn_invalid", setter: fld_set}]},
          "cn_ip_proto_ver": {to:[{field: "rsa.misc.cn_ip_proto_ver", setter: fld_set}]},
          "cn_ipv4_ident": {to:[{field: "rsa.misc.cn_ipv4_ident", setter: fld_set}]},
          "cn_l_switch": {to:[{field: "rsa.misc.cn_l_switch", setter: fld_set}]},
          "cn_log_did": {to:[{field: "rsa.misc.cn_log_did", setter: fld_set}]},
          "cn_log_rid": {to:[{field: "rsa.misc.cn_log_rid", setter: fld_set}]},
          "cn_max_ttl": {to:[{field: "rsa.misc.cn_max_ttl", setter: fld_set}]},
          "cn_maxpcktlen": {to:[{field: "rsa.misc.cn_maxpcktlen", setter: fld_set}]},
          "cn_min_ttl": {to:[{field: "rsa.misc.cn_min_ttl", setter: fld_set}]},
          "cn_minpcktlen": {to:[{field: "rsa.misc.cn_minpcktlen", setter: fld_set}]},
          "cn_mpls_lbl_1": {to:[{field: "rsa.misc.cn_mpls_lbl_1", setter: fld_set}]},
          "cn_mpls_lbl_10": {to:[{field: "rsa.misc.cn_mpls_lbl_10", setter: fld_set}]},
          "cn_mpls_lbl_2": {to:[{field: "rsa.misc.cn_mpls_lbl_2", setter: fld_set}]},
          "cn_mpls_lbl_3": {to:[{field: "rsa.misc.cn_mpls_lbl_3", setter: fld_set}]},
          "cn_mpls_lbl_4": {to:[{field: "rsa.misc.cn_mpls_lbl_4", setter: fld_set}]},
          "cn_mpls_lbl_5": {to:[{field: "rsa.misc.cn_mpls_lbl_5", setter: fld_set}]},
          "cn_mpls_lbl_6": {to:[{field: "rsa.misc.cn_mpls_lbl_6", setter: fld_set}]},
          "cn_mpls_lbl_7": {to:[{field: "rsa.misc.cn_mpls_lbl_7", setter: fld_set}]},
          "cn_mpls_lbl_8": {to:[{field: "rsa.misc.cn_mpls_lbl_8", setter: fld_set}]},
          "cn_mpls_lbl_9": {to:[{field: "rsa.misc.cn_mpls_lbl_9", setter: fld_set}]},
          "cn_mplstoplabel": {to:[{field: "rsa.misc.cn_mplstoplabel", setter: fld_set}]},
          "cn_mplstoplabip": {to:[{field: "rsa.misc.cn_mplstoplabip", setter: fld_set}]},
          "cn_mul_dst_byt": {to:[{field: "rsa.misc.cn_mul_dst_byt", setter: fld_set}]},
          "cn_mul_dst_pks": {to:[{field: "rsa.misc.cn_mul_dst_pks", setter: fld_set}]},
          "cn_muligmptype": {to:[{field: "rsa.misc.cn_muligmptype", setter: fld_set}]},
          "cn_rpackets": {to:[{field: "rsa.web.cn_rpackets", setter: fld_set}]},
          "cn_sampalgo": {to:[{field: "rsa.misc.cn_sampalgo", setter: fld_set}]},
          "cn_sampint": {to:[{field: "rsa.misc.cn_sampint", setter: fld_set}]},
          "cn_seqctr": {to:[{field: "rsa.misc.cn_seqctr", setter: fld_set}]},
          "cn_spackets": {to:[{field: "rsa.misc.cn_spackets", setter: fld_set}]},
          "cn_src_tos": {to:[{field: "rsa.misc.cn_src_tos", setter: fld_set}]},
          "cn_src_vlan": {to:[{field: "rsa.misc.cn_src_vlan", setter: fld_set}]},
          "cn_sysuptime": {to:[{field: "rsa.misc.cn_sysuptime", setter: fld_set}]},
          "cn_template_id": {to:[{field: "rsa.misc.cn_template_id", setter: fld_set}]},
          "cn_totbytsexp": {to:[{field: "rsa.misc.cn_totbytsexp", setter: fld_set}]},
          "cn_totflowexp": {to:[{field: "rsa.misc.cn_totflowexp", setter: fld_set}]},
          "cn_totpcktsexp": {to:[{field: "rsa.misc.cn_totpcktsexp", setter: fld_set}]},
          "cn_unixnanosecs": {to:[{field: "rsa.misc.cn_unixnanosecs", setter: fld_set}]},
          "cn_v6flowlabel": {to:[{field: "rsa.misc.cn_v6flowlabel", setter: fld_set}]},
          "cn_v6optheaders": {to:[{field: "rsa.misc.cn_v6optheaders", setter: fld_set}]},
          "code": {to:[{field: "rsa.misc.code", setter: fld_set}]},
          "command": {to:[{field: "rsa.misc.command", setter: fld_set}]},
          "comments": {to:[{field: "rsa.misc.comments", setter: fld_set}]},
          "comp_class": {to:[{field: "rsa.misc.comp_class", setter: fld_set}]},
          "comp_name": {to:[{field: "rsa.misc.comp_name", setter: fld_set}]},
          "comp_rbytes": {to:[{field: "rsa.misc.comp_rbytes", setter: fld_set}]},
          "comp_sbytes": {to:[{field: "rsa.misc.comp_sbytes", setter: fld_set}]},
          "component_version": {to:[{field: "rsa.misc.comp_version", setter: fld_set}]},
          "connection_id": {to:[{field: "rsa.misc.connection_id", setter: fld_prio, prio: 1}]},
          "connectionid": {to:[{field: "rsa.misc.connection_id", setter: fld_prio, prio: 0}]},
          "content": {to:[{field: "rsa.misc.content", setter: fld_set}]},
          "content_type": {to:[{field: "rsa.misc.content_type", setter: fld_set}]},
          "content_version": {to:[{field: "rsa.misc.content_version", setter: fld_set}]},
          "context": {to:[{field: "rsa.misc.context", setter: fld_set}]},
          "count": {to:[{field: "rsa.misc.count", setter: fld_set}]},
          "cpu": {convert: to_long, to:[{field: "rsa.misc.cpu", setter: fld_set}]},
          "cpu_data": {to:[{field: "rsa.misc.cpu_data", setter: fld_set}]},
          "criticality": {to:[{field: "rsa.misc.criticality", setter: fld_set}]},
          "cs_agency_dst": {to:[{field: "rsa.misc.cs_agency_dst", setter: fld_set}]},
          "cs_analyzedby": {to:[{field: "rsa.misc.cs_analyzedby", setter: fld_set}]},
          "cs_av_other": {to:[{field: "rsa.misc.cs_av_other", setter: fld_set}]},
          "cs_av_primary": {to:[{field: "rsa.misc.cs_av_primary", setter: fld_set}]},
          "cs_av_secondary": {to:[{field: "rsa.misc.cs_av_secondary", setter: fld_set}]},
          "cs_bgpv6nxthop": {to:[{field: "rsa.misc.cs_bgpv6nxthop", setter: fld_set}]},
          "cs_bit9status": {to:[{field: "rsa.misc.cs_bit9status", setter: fld_set}]},
          "cs_context": {to:[{field: "rsa.misc.cs_context", setter: fld_set}]},
          "cs_control": {to:[{field: "rsa.misc.cs_control", setter: fld_set}]},
          "cs_data": {to:[{field: "rsa.misc.cs_data", setter: fld_set}]},
          "cs_datecret": {to:[{field: "rsa.misc.cs_datecret", setter: fld_set}]},
          "cs_dst_tld": {to:[{field: "rsa.misc.cs_dst_tld", setter: fld_set}]},
          "cs_eth_dst_ven": {to:[{field: "rsa.misc.cs_eth_dst_ven", setter: fld_set}]},
          "cs_eth_src_ven": {to:[{field: "rsa.misc.cs_eth_src_ven", setter: fld_set}]},
          "cs_event_uuid": {to:[{field: "rsa.misc.cs_event_uuid", setter: fld_set}]},
          "cs_filetype": {to:[{field: "rsa.misc.cs_filetype", setter: fld_set}]},
          "cs_fld": {to:[{field: "rsa.misc.cs_fld", setter: fld_set}]},
          "cs_if_desc": {to:[{field: "rsa.misc.cs_if_desc", setter: fld_set}]},
          "cs_if_name": {to:[{field: "rsa.misc.cs_if_name", setter: fld_set}]},
          "cs_ip_next_hop": {to:[{field: "rsa.misc.cs_ip_next_hop", setter: fld_set}]},
          "cs_ipv4dstpre": {to:[{field: "rsa.misc.cs_ipv4dstpre", setter: fld_set}]},
          "cs_ipv4srcpre": {to:[{field: "rsa.misc.cs_ipv4srcpre", setter: fld_set}]},
          "cs_lifetime": {to:[{field: "rsa.misc.cs_lifetime", setter: fld_set}]},
          "cs_log_medium": {to:[{field: "rsa.misc.cs_log_medium", setter: fld_set}]},
          "cs_loginname": {to:[{field: "rsa.misc.cs_loginname", setter: fld_set}]},
          "cs_modulescore": {to:[{field: "rsa.misc.cs_modulescore", setter: fld_set}]},
          "cs_modulesign": {to:[{field: "rsa.misc.cs_modulesign", setter: fld_set}]},
          "cs_opswatresult": {to:[{field: "rsa.misc.cs_opswatresult", setter: fld_set}]},
          "cs_payload": {to:[{field: "rsa.misc.cs_payload", setter: fld_set}]},
          "cs_registrant": {to:[{field: "rsa.misc.cs_registrant", setter: fld_set}]},
          "cs_registrar": {to:[{field: "rsa.misc.cs_registrar", setter: fld_set}]},
          "cs_represult": {to:[{field: "rsa.misc.cs_represult", setter: fld_set}]},
          "cs_rpayload": {to:[{field: "rsa.misc.cs_rpayload", setter: fld_set}]},
          "cs_sampler_name": {to:[{field: "rsa.misc.cs_sampler_name", setter: fld_set}]},
          "cs_sourcemodule": {to:[{field: "rsa.misc.cs_sourcemodule", setter: fld_set}]},
          "cs_streams": {to:[{field: "rsa.misc.cs_streams", setter: fld_set}]},
          "cs_targetmodule": {to:[{field: "rsa.misc.cs_targetmodule", setter: fld_set}]},
          "cs_v6nxthop": {to:[{field: "rsa.misc.cs_v6nxthop", setter: fld_set}]},
          "cs_whois_server": {to:[{field: "rsa.misc.cs_whois_server", setter: fld_set}]},
          "cs_yararesult": {to:[{field: "rsa.misc.cs_yararesult", setter: fld_set}]},
          "cve": {to:[{field: "rsa.misc.cve", setter: fld_set}]},
          "d_certauth": {to:[{field: "rsa.crypto.d_certauth", setter: fld_set}]},
          "d_cipher": {to:[{field: "rsa.crypto.cipher_dst", setter: fld_set}]},
          "d_ciphersize": {convert: to_long, to:[{field: "rsa.crypto.cipher_size_dst", setter: fld_set}]},
          "d_sslver": {to:[{field: "rsa.crypto.ssl_ver_dst", setter: fld_set}]},
          "data": {to:[{field: "rsa.internal.data", setter: fld_set}]},
          "data_type": {to:[{field: "rsa.misc.data_type", setter: fld_set}]},
          "date": {to:[{field: "rsa.time.date", setter: fld_set}]},
          "datetime": {to:[{field: "rsa.time.datetime", setter: fld_set}]},
          "day": {to:[{field: "rsa.time.day", setter: fld_set}]},
          "db_id": {to:[{field: "rsa.db.db_id", setter: fld_set}]},
          "db_name": {to:[{field: "rsa.db.database", setter: fld_set}]},
          "db_pid": {convert: to_long, to:[{field: "rsa.db.db_pid", setter: fld_set}]},
          "dclass_counter1": {convert: to_long, to:[{field: "rsa.counters.dclass_c1", setter: fld_set}]},
          "dclass_counter1_string": {to:[{field: "rsa.counters.dclass_c1_str", setter: fld_set}]},
          "dclass_counter2": {convert: to_long, to:[{field: "rsa.counters.dclass_c2", setter: fld_set}]},
          "dclass_counter2_string": {to:[{field: "rsa.counters.dclass_c2_str", setter: fld_set}]},
          "dclass_counter3": {convert: to_long, to:[{field: "rsa.counters.dclass_c3", setter: fld_set}]},
          "dclass_counter3_string": {to:[{field: "rsa.counters.dclass_c3_str", setter: fld_set}]},
          "dclass_ratio1": {to:[{field: "rsa.counters.dclass_r1", setter: fld_set}]},
          "dclass_ratio1_string": {to:[{field: "rsa.counters.dclass_r1_str", setter: fld_set}]},
          "dclass_ratio2": {to:[{field: "rsa.counters.dclass_r2", setter: fld_set}]},
          "dclass_ratio2_string": {to:[{field: "rsa.counters.dclass_r2_str", setter: fld_set}]},
          "dclass_ratio3": {to:[{field: "rsa.counters.dclass_r3", setter: fld_set}]},
          "dclass_ratio3_string": {to:[{field: "rsa.counters.dclass_r3_str", setter: fld_set}]},
          "dead": {convert: to_long, to:[{field: "rsa.internal.dead", setter: fld_set}]},
          "description": {to:[{field: "rsa.misc.description", setter: fld_set}]},
          "detail": {to:[{field: "rsa.misc.event_desc", setter: fld_set}]},
          "device": {to:[{field: "rsa.misc.device_name", setter: fld_set}]},
          "device.class": {to:[{field: "rsa.internal.device_class", setter: fld_set}]},
          "device.group": {to:[{field: "rsa.internal.device_group", setter: fld_set}]},
          "device.host": {to:[{field: "rsa.internal.device_host", setter: fld_set}]},
          "device.ip": {convert: to_ip, to:[{field: "rsa.internal.device_ip", setter: fld_set}]},
          "device.ipv6": {convert: to_ip, to:[{field: "rsa.internal.device_ipv6", setter: fld_set}]},
          "device.type": {to:[{field: "rsa.internal.device_type", setter: fld_set}]},
          "device.type.id": {convert: to_long, to:[{field: "rsa.internal.device_type_id", setter: fld_set}]},
          "devicehostname": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "devvendor": {to:[{field: "rsa.misc.devvendor", setter: fld_set}]},
          "dhost": {to:[{field: "rsa.network.host_dst", setter: fld_set}]},
          "did": {to:[{field: "rsa.internal.did", setter: fld_set}]},
          "dinterface": {to:[{field: "rsa.network.dinterface", setter: fld_set}]},
          "directory.dst": {to:[{field: "rsa.file.directory_dst", setter: fld_set}]},
          "directory.src": {to:[{field: "rsa.file.directory_src", setter: fld_set}]},
          "disk_volume": {to:[{field: "rsa.storage.disk_volume", setter: fld_set}]},
          "disposition": {to:[{field: "rsa.misc.disposition", setter: fld_set}]},
          "distance": {to:[{field: "rsa.misc.distance", setter: fld_set}]},
          "dmask": {to:[{field: "rsa.network.dmask", setter: fld_set}]},
          "dn": {to:[{field: "rsa.identity.dn", setter: fld_set}]},
          "dns_a_record": {to:[{field: "rsa.network.dns_a_record", setter: fld_set}]},
          "dns_cname_record": {to:[{field: "rsa.network.dns_cname_record", setter: fld_set}]},
          "dns_id": {to:[{field: "rsa.network.dns_id", setter: fld_set}]},
          "dns_opcode": {to:[{field: "rsa.network.dns_opcode", setter: fld_set}]},
          "dns_ptr_record": {to:[{field: "rsa.network.dns_ptr_record", setter: fld_set}]},
          "dns_resp": {to:[{field: "rsa.network.dns_resp", setter: fld_set}]},
          "dns_type": {to:[{field: "rsa.network.dns_type", setter: fld_set}]},
          "doc_number": {convert: to_long, to:[{field: "rsa.misc.doc_number", setter: fld_set}]},
          "domain": {to:[{field: "rsa.network.domain", setter: fld_set}]},
          "domain1": {to:[{field: "rsa.network.domain1", setter: fld_set}]},
          "dst_dn": {to:[{field: "rsa.identity.dn_dst", setter: fld_set}]},
          "dst_payload": {to:[{field: "rsa.misc.payload_dst", setter: fld_set}]},
          "dst_spi": {to:[{field: "rsa.misc.spi_dst", setter: fld_set}]},
          "dst_zone": {to:[{field: "rsa.network.zone_dst", setter: fld_set}]},
          "dstburb": {to:[{field: "rsa.misc.dstburb", setter: fld_set}]},
          "duration": {convert: to_double, to:[{field: "rsa.time.duration_time", setter: fld_set}]},
          "duration_string": {to:[{field: "rsa.time.duration_str", setter: fld_set}]},
          "ec_activity": {to:[{field: "rsa.investigations.ec_activity", setter: fld_set}]},
          "ec_outcome": {to:[{field: "rsa.investigations.ec_outcome", setter: fld_set}]},
          "ec_subject": {to:[{field: "rsa.investigations.ec_subject", setter: fld_set}]},
          "ec_theme": {to:[{field: "rsa.investigations.ec_theme", setter: fld_set}]},
          "edomain": {to:[{field: "rsa.misc.edomain", setter: fld_set}]},
          "edomaub": {to:[{field: "rsa.misc.edomaub", setter: fld_set}]},
          "effective_time": {convert: to_date, to:[{field: "rsa.time.effective_time", setter: fld_set}]},
          "ein.number": {convert: to_long, to:[{field: "rsa.misc.ein_number", setter: fld_set}]},
          "email": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "encryption_type": {to:[{field: "rsa.crypto.crypto", setter: fld_set}]},
          "endtime": {convert: to_date, to:[{field: "rsa.time.endtime", setter: fld_set}]},
          "entropy.req": {convert: to_long, to:[{field: "rsa.internal.entropy_req", setter: fld_set}]},
          "entropy.res": {convert: to_long, to:[{field: "rsa.internal.entropy_res", setter: fld_set}]},
          "entry": {to:[{field: "rsa.internal.entry", setter: fld_set}]},
          "eoc": {to:[{field: "rsa.investigations.eoc", setter: fld_set}]},
          "error": {to:[{field: "rsa.misc.error", setter: fld_set}]},
          "eth_type": {convert: to_long, to:[{field: "rsa.network.eth_type", setter: fld_set}]},
          "euid": {to:[{field: "rsa.misc.euid", setter: fld_set}]},
          "event.cat": {convert: to_long, to:[{field: "rsa.investigations.event_cat", setter: fld_prio, prio: 1}]},
          "event.cat.name": {to:[{field: "rsa.investigations.event_cat_name", setter: fld_prio, prio: 1}]},
          "event_cat": {convert: to_long, to:[{field: "rsa.investigations.event_cat", setter: fld_prio, prio: 0}]},
          "event_cat_name": {to:[{field: "rsa.investigations.event_cat_name", setter: fld_prio, prio: 0}]},
          "event_category": {to:[{field: "rsa.misc.event_category", setter: fld_set}]},
          "event_computer": {to:[{field: "rsa.misc.event_computer", setter: fld_set}]},
          "event_counter": {convert: to_long, to:[{field: "rsa.counters.event_counter", setter: fld_set}]},
          "event_description": {to:[{field: "rsa.internal.event_desc", setter: fld_set}]},
          "event_id": {to:[{field: "rsa.misc.event_id", setter: fld_set}]},
          "event_log": {to:[{field: "rsa.misc.event_log", setter: fld_set}]},
          "event_name": {to:[{field: "rsa.internal.event_name", setter: fld_set}]},
          "event_queue_time": {convert: to_date, to:[{field: "rsa.time.event_queue_time", setter: fld_set}]},
          "event_source": {to:[{field: "rsa.misc.event_source", setter: fld_set}]},
          "event_state": {to:[{field: "rsa.misc.event_state", setter: fld_set}]},
          "event_time": {convert: to_date, to:[{field: "rsa.time.event_time", setter: fld_set}]},
          "event_time_str": {to:[{field: "rsa.time.event_time_str", setter: fld_prio, prio: 1}]},
          "event_time_string": {to:[{field: "rsa.time.event_time_str", setter: fld_prio, prio: 0}]},
          "event_type": {to:[{field: "rsa.misc.event_type", setter: fld_set}]},
          "event_user": {to:[{field: "rsa.misc.event_user", setter: fld_set}]},
          "eventtime": {to:[{field: "rsa.time.eventtime", setter: fld_set}]},
          "expected_val": {to:[{field: "rsa.misc.expected_val", setter: fld_set}]},
          "expiration_time": {convert: to_date, to:[{field: "rsa.time.expire_time", setter: fld_set}]},
          "expiration_time_string": {to:[{field: "rsa.time.expire_time_str", setter: fld_set}]},
          "facility": {to:[{field: "rsa.misc.facility", setter: fld_set}]},
          "facilityname": {to:[{field: "rsa.misc.facilityname", setter: fld_set}]},
          "faddr": {to:[{field: "rsa.network.faddr", setter: fld_set}]},
          "fcatnum": {to:[{field: "rsa.misc.fcatnum", setter: fld_set}]},
          "federated_idp": {to:[{field: "rsa.identity.federated_idp", setter: fld_set}]},
          "federated_sp": {to:[{field: "rsa.identity.federated_sp", setter: fld_set}]},
          "feed.category": {to:[{field: "rsa.internal.feed_category", setter: fld_set}]},
          "feed_desc": {to:[{field: "rsa.internal.feed_desc", setter: fld_set}]},
          "feed_name": {to:[{field: "rsa.internal.feed_name", setter: fld_set}]},
          "fhost": {to:[{field: "rsa.network.fhost", setter: fld_set}]},
          "file_entropy": {convert: to_double, to:[{field: "rsa.file.file_entropy", setter: fld_set}]},
          "file_vendor": {to:[{field: "rsa.file.file_vendor", setter: fld_set}]},
          "filename_dst": {to:[{field: "rsa.file.filename_dst", setter: fld_set}]},
          "filename_src": {to:[{field: "rsa.file.filename_src", setter: fld_set}]},
          "filename_tmp": {to:[{field: "rsa.file.filename_tmp", setter: fld_set}]},
          "filesystem": {to:[{field: "rsa.file.filesystem", setter: fld_set}]},
          "filter": {to:[{field: "rsa.misc.filter", setter: fld_set}]},
          "finterface": {to:[{field: "rsa.misc.finterface", setter: fld_set}]},
          "flags": {to:[{field: "rsa.misc.flags", setter: fld_set}]},
          "forensic_info": {to:[{field: "rsa.misc.forensic_info", setter: fld_set}]},
          "forward.ip": {convert: to_ip, to:[{field: "rsa.internal.forward_ip", setter: fld_set}]},
          "forward.ipv6": {convert: to_ip, to:[{field: "rsa.internal.forward_ipv6", setter: fld_set}]},
          "found": {to:[{field: "rsa.misc.found", setter: fld_set}]},
          "fport": {to:[{field: "rsa.network.fport", setter: fld_set}]},
          "fqdn": {to:[{field: "rsa.web.fqdn", setter: fld_set}]},
          "fresult": {convert: to_long, to:[{field: "rsa.misc.fresult", setter: fld_set}]},
          "from": {to:[{field: "rsa.email.email_src", setter: fld_set}]},
          "gaddr": {to:[{field: "rsa.misc.gaddr", setter: fld_set}]},
          "gateway": {to:[{field: "rsa.network.gateway", setter: fld_set}]},
          "gmtdate": {to:[{field: "rsa.time.gmtdate", setter: fld_set}]},
          "gmttime": {to:[{field: "rsa.time.gmttime", setter: fld_set}]},
          "group": {to:[{field: "rsa.misc.group", setter: fld_set}]},
          "group_object": {to:[{field: "rsa.misc.group_object", setter: fld_set}]},
          "groupid": {to:[{field: "rsa.misc.group_id", setter: fld_set}]},
          "h_code": {to:[{field: "rsa.internal.hcode", setter: fld_set}]},
          "hardware_id": {to:[{field: "rsa.misc.hardware_id", setter: fld_set}]},
          "header.id": {to:[{field: "rsa.internal.header_id", setter: fld_set}]},
          "host.orig": {to:[{field: "rsa.network.host_orig", setter: fld_set}]},
          "host.state": {to:[{field: "rsa.endpoint.host_state", setter: fld_set}]},
          "host.type": {to:[{field: "rsa.network.host_type", setter: fld_set}]},
          "host_role": {to:[{field: "rsa.identity.host_role", setter: fld_set}]},
          "hostid": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "hostname": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "hour": {to:[{field: "rsa.time.hour", setter: fld_set}]},
          "https.insact": {to:[{field: "rsa.crypto.https_insact", setter: fld_set}]},
          "https.valid": {to:[{field: "rsa.crypto.https_valid", setter: fld_set}]},
          "icmpcode": {convert: to_long, to:[{field: "rsa.network.icmp_code", setter: fld_set}]},
          "icmptype": {convert: to_long, to:[{field: "rsa.network.icmp_type", setter: fld_set}]},
          "id": {to:[{field: "rsa.misc.reference_id", setter: fld_set}]},
          "id1": {to:[{field: "rsa.misc.reference_id1", setter: fld_set}]},
          "id2": {to:[{field: "rsa.misc.reference_id2", setter: fld_set}]},
          "id3": {to:[{field: "rsa.misc.id3", setter: fld_set}]},
          "ike": {to:[{field: "rsa.crypto.ike", setter: fld_set}]},
          "ike_cookie1": {to:[{field: "rsa.crypto.ike_cookie1", setter: fld_set}]},
          "ike_cookie2": {to:[{field: "rsa.crypto.ike_cookie2", setter: fld_set}]},
          "im_buddyid": {to:[{field: "rsa.misc.im_buddyid", setter: fld_set}]},
          "im_buddyname": {to:[{field: "rsa.misc.im_buddyname", setter: fld_set}]},
          "im_client": {to:[{field: "rsa.misc.im_client", setter: fld_set}]},
          "im_croomid": {to:[{field: "rsa.misc.im_croomid", setter: fld_set}]},
          "im_croomtype": {to:[{field: "rsa.misc.im_croomtype", setter: fld_set}]},
          "im_members": {to:[{field: "rsa.misc.im_members", setter: fld_set}]},
          "im_userid": {to:[{field: "rsa.misc.im_userid", setter: fld_set}]},
          "im_username": {to:[{field: "rsa.misc.im_username", setter: fld_set}]},
          "index": {to:[{field: "rsa.misc.index", setter: fld_set}]},
          "info": {to:[{field: "rsa.db.index", setter: fld_set}]},
          "inode": {convert: to_long, to:[{field: "rsa.internal.inode", setter: fld_set}]},
          "inout": {to:[{field: "rsa.misc.inout", setter: fld_set}]},
          "instance": {to:[{field: "rsa.db.instance", setter: fld_set}]},
          "interface": {to:[{field: "rsa.network.interface", setter: fld_set}]},
          "inv.category": {to:[{field: "rsa.investigations.inv_category", setter: fld_set}]},
          "inv.context": {to:[{field: "rsa.investigations.inv_context", setter: fld_set}]},
          "ioc": {to:[{field: "rsa.investigations.ioc", setter: fld_set}]},
          "ip_proto": {convert: to_long, to:[{field: "rsa.network.ip_proto", setter: fld_set}]},
          "ipkt": {to:[{field: "rsa.misc.ipkt", setter: fld_set}]},
          "ipscat": {to:[{field: "rsa.misc.ipscat", setter: fld_set}]},
          "ipspri": {to:[{field: "rsa.misc.ipspri", setter: fld_set}]},
          "jobname": {to:[{field: "rsa.misc.jobname", setter: fld_set}]},
          "jobnum": {to:[{field: "rsa.misc.job_num", setter: fld_set}]},
          "laddr": {to:[{field: "rsa.network.laddr", setter: fld_set}]},
          "language": {to:[{field: "rsa.misc.language", setter: fld_set}]},
          "latitude": {to:[{field: "rsa.misc.latitude", setter: fld_set}]},
          "lc.cid": {to:[{field: "rsa.internal.lc_cid", setter: fld_set}]},
          "lc.ctime": {convert: to_date, to:[{field: "rsa.internal.lc_ctime", setter: fld_set}]},
          "ldap": {to:[{field: "rsa.identity.ldap", setter: fld_set}]},
          "ldap.query": {to:[{field: "rsa.identity.ldap_query", setter: fld_set}]},
          "ldap.response": {to:[{field: "rsa.identity.ldap_response", setter: fld_set}]},
          "level": {convert: to_long, to:[{field: "rsa.internal.level", setter: fld_set}]},
          "lhost": {to:[{field: "rsa.network.lhost", setter: fld_set}]},
          "library": {to:[{field: "rsa.misc.library", setter: fld_set}]},
          "lifetime": {convert: to_long, to:[{field: "rsa.misc.lifetime", setter: fld_set}]},
          "linenum": {to:[{field: "rsa.misc.linenum", setter: fld_set}]},
          "link": {to:[{field: "rsa.misc.link", setter: fld_set}]},
          "linterface": {to:[{field: "rsa.network.linterface", setter: fld_set}]},
          "list_name": {to:[{field: "rsa.misc.list_name", setter: fld_set}]},
          "listnum": {to:[{field: "rsa.misc.listnum", setter: fld_set}]},
          "load_data": {to:[{field: "rsa.misc.load_data", setter: fld_set}]},
          "location_floor": {to:[{field: "rsa.misc.location_floor", setter: fld_set}]},
          "location_mark": {to:[{field: "rsa.misc.location_mark", setter: fld_set}]},
          "log_id": {to:[{field: "rsa.misc.log_id", setter: fld_set}]},
          "log_type": {to:[{field: "rsa.misc.log_type", setter: fld_set}]},
          "logid": {to:[{field: "rsa.misc.logid", setter: fld_set}]},
          "logip": {to:[{field: "rsa.misc.logip", setter: fld_set}]},
          "logname": {to:[{field: "rsa.misc.logname", setter: fld_set}]},
          "logon_type": {to:[{field: "rsa.identity.logon_type", setter: fld_set}]},
          "logon_type_desc": {to:[{field: "rsa.identity.logon_type_desc", setter: fld_set}]},
          "longitude": {to:[{field: "rsa.misc.longitude", setter: fld_set}]},
          "lport": {to:[{field: "rsa.misc.lport", setter: fld_set}]},
          "lread": {convert: to_long, to:[{field: "rsa.db.lread", setter: fld_set}]},
          "lun": {to:[{field: "rsa.storage.lun", setter: fld_set}]},
          "lwrite": {convert: to_long, to:[{field: "rsa.db.lwrite", setter: fld_set}]},
          "macaddr": {convert: to_mac, to:[{field: "rsa.network.eth_host", setter: fld_set}]},
          "mail_id": {to:[{field: "rsa.misc.mail_id", setter: fld_set}]},
          "mask": {to:[{field: "rsa.network.mask", setter: fld_set}]},
          "match": {to:[{field: "rsa.misc.match", setter: fld_set}]},
          "mbug_data": {to:[{field: "rsa.misc.mbug_data", setter: fld_set}]},
          "mcb.req": {convert: to_long, to:[{field: "rsa.internal.mcb_req", setter: fld_set}]},
          "mcb.res": {convert: to_long, to:[{field: "rsa.internal.mcb_res", setter: fld_set}]},
          "mcbc.req": {convert: to_long, to:[{field: "rsa.internal.mcbc_req", setter: fld_set}]},
          "mcbc.res": {convert: to_long, to:[{field: "rsa.internal.mcbc_res", setter: fld_set}]},
          "medium": {convert: to_long, to:[{field: "rsa.internal.medium", setter: fld_set}]},
          "message": {to:[{field: "rsa.internal.message", setter: fld_set}]},
          "message_body": {to:[{field: "rsa.misc.message_body", setter: fld_set}]},
          "messageid": {to:[{field: "rsa.internal.messageid", setter: fld_set}]},
          "min": {to:[{field: "rsa.time.min", setter: fld_set}]},
          "misc": {to:[{field: "rsa.misc.misc", setter: fld_set}]},
          "misc_name": {to:[{field: "rsa.misc.misc_name", setter: fld_set}]},
          "mode": {to:[{field: "rsa.misc.mode", setter: fld_set}]},
          "month": {to:[{field: "rsa.time.month", setter: fld_set}]},
          "msg": {to:[{field: "rsa.internal.msg", setter: fld_set}]},
          "msgIdPart1": {to:[{field: "rsa.misc.msgIdPart1", setter: fld_set}]},
          "msgIdPart2": {to:[{field: "rsa.misc.msgIdPart2", setter: fld_set}]},
          "msgIdPart3": {to:[{field: "rsa.misc.msgIdPart3", setter: fld_set}]},
          "msgIdPart4": {to:[{field: "rsa.misc.msgIdPart4", setter: fld_set}]},
          "msg_id": {to:[{field: "rsa.internal.msg_id", setter: fld_set}]},
          "msg_type": {to:[{field: "rsa.misc.msg_type", setter: fld_set}]},
          "msgid": {to:[{field: "rsa.misc.msgid", setter: fld_set}]},
          "name": {to:[{field: "rsa.misc.name", setter: fld_set}]},
          "netname": {to:[{field: "rsa.network.netname", setter: fld_set}]},
          "netsessid": {to:[{field: "rsa.misc.netsessid", setter: fld_set}]},
          "network_port": {convert: to_long, to:[{field: "rsa.network.network_port", setter: fld_set}]},
          "network_service": {to:[{field: "rsa.network.network_service", setter: fld_set}]},
          "node": {to:[{field: "rsa.misc.node", setter: fld_set}]},
          "nodename": {to:[{field: "rsa.internal.node_name", setter: fld_set}]},
          "ntype": {to:[{field: "rsa.misc.ntype", setter: fld_set}]},
          "num": {to:[{field: "rsa.misc.num", setter: fld_set}]},
          "number": {to:[{field: "rsa.misc.number", setter: fld_set}]},
          "number1": {to:[{field: "rsa.misc.number1", setter: fld_set}]},
          "number2": {to:[{field: "rsa.misc.number2", setter: fld_set}]},
          "nwe.callback_id": {to:[{field: "rsa.internal.nwe_callback_id", setter: fld_set}]},
          "nwwn": {to:[{field: "rsa.misc.nwwn", setter: fld_set}]},
          "obj_id": {to:[{field: "rsa.internal.obj_id", setter: fld_set}]},
          "obj_name": {to:[{field: "rsa.misc.obj_name", setter: fld_set}]},
          "obj_server": {to:[{field: "rsa.internal.obj_server", setter: fld_set}]},
          "obj_type": {to:[{field: "rsa.misc.obj_type", setter: fld_set}]},
          "obj_value": {to:[{field: "rsa.internal.obj_val", setter: fld_set}]},
          "object": {to:[{field: "rsa.misc.object", setter: fld_set}]},
          "observed_val": {to:[{field: "rsa.misc.observed_val", setter: fld_set}]},
          "operation": {to:[{field: "rsa.misc.operation", setter: fld_set}]},
          "operation_id": {to:[{field: "rsa.misc.operation_id", setter: fld_set}]},
          "opkt": {to:[{field: "rsa.misc.opkt", setter: fld_set}]},
          "org.dst": {to:[{field: "rsa.physical.org_dst", setter: fld_prio, prio: 1}]},
          "org.src": {to:[{field: "rsa.physical.org_src", setter: fld_set}]},
          "org_dst": {to:[{field: "rsa.physical.org_dst", setter: fld_prio, prio: 0}]},
          "orig_from": {to:[{field: "rsa.misc.orig_from", setter: fld_set}]},
          "origin": {to:[{field: "rsa.network.origin", setter: fld_set}]},
          "original_owner": {to:[{field: "rsa.identity.owner", setter: fld_set}]},
          "os": {to:[{field: "rsa.misc.OS", setter: fld_set}]},
          "owner_id": {to:[{field: "rsa.misc.owner_id", setter: fld_set}]},
          "p_action": {to:[{field: "rsa.misc.p_action", setter: fld_set}]},
          "p_date": {to:[{field: "rsa.time.p_date", setter: fld_set}]},
          "p_filter": {to:[{field: "rsa.misc.p_filter", setter: fld_set}]},
          "p_group_object": {to:[{field: "rsa.misc.p_group_object", setter: fld_set}]},
          "p_id": {to:[{field: "rsa.misc.p_id", setter: fld_set}]},
          "p_month": {to:[{field: "rsa.time.p_month", setter: fld_set}]},
          "p_msgid": {to:[{field: "rsa.misc.p_msgid", setter: fld_set}]},
          "p_msgid1": {to:[{field: "rsa.misc.p_msgid1", setter: fld_set}]},
          "p_msgid2": {to:[{field: "rsa.misc.p_msgid2", setter: fld_set}]},
          "p_result1": {to:[{field: "rsa.misc.p_result1", setter: fld_set}]},
          "p_time": {to:[{field: "rsa.time.p_time", setter: fld_set}]},
          "p_time1": {to:[{field: "rsa.time.p_time1", setter: fld_set}]},
          "p_time2": {to:[{field: "rsa.time.p_time2", setter: fld_set}]},
          "p_url": {to:[{field: "rsa.web.p_url", setter: fld_set}]},
          "p_user_agent": {to:[{field: "rsa.web.p_user_agent", setter: fld_set}]},
          "p_web_cookie": {to:[{field: "rsa.web.p_web_cookie", setter: fld_set}]},
          "p_web_method": {to:[{field: "rsa.web.p_web_method", setter: fld_set}]},
          "p_web_referer": {to:[{field: "rsa.web.p_web_referer", setter: fld_set}]},
          "p_year": {to:[{field: "rsa.time.p_year", setter: fld_set}]},
          "packet_length": {to:[{field: "rsa.network.packet_length", setter: fld_set}]},
          "paddr": {convert: to_ip, to:[{field: "rsa.network.paddr", setter: fld_set}]},
          "param": {to:[{field: "rsa.misc.param", setter: fld_set}]},
          "param.dst": {to:[{field: "rsa.misc.param_dst", setter: fld_set}]},
          "param.src": {to:[{field: "rsa.misc.param_src", setter: fld_set}]},
          "parent_node": {to:[{field: "rsa.misc.parent_node", setter: fld_set}]},
          "parse.error": {to:[{field: "rsa.internal.parse_error", setter: fld_set}]},
          "password": {to:[{field: "rsa.identity.password", setter: fld_set}]},
          "password_chg": {to:[{field: "rsa.misc.password_chg", setter: fld_set}]},
          "password_expire": {to:[{field: "rsa.misc.password_expire", setter: fld_set}]},
          "patient_fname": {to:[{field: "rsa.healthcare.patient_fname", setter: fld_set}]},
          "patient_id": {to:[{field: "rsa.healthcare.patient_id", setter: fld_set}]},
          "patient_lname": {to:[{field: "rsa.healthcare.patient_lname", setter: fld_set}]},
          "patient_mname": {to:[{field: "rsa.healthcare.patient_mname", setter: fld_set}]},
          "payload.req": {convert: to_long, to:[{field: "rsa.internal.payload_req", setter: fld_set}]},
          "payload.res": {convert: to_long, to:[{field: "rsa.internal.payload_res", setter: fld_set}]},
          "peer": {to:[{field: "rsa.crypto.peer", setter: fld_set}]},
          "peer_id": {to:[{field: "rsa.crypto.peer_id", setter: fld_set}]},
          "permgranted": {to:[{field: "rsa.misc.permgranted", setter: fld_set}]},
          "permissions": {to:[{field: "rsa.db.permissions", setter: fld_set}]},
          "permwanted": {to:[{field: "rsa.misc.permwanted", setter: fld_set}]},
          "pgid": {to:[{field: "rsa.misc.pgid", setter: fld_set}]},
          "phone_number": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 2}]},
          "phost": {to:[{field: "rsa.network.phost", setter: fld_set}]},
          "pid": {to:[{field: "rsa.misc.pid", setter: fld_set}]},
          "policy": {to:[{field: "rsa.misc.policy", setter: fld_set}]},
          "policyUUID": {to:[{field: "rsa.misc.policyUUID", setter: fld_set}]},
          "policy_id": {to:[{field: "rsa.misc.policy_id", setter: fld_set}]},
          "policy_value": {to:[{field: "rsa.misc.policy_value", setter: fld_set}]},
          "policy_waiver": {to:[{field: "rsa.misc.policy_waiver", setter: fld_set}]},
          "policyname": {to:[{field: "rsa.misc.policy_name", setter: fld_prio, prio: 0}]},
          "pool_id": {to:[{field: "rsa.misc.pool_id", setter: fld_set}]},
          "pool_name": {to:[{field: "rsa.misc.pool_name", setter: fld_set}]},
          "port": {convert: to_long, to:[{field: "rsa.network.port", setter: fld_set}]},
          "portname": {to:[{field: "rsa.misc.port_name", setter: fld_set}]},
          "pread": {convert: to_long, to:[{field: "rsa.db.pread", setter: fld_set}]},
          "priority": {to:[{field: "rsa.misc.priority", setter: fld_set}]},
          "privilege": {to:[{field: "rsa.file.privilege", setter: fld_set}]},
          "process.vid.dst": {to:[{field: "rsa.internal.process_vid_dst", setter: fld_set}]},
          "process.vid.src": {to:[{field: "rsa.internal.process_vid_src", setter: fld_set}]},
          "process_id_val": {to:[{field: "rsa.misc.process_id_val", setter: fld_set}]},
          "processing_time": {to:[{field: "rsa.time.process_time", setter: fld_set}]},
          "profile": {to:[{field: "rsa.identity.profile", setter: fld_set}]},
          "prog_asp_num": {to:[{field: "rsa.misc.prog_asp_num", setter: fld_set}]},
          "program": {to:[{field: "rsa.misc.program", setter: fld_set}]},
          "protocol_detail": {to:[{field: "rsa.network.protocol_detail", setter: fld_set}]},
          "pwwn": {to:[{field: "rsa.storage.pwwn", setter: fld_set}]},
          "r_hostid": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "real_data": {to:[{field: "rsa.misc.real_data", setter: fld_set}]},
          "realm": {to:[{field: "rsa.identity.realm", setter: fld_set}]},
          "reason": {to:[{field: "rsa.misc.reason", setter: fld_set}]},
          "rec_asp_device": {to:[{field: "rsa.misc.rec_asp_device", setter: fld_set}]},
          "rec_asp_num": {to:[{field: "rsa.misc.rec_asp_num", setter: fld_set}]},
          "rec_library": {to:[{field: "rsa.misc.rec_library", setter: fld_set}]},
          "recorded_time": {convert: to_date, to:[{field: "rsa.time.recorded_time", setter: fld_set}]},
          "recordnum": {to:[{field: "rsa.misc.recordnum", setter: fld_set}]},
          "registry.key": {to:[{field: "rsa.endpoint.registry_key", setter: fld_set}]},
          "registry.value": {to:[{field: "rsa.endpoint.registry_value", setter: fld_set}]},
          "remote_domain": {to:[{field: "rsa.web.remote_domain", setter: fld_set}]},
          "remote_domain_id": {to:[{field: "rsa.network.remote_domain_id", setter: fld_set}]},
          "reputation_num": {convert: to_double, to:[{field: "rsa.web.reputation_num", setter: fld_set}]},
          "resource": {to:[{field: "rsa.internal.resource", setter: fld_set}]},
          "resource_class": {to:[{field: "rsa.internal.resource_class", setter: fld_set}]},
          "result": {to:[{field: "rsa.misc.result", setter: fld_set}]},
          "result_code": {to:[{field: "rsa.misc.result_code", setter: fld_prio, prio: 1}]},
          "resultcode": {to:[{field: "rsa.misc.result_code", setter: fld_prio, prio: 0}]},
          "rid": {convert: to_long, to:[{field: "rsa.internal.rid", setter: fld_set}]},
          "risk": {to:[{field: "rsa.misc.risk", setter: fld_set}]},
          "risk_info": {to:[{field: "rsa.misc.risk_info", setter: fld_set}]},
          "risk_num": {convert: to_double, to:[{field: "rsa.misc.risk_num", setter: fld_set}]},
          "risk_num_comm": {convert: to_double, to:[{field: "rsa.misc.risk_num_comm", setter: fld_set}]},
          "risk_num_next": {convert: to_double, to:[{field: "rsa.misc.risk_num_next", setter: fld_set}]},
          "risk_num_sand": {convert: to_double, to:[{field: "rsa.misc.risk_num_sand", setter: fld_set}]},
          "risk_num_static": {convert: to_double, to:[{field: "rsa.misc.risk_num_static", setter: fld_set}]},
          "risk_suspicious": {to:[{field: "rsa.misc.risk_suspicious", setter: fld_set}]},
          "risk_warning": {to:[{field: "rsa.misc.risk_warning", setter: fld_set}]},
          "rpayload": {to:[{field: "rsa.network.rpayload", setter: fld_set}]},
          "ruid": {to:[{field: "rsa.misc.ruid", setter: fld_set}]},
          "rule": {to:[{field: "rsa.misc.rule", setter: fld_set}]},
          "rule_group": {to:[{field: "rsa.misc.rule_group", setter: fld_set}]},
          "rule_template": {to:[{field: "rsa.misc.rule_template", setter: fld_set}]},
          "rule_uid": {to:[{field: "rsa.misc.rule_uid", setter: fld_set}]},
          "rulename": {to:[{field: "rsa.misc.rule_name", setter: fld_set}]},
          "s_certauth": {to:[{field: "rsa.crypto.s_certauth", setter: fld_set}]},
          "s_cipher": {to:[{field: "rsa.crypto.cipher_src", setter: fld_set}]},
          "s_ciphersize": {convert: to_long, to:[{field: "rsa.crypto.cipher_size_src", setter: fld_set}]},
          "s_context": {to:[{field: "rsa.misc.context_subject", setter: fld_set}]},
          "s_sslver": {to:[{field: "rsa.crypto.ssl_ver_src", setter: fld_set}]},
          "sburb": {to:[{field: "rsa.misc.sburb", setter: fld_set}]},
          "scheme": {to:[{field: "rsa.crypto.scheme", setter: fld_set}]},
          "sdomain_fld": {to:[{field: "rsa.misc.sdomain_fld", setter: fld_set}]},
          "search.text": {to:[{field: "rsa.misc.search_text", setter: fld_set}]},
          "sec": {to:[{field: "rsa.misc.sec", setter: fld_set}]},
          "second": {to:[{field: "rsa.misc.second", setter: fld_set}]},
          "sensor": {to:[{field: "rsa.misc.sensor", setter: fld_set}]},
          "sensorname": {to:[{field: "rsa.misc.sensorname", setter: fld_set}]},
          "seqnum": {to:[{field: "rsa.misc.seqnum", setter: fld_set}]},
          "serial_number": {to:[{field: "rsa.misc.serial_number", setter: fld_set}]},
          "service.account": {to:[{field: "rsa.identity.service_account", setter: fld_set}]},
          "session": {to:[{field: "rsa.misc.session", setter: fld_set}]},
          "session.split": {to:[{field: "rsa.internal.session_split", setter: fld_set}]},
          "sessionid": {to:[{field: "rsa.misc.log_session_id", setter: fld_set}]},
          "sessionid1": {to:[{field: "rsa.misc.log_session_id1", setter: fld_set}]},
          "sessiontype": {to:[{field: "rsa.misc.sessiontype", setter: fld_set}]},
          "severity": {to:[{field: "rsa.misc.severity", setter: fld_set}]},
          "sid": {to:[{field: "rsa.identity.user_sid_dst", setter: fld_set}]},
          "sig.name": {to:[{field: "rsa.misc.sig_name", setter: fld_set}]},
          "sigUUID": {to:[{field: "rsa.misc.sigUUID", setter: fld_set}]},
          "sigcat": {to:[{field: "rsa.misc.sigcat", setter: fld_set}]},
          "sigid": {convert: to_long, to:[{field: "rsa.misc.sig_id", setter: fld_set}]},
          "sigid1": {convert: to_long, to:[{field: "rsa.misc.sig_id1", setter: fld_set}]},
          "sigid_string": {to:[{field: "rsa.misc.sig_id_str", setter: fld_set}]},
          "signame": {to:[{field: "rsa.misc.policy_name", setter: fld_prio, prio: 1}]},
          "sigtype": {to:[{field: "rsa.crypto.sig_type", setter: fld_set}]},
          "sinterface": {to:[{field: "rsa.network.sinterface", setter: fld_set}]},
          "site": {to:[{field: "rsa.internal.site", setter: fld_set}]},
          "size": {convert: to_long, to:[{field: "rsa.internal.size", setter: fld_set}]},
          "smask": {to:[{field: "rsa.network.smask", setter: fld_set}]},
          "snmp.oid": {to:[{field: "rsa.misc.snmp_oid", setter: fld_set}]},
          "snmp.value": {to:[{field: "rsa.misc.snmp_value", setter: fld_set}]},
          "sourcefile": {to:[{field: "rsa.internal.sourcefile", setter: fld_set}]},
          "space": {to:[{field: "rsa.misc.space", setter: fld_set}]},
          "space1": {to:[{field: "rsa.misc.space1", setter: fld_set}]},
          "spi": {to:[{field: "rsa.misc.spi", setter: fld_set}]},
          "sql": {to:[{field: "rsa.misc.sql", setter: fld_set}]},
          "src_dn": {to:[{field: "rsa.identity.dn_src", setter: fld_set}]},
          "src_payload": {to:[{field: "rsa.misc.payload_src", setter: fld_set}]},
          "src_spi": {to:[{field: "rsa.misc.spi_src", setter: fld_set}]},
          "src_zone": {to:[{field: "rsa.network.zone_src", setter: fld_set}]},
          "srcburb": {to:[{field: "rsa.misc.srcburb", setter: fld_set}]},
          "srcdom": {to:[{field: "rsa.misc.srcdom", setter: fld_set}]},
          "srcservice": {to:[{field: "rsa.misc.srcservice", setter: fld_set}]},
          "ssid": {to:[{field: "rsa.wireless.wlan_ssid", setter: fld_prio, prio: 0}]},
          "stamp": {convert: to_date, to:[{field: "rsa.time.stamp", setter: fld_set}]},
          "starttime": {convert: to_date, to:[{field: "rsa.time.starttime", setter: fld_set}]},
          "state": {to:[{field: "rsa.misc.state", setter: fld_set}]},
          "statement": {to:[{field: "rsa.internal.statement", setter: fld_set}]},
          "status": {to:[{field: "rsa.misc.status", setter: fld_set}]},
          "status1": {to:[{field: "rsa.misc.status1", setter: fld_set}]},
          "streams": {convert: to_long, to:[{field: "rsa.misc.streams", setter: fld_set}]},
          "subcategory": {to:[{field: "rsa.misc.subcategory", setter: fld_set}]},
          "subject": {to:[{field: "rsa.email.subject", setter: fld_set}]},
          "svcno": {to:[{field: "rsa.misc.svcno", setter: fld_set}]},
          "system": {to:[{field: "rsa.misc.system", setter: fld_set}]},
          "t_context": {to:[{field: "rsa.misc.context_target", setter: fld_set}]},
          "task_name": {to:[{field: "rsa.file.task_name", setter: fld_set}]},
          "tbdstr1": {to:[{field: "rsa.misc.tbdstr1", setter: fld_set}]},
          "tbdstr2": {to:[{field: "rsa.misc.tbdstr2", setter: fld_set}]},
          "tbl_name": {to:[{field: "rsa.db.table_name", setter: fld_set}]},
          "tcp_flags": {convert: to_long, to:[{field: "rsa.misc.tcp_flags", setter: fld_set}]},
          "terminal": {to:[{field: "rsa.misc.terminal", setter: fld_set}]},
          "tgtdom": {to:[{field: "rsa.misc.tgtdom", setter: fld_set}]},
          "tgtdomain": {to:[{field: "rsa.misc.tgtdomain", setter: fld_set}]},
          "threat_name": {to:[{field: "rsa.threat.threat_category", setter: fld_set}]},
          "threat_source": {to:[{field: "rsa.threat.threat_source", setter: fld_set}]},
          "threat_val": {to:[{field: "rsa.threat.threat_desc", setter: fld_set}]},
          "threshold": {to:[{field: "rsa.misc.threshold", setter: fld_set}]},
          "time": {convert: to_date, to:[{field: "rsa.internal.time", setter: fld_set}]},
          "timestamp": {to:[{field: "rsa.time.timestamp", setter: fld_set}]},
          "timezone": {to:[{field: "rsa.time.timezone", setter: fld_set}]},
          "to": {to:[{field: "rsa.email.email_dst", setter: fld_set}]},
          "tos": {convert: to_long, to:[{field: "rsa.misc.tos", setter: fld_set}]},
          "trans_from": {to:[{field: "rsa.email.trans_from", setter: fld_set}]},
          "trans_id": {to:[{field: "rsa.db.transact_id", setter: fld_set}]},
          "trans_to": {to:[{field: "rsa.email.trans_to", setter: fld_set}]},
          "trigger_desc": {to:[{field: "rsa.misc.trigger_desc", setter: fld_set}]},
          "trigger_val": {to:[{field: "rsa.misc.trigger_val", setter: fld_set}]},
          "type": {to:[{field: "rsa.misc.type", setter: fld_set}]},
          "type1": {to:[{field: "rsa.misc.type1", setter: fld_set}]},
          "tzone": {to:[{field: "rsa.time.tzone", setter: fld_set}]},
          "ubc.req": {convert: to_long, to:[{field: "rsa.internal.ubc_req", setter: fld_set}]},
          "ubc.res": {convert: to_long, to:[{field: "rsa.internal.ubc_res", setter: fld_set}]},
          "udb_class": {to:[{field: "rsa.misc.udb_class", setter: fld_set}]},
          "url_fld": {to:[{field: "rsa.misc.url_fld", setter: fld_set}]},
          "urlpage": {to:[{field: "rsa.web.urlpage", setter: fld_set}]},
          "urlroot": {to:[{field: "rsa.web.urlroot", setter: fld_set}]},
          "user_address": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "user_dept": {to:[{field: "rsa.identity.user_dept", setter: fld_set}]},
          "user_div": {to:[{field: "rsa.misc.user_div", setter: fld_set}]},
          "user_fname": {to:[{field: "rsa.identity.firstname", setter: fld_set}]},
          "user_lname": {to:[{field: "rsa.identity.lastname", setter: fld_set}]},
          "user_mname": {to:[{field: "rsa.identity.middlename", setter: fld_set}]},
          "user_org": {to:[{field: "rsa.identity.org", setter: fld_set}]},
          "user_role": {to:[{field: "rsa.identity.user_role", setter: fld_set}]},
          "userid": {to:[{field: "rsa.misc.userid", setter: fld_set}]},
          "username_fld": {to:[{field: "rsa.misc.username_fld", setter: fld_set}]},
          "utcstamp": {to:[{field: "rsa.misc.utcstamp", setter: fld_set}]},
          "v_instafname": {to:[{field: "rsa.misc.v_instafname", setter: fld_set}]},
          "vendor_event_cat": {to:[{field: "rsa.investigations.event_vcat", setter: fld_set}]},
          "version": {to:[{field: "rsa.misc.version", setter: fld_set}]},
          "vid": {to:[{field: "rsa.internal.msg_vid", setter: fld_set}]},
          "virt_data": {to:[{field: "rsa.misc.virt_data", setter: fld_set}]},
          "virusname": {to:[{field: "rsa.misc.virusname", setter: fld_set}]},
          "vlan": {convert: to_long, to:[{field: "rsa.network.vlan", setter: fld_set}]},
          "vlan.name": {to:[{field: "rsa.network.vlan_name", setter: fld_set}]},
          "vm_target": {to:[{field: "rsa.misc.vm_target", setter: fld_set}]},
          "vpnid": {to:[{field: "rsa.misc.vpnid", setter: fld_set}]},
          "vsys": {to:[{field: "rsa.misc.vsys", setter: fld_set}]},
          "vuln_ref": {to:[{field: "rsa.misc.vuln_ref", setter: fld_set}]},
          "web_cookie": {to:[{field: "rsa.web.web_cookie", setter: fld_set}]},
          "web_extension_tmp": {to:[{field: "rsa.web.web_extension_tmp", setter: fld_set}]},
          "web_host": {to:[{field: "rsa.web.alias_host", setter: fld_set}]},
          "web_method": {to:[{field: "rsa.misc.action", setter: fld_append}]},
          "web_page": {to:[{field: "rsa.web.web_page", setter: fld_set}]},
          "web_ref_domain": {to:[{field: "rsa.web.web_ref_domain", setter: fld_set}]},
          "web_ref_host": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "web_ref_page": {to:[{field: "rsa.web.web_ref_page", setter: fld_set}]},
          "web_ref_query": {to:[{field: "rsa.web.web_ref_query", setter: fld_set}]},
          "web_ref_root": {to:[{field: "rsa.web.web_ref_root", setter: fld_set}]},
          "wifi_channel": {convert: to_long, to:[{field: "rsa.wireless.wlan_channel", setter: fld_set}]},
          "wlan": {to:[{field: "rsa.wireless.wlan_name", setter: fld_set}]},
          "word": {to:[{field: "rsa.internal.word", setter: fld_set}]},
          "workspace_desc": {to:[{field: "rsa.misc.workspace", setter: fld_set}]},
          "workstation": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "year": {to:[{field: "rsa.time.year", setter: fld_set}]},
          "zone": {to:[{field: "rsa.network.zone", setter: fld_set}]},
      };
      
      function to_date(value) {
          switch (typeof (value)) {
              case "object":
                  // This is a Date. But as it was obtained from evt.Get(), the VM
                  // doesn't see it as a JS Date anymore, thus value instanceof Date === false.
                  // Have to trust that any object here is a valid Date for Go.
                  return value;
              case "string":
                  var asDate = new Date(value);
                  if (!isNaN(asDate)) return asDate;
          }
      }
      
      // ECMAScript 5.1 doesn't have Object.MAX_SAFE_INTEGER / Object.MIN_SAFE_INTEGER.
      var maxSafeInt = Math.pow(2, 53) - 1;
      var minSafeInt = -maxSafeInt;
      
      function to_long(value) {
          var num = parseInt(value);
          // Better not to index a number if it's not safe (above 53 bits).
          return !isNaN(num) && minSafeInt <= num && num <= maxSafeInt ? num : undefined;
      }
      
      function to_ip(value) {
          if (value.indexOf(":") === -1)
              return to_ipv4(value);
          return to_ipv6(value);
      }
      
      var ipv4_regex = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
      var ipv6_hex_regex = /^[0-9A-Fa-f]{1,4}$/;
      
      function to_ipv4(value) {
          var result = ipv4_regex.exec(value);
          if (result == null || result.length !== 5) return;
          for (var i = 1; i < 5; i++) {
              var num = strictToInt(result[i]);
              if (isNaN(num) || num < 0 || num > 255) return;
          }
          return value;
      }
      
      function to_ipv6(value) {
          var sqEnd = value.indexOf("]");
          if (sqEnd > -1) {
              if (value.charAt(0) !== "[") return;
              value = value.substr(1, sqEnd - 1);
          }
          var zoneOffset = value.indexOf("%");
          if (zoneOffset > -1) {
              value = value.substr(0, zoneOffset);
          }
          var parts = value.split(":");
          if (parts == null || parts.length < 3 || parts.length > 8) return;
          var numEmpty = 0;
          var innerEmpty = 0;
          for (var i = 0; i < parts.length; i++) {
              if (parts[i].length === 0) {
                  numEmpty++;
                  if (i > 0 && i + 1 < parts.length) innerEmpty++;
              } else if (!parts[i].match(ipv6_hex_regex) &&
                  // Accept an IPv6 with a valid IPv4 at the end.
                  ((i + 1 < parts.length) || !to_ipv4(parts[i]))) {
                  return;
              }
          }
          return innerEmpty === 0 && parts.length === 8 || innerEmpty === 1 ? value : undefined;
      }
      
      function to_double(value) {
          return parseFloat(value);
      }
      
      function to_mac(value) {
          // ES doesn't have a mac datatype so it's safe to ingest whatever was captured.
          return value;
      }
      
      function to_lowercase(value) {
          // to_lowercase is used against keyword fields, which can accept
          // any other type (numbers, dates).
          return typeof(value) === "string"? value.toLowerCase() : value;
      }
      
      function fld_set(dst, value) {
          dst[this.field] = { v: value };
      }
      
      function fld_append(dst, value) {
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: [value] };
          } else {
              var base = dst[this.field];
              if (base.v.indexOf(value)===-1) base.v.push(value);
          }
      }
      
      function fld_prio(dst, value) {
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: value, prio: this.prio};
          } else if(this.prio < dst[this.field].prio) {
              dst[this.field].v = value;
              dst[this.field].prio = this.prio;
          }
      }
      
      var valid_ecs_outcome = {
          'failure': true,
          'success': true,
          'unknown': true
      };
      
      function fld_ecs_outcome(dst, value) {
          value = value.toLowerCase();
          if (valid_ecs_outcome[value] === undefined) {
              value = 'unknown';
          }
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: value };
          } else if (dst[this.field].v === 'unknown') {
              dst[this.field] = { v: value };
          }
      }
      
      function map_all(evt, targets, value) {
          for (var i = 0; i < targets.length; i++) {
              evt.Put(targets[i], value);
          }
      }
      
      function populate_fields(evt) {
          var base = evt.Get(FIELDS_OBJECT);
          if (base === null) return;
          alternate_datetime(evt);
          if (map_ecs) {
              do_populate(evt, base, ecs_mappings);
          }
          if (map_rsa) {
              do_populate(evt, base, rsa_mappings);
          }
          if (keep_raw) {
              evt.Put("rsa.raw", base);
          }
          evt.Delete(FIELDS_OBJECT);
      }
      
      var datetime_alt_components = [
          {field: "day", fmts: [[dF]]},
          {field: "year", fmts: [[dW]]},
          {field: "month", fmts: [[dB],[dG]]},
          {field: "date", fmts: [[dW,dSkip,dG,dSkip,dF],[dW,dSkip,dB,dSkip,dF],[dW,dSkip,dR,dSkip,dF]]},
          {field: "hour", fmts: [[dN]]},
          {field: "min", fmts: [[dU]]},
          {field: "secs", fmts: [[dO]]},
          {field: "time", fmts: [[dN, dSkip, dU, dSkip, dO]]},
      ];
      
      function alternate_datetime(evt) {
          if (evt.Get(FIELDS_PREFIX + "event_time") != null) {
              return;
          }
          var tzOffset = tz_offset;
          if (tzOffset === "event") {
              tzOffset = evt.Get("event.timezone");
          }
          var container = new DateContainer(tzOffset);
          for (var i=0; i<datetime_alt_components.length; i++) {
              var dtc = datetime_alt_components[i];
              var value = evt.Get(FIELDS_PREFIX + dtc.field) || evt.Get(FIELDS_PREFIX + "h" + dtc.field);
              if (value == null) continue;
              for (var f=0; f<dtc.fmts.length; f++) {
                  var pos = date_time_try_pattern_at_pos(dtc.fmts[f], value, 0, container);
                  if (pos !== undefined) {
                      break;
                  }
              }
          }
          var date = container.toDate();
          if (date !== undefined) {
              evt.Put(FIELDS_PREFIX + "event_time", date);
          }
      }
      
      function do_populate(evt, base, targets) {
          var result = {};
          var key;
          for (key in base) {
              if (!base.hasOwnProperty(key)) continue;
              var mapping = targets[key];
              if (mapping === undefined) continue;
              var value = base[key];
              if (mapping.convert !== undefined) {
                  value = mapping.convert(value);
                  if (value === undefined) {
                      if (debug) {
                          console.debug("Failed to convert field '" + key + "' = '" + base[key] + "' with " + mapping.convert.name);
                      }
                      continue;
                  }
              }
              for (var i=0; i<mapping.to.length; i++) {
                  var tgt = mapping.to[i];
                  tgt.setter(result, value);
              }
          }
          for (key in result) {
              if (!result.hasOwnProperty(key)) continue;
              evt.Put(key, result[key].v);
          }
      }
      
      function test() {
          // Silence console output during test.
          var saved = console;
          console = {
              debug: function() {},
              warn: function() {},
              error: function() {},
          };
          test_date_times();
          test_tz();
          test_conversions();
          test_mappings();
          test_url();
          test_calls();
          test_assumptions();
          test_tvm();
          console = saved;
      }
      
      function pass_test(input, output) {
          return {input: input, expected: output !== undefined ? output : input};
      }
      
      function fail_test(input) {
          return {input: input};
      }
      
      function test_date_times() {
          var date_time = function(input) {
              var res = date_time_try_pattern(input.fmt, input.str, input.tz);
              return res !== undefined? res.toISOString() : res;
          };
          test_fn_call(date_time, [
              pass_test(
                  {
                      fmt: [dW,dc("-"),dM,dc("-"),dD,dc("T"),dH,dc(":"),dT,dc(":"),dS],
                      str: "2017-10-16T15:23:42"
                  },
                  "2017-10-16T15:23:42.000Z"),
              pass_test(
                  {
                      fmt: [dW,dc("-"),dM,dc("-"),dD,dc("T"),dH,dc(":"),dT,dc(":"),dS],
                      str: "2017-10-16T15:23:42",
                      tz: "-02:00",
                  },
                  "2017-10-16T17:23:42.000Z"),
              pass_test(
                  {
                      fmt: [dR, dF, dc("th"), dY, dc(","), dI, dQ, dU, dc("min"), dO, dc("secs")],
                      str: "October 7th 22, 3 P.M. 5 min 12 secs"
                  },
                  "2022-10-07T15:05:12.000Z"),
              pass_test(
                  {
                      fmt: [dF, dc("/"), dB, dY, dc(","), dI, dP],
                      str: "31/OCT 70, 12am"
                  },
                  "1970-10-31T00:00:00.000Z"),
              pass_test(
                  {
                      fmt: [dX],
                      str: "1592241213",
                      tz: "+00:00"
                  },
                  "2020-06-15T17:13:33.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "+02:00"
                  }, "2031-04-12T01:05:42.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "-07:30",
                  }, "2031-04-12T10:35:42.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "+0500",
                  }, "2031-04-11T22:05:42.000Z")
          ]);
      }
      
      function test_tz() {
          test_fn_call(parse_local_tz_offset, [
              pass_test(0, "+00:00"),
              pass_test(59, "+00:59"),
              pass_test(60, "+01:00"),
              pass_test(61, "+01:01"),
              pass_test(-1, "-00:01"),
              pass_test(-59, "-00:59"),
              pass_test(-60, "-01:00"),
              pass_test(705, "+11:45"),
              pass_test(-705, "-11:45"),
          ]);
          var date = new Date();
          var localOff = parse_local_tz_offset(-date.getTimezoneOffset());
          test_fn_call(parse_tz_offset, [
              pass_test("local", localOff),
              pass_test("event", "event"),
              pass_test("-07:00", "-07:00"),
              pass_test("-1145", "-11:45"),
              pass_test("+02", "+02:00"),
          ]);
      }
      
      function test_conversions() {
          test_fn_call(to_ip, [
              pass_test("127.0.0.1"),
              pass_test("255.255.255.255"),
              pass_test("008.189.239.199"),
              fail_test(""),
              fail_test("not an IP"),
              fail_test("42"),
              fail_test("127.0.0.1."),
              fail_test("127.0.0."),
              fail_test("10.100.1000.1"),
              pass_test("fd00:1111:2222:3333:4444:5555:6666:7777"),
              pass_test("fd00::7777%eth0", "fd00::7777"),
              pass_test("[fd00::7777]", "fd00::7777"),
              pass_test("[fd00::7777%enp0s3]", "fd00::7777"),
              pass_test("::1"),
              pass_test("::"),
              fail_test(":::"),
              fail_test("fff::1::3"),
              pass_test("ffff::ffff"),
              fail_test("::1ffff"),
              fail_test(":1234:"),
              fail_test("::1234z"),
              pass_test("1::3:4:5:6:7:8"),
              pass_test("::255.255.255.255"),
              pass_test("64:ff9b::192.0.2.33"),
              fail_test("::255.255.255.255:8"),
          ]);
          test_fn_call(to_long, [
              pass_test("1234", 1234),
              pass_test("0x2a", 42),
              fail_test("9007199254740992"),
              fail_test("9223372036854775808"),
              fail_test("NaN"),
              pass_test("-0x1fffffffffffff", -9007199254740991),
              pass_test("+9007199254740991", 9007199254740991),
              fail_test("-0x20000000000000"),
              fail_test("+9007199254740992"),
              pass_test(42),
          ]);
          test_fn_call(to_date, [
              {
                  input: new Date("2017-10-16T08:30:42Z"),
                  expected: "2017-10-16T08:30:42.000Z",
                  convert: Date.prototype.toISOString,
              },
              {
                  input: "2017-10-16T08:30:42Z",
                  expected: new Date("2017-10-16T08:30:42Z").toISOString(),
                  convert: Date.prototype.toISOString,
              },
              fail_test("Not really a date."),
          ]);
          test_fn_call(to_lowercase, [
              pass_test("Hello", "hello"),
              pass_test(45),
              pass_test(Date.now()),
          ]);
      }
      
      function test_fn_call(fn, cases) {
          cases.forEach(function (test, idx) {
              var result = fn(test.input);
              if (test.convert !== undefined) {
                  result = test.convert.call(result);
              }
              if (result !== test.expected) {
                  throw "test " + fn.name + "#" + idx + " failed."
                      + " Input:" + JSON.stringify(test.input)
                      + " Expected:" + JSON.stringify(test.expected)
                      + " Got:" + JSON.stringify(result);
              }
          });
          if (debug) console.debug("test " + fn.name + " PASS.");
      }
      
      function test_mappings() {
          var test_mappings = {
              "a": {to: [{field: "raw.a", setter: fld_set}, {field: "list", setter: fld_append}]},
              "b": {to: [{field: "list", setter: fld_append}]},
              "c": {to: [{field: "raw.c", setter: fld_set}, {field: "list", setter: fld_append}]},
              "d": {to: [{field: "unique", setter: fld_prio, prio: 2}]},
              "e": {to: [{field: "unique", setter: fld_prio, prio: 1}]},
              "f": {to: [{field: "unique", setter: fld_prio, prio: 3}]}
          };
          var values = {
              "a": "value1",
              "b": "value2",
              "c": "value1",
              "d": "value3",
              "e": "value4",
              "f": "value5"
          };
          var expected = {
              "raw.a": "value1",
              "raw.c": "value1",
              "list": ["value1", "value2"],
              "unique": "value4"
          };
          var evt = new Event({});
          do_populate(evt, values, test_mappings);
          var key;
          for (key in expected) {
              var got = JSON.stringify(evt.Get(key));
              var exp = JSON.stringify(expected[key]);
              if (got !== exp) {
                  throw "test test_mappings failed for key " + key
                      + ". Expected:" + exp
                      + " Got:" + got;
              }
          }
      }
      
      function copy_name(dst, src) {
          Object.defineProperty(dst, "name", { value: src.name });
          return dst;
      }
      
      function test_url() {
          function test(fn) {
              return copy_name(function (input) {
                  var evt = new Event({});
                  evt.Put(FIELDS_PREFIX + "src", input);
                  fn("dst", "src")(evt);
                  var result = evt.Get(FIELDS_PREFIX + "dst");
                  return result? result : undefined;
              }, fn);
          }
          test_fn_call(test(domain), [
              pass_test("http://example.com", "example.com"),
              pass_test("http://example.com/", "example.com"),
              pass_test("ftp+ssh://example.com/path", "example.com"),
              pass_test("https://example.com:4443/path", "example.com"),
              pass_test("www.example.net/foo/bar", "www.example.net"),
              pass_test("http://127.0.0.1:8080", "127.0.0.1"),
              pass_test("http://[::1]", "[::1]"),
              pass_test("http://[::1]:8080", "[::1]"),
              pass_test("https://root:pass@example.org:80/foo/bar", "example.org"),
              pass_test("root:pass@example.org:80/foo/bar", "example.org"),
              fail_test("/my/path"),
              fail_test(""),
          ]);
          test_fn_call(test(path), [
              pass_test("http://example.net/a/b/d?x=z", "/a/b/d"),
              pass_test("root:pass@www.example.net:80/a/b/d?x=z", "/a/b/d"),
              pass_test("/a/b/d?x=z#frag", "/a/b/d"),
              pass_test("localhost/", "/"),
              fail_test("domain"),
              fail_test(""),
              fail_test(" "),
          ]);
          test_fn_call(test(page), [
             pass_test("http://example.net/index.html", "index.html"),
              pass_test("http://localhost/index.html", "index.html"),
              pass_test("example.com/a/b/c", "c"),
              fail_test("ftp://example.com/"),
              pass_test("ftp://example.com/main#fragment", "main"),
              pass_test("ftp://example.com/0#fragment", "0"),
              fail_test(""),
          ]);
          test_fn_call(test(port), [
              pass_test("http://0.0.0.0:1234", "1234"),
              pass_test("https://0.0.0.0", "443"),
              pass_test("https://[::abcd:1234]:4443/a?b#c", "4443"),
              fail_test("www.example.net"),
              fail_test(""),
          ]);
          test_fn_call(test(query), [
              pass_test("http://localhost/post?request=1234&user=root", "request=1234&user=root"),
              pass_test("http://localhost/post?request=1234&user=root#m1234", "request=1234&user=root"),
              fail_test("http://localhost/post"),
              fail_test("http://localhost/post?"),
              fail_test(""),
          ]);
          test_fn_call(test(root), [
              pass_test("http://localhost/post?request=1234&user=root", "http://localhost"),
              pass_test("https://[::abcd:1234]:4443/a?b#c", "https://[::abcd:1234]:4443"),
              pass_test("localhost"),
              fail_test("/a/b/c"),
              fail_test(""),
              pass_test("http://user:pass@example.net", "http://example.net"),
          ]);
          test_fn_call(test(ext), [
              pass_test("http://example.net/index.html", ".html"),
              pass_test("http://localhost/index.html?a=b#c", ".html"),
              fail_test("example.com/a/b/c"),
              fail_test("ftp://example.com/"),
              pass_test("ftp://example.com/main.txt#fragment", ".txt"),
              fail_test("ftp://example.com/0#fragment"),
              fail_test(""),
          ]);
      }
      
      function test_calls() {
          test_fn_call(RMQ, [
              fail_test(["a", "b"]),
              fail_test([]),
              pass_test(["unquoted"], "unquoted"),
              pass_test([""], ""),
              pass_test(["''"], ""),
              pass_test(["'hello'"], "hello"),
              pass_test([" 'world'  "], "world"),
              pass_test(['" "'], " "),
              pass_test(["``"], ""),
              pass_test(["`woot'"], "`woot'"),
          ]);
          test_fn_call(CALC, [
              fail_test([]),
              fail_test(["1"]),
              fail_test(["01", "+"]),
              pass_test(["2","+","2"], "4"),
              pass_test(["012","*","2"], "24"),
              pass_test(["0x10","+","1"], "17"),
              pass_test(["0","-","1"], "-1"),
              fail_test(["15","/","3"]),
          ]);
          test_fn_call(STRCAT, [
              pass_test([], ""),
              pass_test(["1"], "1"),
              pass_test(["01", "+"], "01+"),
              pass_test(["hell", "oW", "ORLD"], "helloWORLD"),
          ]);
          var evt = new Event({});
          evt.Put(FIELDS_PREFIX + "a", "7");
          evt.Put(FIELDS_PREFIX + "b", "'hello'");
          evt.Put(FIELDS_PREFIX + "c", "11");
          var call_test = function(fn) {
              return function(input) {
                  call({
                      args: input,
                      "fn": fn,
                      dest: FIELDS_PREFIX+"z",
                  })(evt);
                  var result = evt.Get(FIELDS_PREFIX + "z");
                  evt.Delete(FIELDS_PREFIX + "z");
                  return result != null? result : undefined;
              }
          }
          test_fn_call(call_test(RMQ), [
              pass_test([field("b")], "hello"),
              pass_test([constant("'world'")], "world"),
          ]);
          test_fn_call(call_test(CALC), [
              pass_test([field("a"), constant("-"), field("c")], "-4"),
              pass_test([field("a"), constant("*"), constant("7")], "49"),
              fail_test([field("a"), constant("*"), constant("7a")]),
          ]);
          test_fn_call(call_test(STRCAT), [
              pass_test([field("a"), constant("-"), field("c")], "7-11"),
          ]);
      }
      
      function test_assumptions() {
          var str = "011";
          if (strictToInt(str) !== 11) {
              throw("string conversion interprets leading zeros as octal");
          }
          if (parseInt(str) !== 11) {
              throw("parseInt interprets leading zeros as octal");
          }
          if (Number(str) !== 11) {
              throw("Number conversion interprets leading zeros as octal");
          }
          str = "17a";
          if (!isNaN(strictToInt(str))) {
              throw("string conversion accepts extra chars");
          }
          if (isNaN(parseInt(str))) {
              throw("parseInt doesn't accept extra chars");
          }
          if (!isNaN(Number(str))) {
              throw("Number conversion accepts extra chars");
          }
      }
      
      // Tests the TAGVALMAP feature.
      function test_tvm() {
          var tests = [
              {
                  config: {
                      pair_separator: ',',
                      kv_separator: '=',
                      open_quote: '[',
                      close_quote: ']'
                  },
                  mappings: {
                      "key a": "url",
                      "key_b": "b",
                      "Operation": "operation",
                  },
                  on_success: processor_chain([
                                      setf("d","b")
                                  ]),
                  message: "key_b=value for=B, key a = [http://example.com/] ,Operation=[COPY],other stuff=null,,ignore",
                  expected: {
                      "nwparser.url": "http://example.com/",
                      "nwparser.b": "value for=B",
                      "nwparser.operation": "COPY",
                      "nwparser.d": "value for=B",
                      "log.flags": null,
                  }
              },
              {
                  config: {
                      pair_separator: ',',
                      kv_separator: '=',
                      open_quote: '[',
                      close_quote: ']'
                  },
                  mappings: {
                      "key a": "url",
                      "key_b": "b",
                      "Operation": "operation"
                  },
                  on_success: processor_chain([
                      setf("d","b")
                  ]),
                  message: "nothing to see here",
                  expected: {
                      "nwparser.url": null,
                      "nwparser.d": null,
                      "log.flags": "tagval_parsing_error",
                  }
              },
              {
                  config: {
                      pair_separator: ' ',
                      kv_separator: ':',
                      open_quote: '"',
                      close_quote: '"'
                  },
                  mappings: {
                      "ICMP Type": "icmp_type",
                      "ICMP Code": "icmp_code",
                      "Operation": "operation",
                  },
                  on_success: processor_chain([
                      setc("success","true")
                  ]),
                  message: "Operation:drop ICMP Type:5 ICMP Code:1 ",
                  expected: {
                      "nwparser.icmp_code": "1",
                      "nwparser.icmp_type": "5",
                      "nwparser.operation": "drop",
                      "nwparser.success": "true",
                      "log.flags": null,
                  }
              },
          ];
          var assertEqual = function(evt, key, expected) {
              var value = evt.Get(key);
              if (value !== expected)
                  throw("failed for " + key + ": expected:'" + expected + "' got:'" + value + "'");
          };
          tests.forEach(function (test, idx) {
              var processor = tagval("test", "message", test.config, test.mappings, test.on_success);
              var evt = new Event({
                  "message": test.message,
              });
              processor(evt);
              for (var key in test.expected) {
                  assertEqual(evt, key, test.expected[key]);
              }
          });
      }
      
      //  Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
      //  or more contributor license agreements. Licensed under the Elastic License;
      //  you may not use this file except in compliance with the Elastic License.
      var tvm = {
      	pair_separator: " ",
      	kv_separator: "=",
      	open_quote: "\"",
      	close_quote: "\"",
      };
      
      function DeviceProcessor() {
      	var builder = new processor.Chain();
      	builder.Add(save_flags);
      	builder.Add(strip_syslog_priority);
      	builder.Add(chain1);
      	builder.Add(populate_fields);
      	builder.Add(restore_flags);
      	var chain = builder.Build();
      	return {
      		process: chain.Run,
      	}
      }
      
      var map_getEventLegacyCategoryName = {
      	keyvaluepairs: {
      		"1204010000": constant("Content.Web Traffic.Successful"),
      		"1204020000": constant("Content.Web Traffic.Denied"),
      	},
      	"default": constant("Other.Default"),
      };
      
      var map_getEventLegacyCategory = {
      	keyvaluepairs: {
      		"blocked": constant("1204020000"),
      		"not blocked": constant("1204010000"),
      	},
      	"default": constant("1901000000"),
      };
      
      var dup1 = call({
      	dest: "nwparser.messageid",
      	fn: STRCAT,
      	args: [
      		field("msgIdPart1"),
      		constant("_"),
      		field("msgIdPart2"),
      	],
      });
      
      var dup2 = setc("eventcategory","1605020000");
      
      var dup3 = setc("severity","Informational");
      
      var dup4 = date_time({
      	dest: "event_time",
      	args: ["hdatetime"],
      	fmts: [
      		[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup5 = setc("eventcategory","1401030000");
      
      var dup6 = setc("ec_activity","Logon");
      
      var dup7 = setc("ec_theme","Authentication");
      
      var dup8 = setc("ec_outcome","Failure");
      
      var dup9 = setc("eventcategory","1605000000");
      
      var dup10 = setc("severity","Notice");
      
      var dup11 = setc("eventcategory","1603000000");
      
      var dup12 = setc("eventcategory","1201000000");
      
      var dup13 = setc("event_description","AppFw Buffer Overflow violation in URL");
      
      var dup14 = match("MESSAGE#6:APPFW_APPFW_COOKIE/0", "nwparser.payload", "%{saddr->} %{p0}");
      
      var dup15 = match("MESSAGE#7:APPFW_APPFW_DENYURL/2", "nwparser.p0", "%{url->} \u003c\u003c%{disposition}>");
      
      var dup16 = match("MESSAGE#8:APPFW_APPFW_FIELDCONSISTENCY/2", "nwparser.p0", "%{url->} %{info->} \u003c\u003c%{disposition}>");
      
      var dup17 = setc("event_description","AppFw SQL Injection violation");
      
      var dup18 = setc("event_description","AppFw Request error. Generated 400 Response");
      
      var dup19 = setc("severity","Warning");
      
      var dup20 = match("MESSAGE#20:APPFW_Message/0", "nwparser.payload", "\"%{p0}");
      
      var dup21 = match("MESSAGE#23:DR_HA_Message/1_0", "nwparser.p0", "HASTATE %{p0}");
      
      var dup22 = match("MESSAGE#23:DR_HA_Message/1_1", "nwparser.p0", "%{network_service}: %{p0}");
      
      var dup23 = match("MESSAGE#23:DR_HA_Message/2", "nwparser.p0", "%{info}\"");
      
      var dup24 = setc("event_description","Routing details");
      
      var dup25 = match("MESSAGE#24:EVENT_ALERTENDED/1_0", "nwparser.p0", "for %{dclass_counter1}");
      
      var dup26 = match_copy("MESSAGE#24:EVENT_ALERTENDED/1_1", "nwparser.p0", "space");
      
      var dup27 = setc("ec_subject","Configuration");
      
      var dup28 = setc("ec_activity","Stop");
      
      var dup29 = setc("ec_theme","Configuration");
      
      var dup30 = setc("ec_activity","Start");
      
      var dup31 = match("MESSAGE#28:EVENT_DEVICEDOWN/0", "nwparser.payload", "%{obj_type->} \"%{obj_name}\"%{p0}");
      
      var dup32 = match("MESSAGE#28:EVENT_DEVICEDOWN/1_0", "nwparser.p0", " - State %{event_state}");
      
      var dup33 = match_copy("MESSAGE#28:EVENT_DEVICEDOWN/1_1", "nwparser.p0", "");
      
      var dup34 = setc("ec_subject","Service");
      
      var dup35 = date_time({
      	dest: "event_time",
      	args: ["hdatetime"],
      	fmts: [
      		[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		[dW,dc("/"),dG,dc("/"),dF,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup36 = match("MESSAGE#31:EVENT_MONITORDOWN/0", "nwparser.payload", "%{obj_type->} %{p0}");
      
      var dup37 = match("MESSAGE#31:EVENT_MONITORDOWN/1_0", "nwparser.p0", "%{obj_name->} - State %{event_state}");
      
      var dup38 = match("MESSAGE#31:EVENT_MONITORDOWN/1_2", "nwparser.p0", "%{obj_name}");
      
      var dup39 = setc("event_description","The monitor bound to the service is up");
      
      var dup40 = setc("ec_subject","NetworkComm");
      
      var dup41 = setc("severity","Debug");
      
      var dup42 = match("MESSAGE#45:PITBOSS_Message1/0", "nwparser.payload", "\" %{p0}");
      
      var dup43 = match("MESSAGE#45:PITBOSS_Message1/2", "nwparser.p0", "%{info}\"");
      
      var dup44 = date_time({
      	dest: "starttime",
      	args: ["fld10"],
      	fmts: [
      		[dB,dF,dH,dc(":"),dU,dc(":"),dO,dW],
      	],
      });
      
      var dup45 = setc("event_description","Process");
      
      var dup46 = match("MESSAGE#54:SNMP_TRAP_SENT7/3_3", "nwparser.p0", "sysIpAddress = %{hostip})");
      
      var dup47 = setc("event_description","SNMP TRAP SENT");
      
      var dup48 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/0", "nwparser.payload", "%{} %{p0}");
      
      var dup49 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/1_0", "nwparser.p0", "ClientIP %{p0}");
      
      var dup50 = date_time({
      	dest: "event_time",
      	args: ["hdatetime"],
      	fmts: [
      		[dM,dc("/"),dD,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		[dD,dc("/"),dM,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup51 = setc("ec_activity","Request");
      
      var dup52 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_0", "nwparser.p0", "\" %{fld10->} GMT\" - End_time %{p0}");
      
      var dup53 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_1", "nwparser.p0", "\" %{fld10}\" - End_time %{p0}");
      
      var dup54 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_2", "nwparser.p0", "%{fld10->} - End_time %{p0}");
      
      var dup55 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_0", "nwparser.p0", "\" %{fld11->} GMT\" - Duration %{p0}");
      
      var dup56 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_1", "nwparser.p0", "\" %{fld11}\" - Duration %{p0}");
      
      var dup57 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_2", "nwparser.p0", "%{fld11->} - Duration %{p0}");
      
      var dup58 = setc("event_description","ICA connection related information for a connection belonging to a SSLVPN session");
      
      var dup59 = setc("dclass_ratio1_string"," Compression_ratio_send");
      
      var dup60 = setc("dclass_ratio2_string"," Compression_ratio_recv");
      
      var dup61 = date_time({
      	dest: "endtime",
      	args: ["fld11"],
      	fmts: [
      		[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup62 = date_time({
      	dest: "starttime",
      	args: ["fld10"],
      	fmts: [
      		[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup63 = match("MESSAGE#94:SSLVPN_LOGIN/1_0", "nwparser.p0", "Context %{fld1->} - SessionId: %{sessionid}- User %{p0}");
      
      var dup64 = match("MESSAGE#94:SSLVPN_LOGIN/1_1", "nwparser.p0", "Context %{fld1->} - User %{p0}");
      
      var dup65 = match("MESSAGE#94:SSLVPN_LOGIN/1_2", "nwparser.p0", "User %{p0}");
      
      var dup66 = match("MESSAGE#94:SSLVPN_LOGIN/2", "nwparser.p0", "%{} %{username}- Client_ip %{saddr->} - Nat_ip %{p0}");
      
      var dup67 = match("MESSAGE#94:SSLVPN_LOGIN/3_0", "nwparser.p0", "\"%{stransaddr}\" - Vserver %{p0}");
      
      var dup68 = match("MESSAGE#94:SSLVPN_LOGIN/3_1", "nwparser.p0", "%{stransaddr->} - Vserver %{p0}");
      
      var dup69 = setc("eventcategory","1401060000");
      
      var dup70 = match("MESSAGE#95:SSLVPN_LOGOUT/4", "nwparser.p0", "%{daddr}:%{dport->} - Start_time %{p0}");
      
      var dup71 = setc("eventcategory","1401070000");
      
      var dup72 = setc("ec_activity","Logoff");
      
      var dup73 = match("MESSAGE#97:SSLVPN_UDPFLOWSTAT/0", "nwparser.payload", "Context %{fld1->} - SessionId: %{sessionid}- User %{username->} - Client_ip %{hostip->} - Nat_ip %{p0}");
      
      var dup74 = match("MESSAGE#100:SSLVPN_Message/0", "nwparser.payload", "%{}\"%{p0}");
      
      var dup75 = match("MESSAGE#102:TCP_CONN_DELINK/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Vserver %{daddr}:%{dport->} - NatIP %{stransaddr}:%{stransport->} - Destination %{dtransaddr}:%{dtransport->} - Delink Time %{p0}");
      
      var dup76 = match("MESSAGE#102:TCP_CONN_DELINK/1_0", "nwparser.p0", "%{fld11->} GMT - Total_bytes_send %{p0}");
      
      var dup77 = match("MESSAGE#102:TCP_CONN_DELINK/1_1", "nwparser.p0", "%{fld11->} - Total_bytes_send %{p0}");
      
      var dup78 = match("MESSAGE#102:TCP_CONN_DELINK/2", "nwparser.p0", "%{sbytes->} - Total_bytes_recv %{rbytes}");
      
      var dup79 = setc("event_description","A Server side and a Client side TCP connection is delinked");
      
      var dup80 = match("MESSAGE#103:TCP_CONN_TERMINATE/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{daddr}:%{dport->} - Start Time %{p0}");
      
      var dup81 = match("MESSAGE#103:TCP_CONN_TERMINATE/1_0", "nwparser.p0", "%{fld10->} GMT - End Time %{p0}");
      
      var dup82 = match("MESSAGE#103:TCP_CONN_TERMINATE/1_1", "nwparser.p0", "%{fld10->} - End Time %{p0}");
      
      var dup83 = setc("event_description","TCP connection terminated");
      
      var dup84 = setc("event_description","UI command executed in NetScaler");
      
      var dup85 = setc("disposition","Success");
      
      var dup86 = call({
      	dest: "nwparser.action",
      	fn: STRCAT,
      	args: [
      		field("login"),
      		field("fld11"),
      	],
      });
      
      var dup87 = call({
      	dest: "nwparser.action",
      	fn: STRCAT,
      	args: [
      		field("logout"),
      		field("fld11"),
      	],
      });
      
      var dup88 = setc("eventcategory","1401040000");
      
      var dup89 = setc("event_description","CLI or GUI command executed in NetScaler");
      
      var dup90 = match("MESSAGE#113:CLUSTERD_Message:02/1_1", "nwparser.p0", "%{info->} \"");
      
      var dup91 = setf("msg","$MSG");
      
      var dup92 = setc("event_description","GUI command executed in NetScaler");
      
      var dup93 = match("MESSAGE#158:AAA_Message/0", "nwparser.payload", "\"%{event_type}: %{p0}");
      
      var dup94 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/0", "nwparser.payload", "Sessionid %{sessionid->} - User %{username->} - Client_ip %{saddr->} - Nat_ip %{p0}");
      
      var dup95 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/1_0", "nwparser.p0", "\"%{stransaddr}\" - Vserver_ip %{p0}");
      
      var dup96 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/1_1", "nwparser.p0", "%{stransaddr->} - Vserver_ip %{p0}");
      
      var dup97 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/2", "nwparser.p0", "%{daddr->} - Errmsg \" %{event_description->} \"");
      
      var dup98 = linear_select([
      	dup21,
      	dup22,
      ]);
      
      var dup99 = linear_select([
      	dup25,
      	dup26,
      ]);
      
      var dup100 = linear_select([
      	dup32,
      	dup33,
      ]);
      
      var dup101 = match("MESSAGE#84:SNMP_TRAP_SENT:05", "nwparser.payload", "%{fld1}:UserLogin:%{username->} - %{event_description->} from client IP Address %{saddr}", processor_chain([
      	dup5,
      	dup4,
      ]));
      
      var dup102 = linear_select([
      	dup52,
      	dup53,
      	dup54,
      ]);
      
      var dup103 = linear_select([
      	dup55,
      	dup56,
      	dup57,
      ]);
      
      var dup104 = linear_select([
      	dup63,
      	dup64,
      	dup65,
      ]);
      
      var dup105 = linear_select([
      	dup67,
      	dup68,
      ]);
      
      var dup106 = linear_select([
      	dup76,
      	dup77,
      ]);
      
      var dup107 = linear_select([
      	dup81,
      	dup82,
      ]);
      
      var dup108 = match("MESSAGE#109:UI_CMD_EXECUTED", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action}\" - Status \"%{disposition}\"", processor_chain([
      	dup88,
      	dup89,
      	dup3,
      	dup4,
      ]));
      
      var dup109 = match("MESSAGE#122:APPFW_COOKIE", "nwparser.payload", "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr->} spt=%{sport->} method=%{web_method->} request=%{url->} msg=%{info->} cn1=%{fld2->} cn2=%{fld3->} cs1=%{policyname->} cs2=%{fld5->} cs3=%{fld6->} cs4=%{severity->} cs5=%{fld8->} act=%{action}", processor_chain([
      	dup9,
      	dup91,
      ]));
      
      var dup110 = match("MESSAGE#128:AF_400_RESP", "nwparser.payload", "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr->} spt=%{sport->} method=%{web_method->} request=%{url->} msg=%{info->} cn1=%{fld2->} cn2=%{fld3->} cs1=%{policyname->} cs2=%{fld5->} cs4=%{severity->} cs5=%{fld8->} act=%{action}", processor_chain([
      	dup11,
      	dup91,
      ]));
      
      var dup111 = match_copy("MESSAGE#165:AAATM_Message:06", "nwparser.payload", "info", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var dup112 = linear_select([
      	dup95,
      	dup96,
      ]);
      
      var dup113 = all_match({
      	processors: [
      		dup20,
      		dup98,
      		dup23,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup24,
      		dup3,
      		dup4,
      	]),
      });
      
      var dup114 = all_match({
      	processors: [
      		dup94,
      		dup112,
      		dup97,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var hdr1 = match("HEADER#0:0001", "message", "%{hdatetime->} %{hfld1->} : %{msgIdPart1->} %{msgIdPart2->} %{hfld2}:%{payload}", processor_chain([
      	setc("header_id","0001"),
      	dup1,
      ]));
      
      var hdr2 = match("HEADER#1:0005", "message", "%{hdatetime->} %{hfld1->} : %{msgIdPart1->} %{msgIdPart2->} :%{payload}", processor_chain([
      	setc("header_id","0005"),
      	dup1,
      ]));
      
      var hdr3 = match("HEADER#2:0002/0", "message", "%{hdatetime->} %{hfld1->} : %{hfld2->} %{msgIdPart1->} %{msgIdPart2->} %{p0}");
      
      var part1 = match("HEADER#2:0002/1_0", "nwparser.p0", "%{hfld3->} %{p0}");
      
      var part2 = match_copy("HEADER#2:0002/1_1", "nwparser.p0", "p0");
      
      var select1 = linear_select([
      	part1,
      	part2,
      ]);
      
      var part3 = match("HEADER#2:0002/2", "nwparser.p0", ":%{payload}");
      
      var all1 = all_match({
      	processors: [
      		hdr3,
      		select1,
      		part3,
      	],
      	on_success: processor_chain([
      		setc("header_id","0002"),
      		dup1,
      	]),
      });
      
      var hdr4 = match("HEADER#3:0003", "message", "%{messageid->} %{p0}", processor_chain([
      	setc("header_id","0003"),
      	call({
      		dest: "nwparser.payload",
      		fn: STRCAT,
      		args: [
      			field("messageid"),
      			constant(" "),
      			field("p0"),
      		],
      	}),
      ]));
      
      var hdr5 = match("HEADER#4:0004", "message", "CEF:0|Citrix|%{fld1}|%{fld2}|%{fld3}|%{messageid}| %{p0}", processor_chain([
      	setc("header_id","0004"),
      	call({
      		dest: "nwparser.payload",
      		fn: STRCAT,
      		args: [
      			field("fld1"),
      			constant("|"),
      			field("fld2"),
      			constant("|"),
      			field("fld3"),
      			constant("|"),
      			field("messageid"),
      			constant("| "),
      			field("p0"),
      		],
      	}),
      ]));
      
      var hdr6 = match("HEADER#5:0006", "message", "CEF:0|Citrix|%{product}|%{version}|%{rule}|%{hfld1}|%{severity}| %{payload}", processor_chain([
      	setc("header_id","0006"),
      	setc("messageid","CITRIX_TVM"),
      ]));
      
      var select2 = linear_select([
      	hdr1,
      	hdr2,
      	all1,
      	hdr4,
      	hdr5,
      	hdr6,
      ]);
      
      var part4 = match("MESSAGE#0:AAA_EXTRACTED_GROUPS/0_0", "nwparser.payload", "Extracted_groups \"%{group}\" ");
      
      var part5 = match("MESSAGE#0:AAA_EXTRACTED_GROUPS/0_1", "nwparser.payload", " Extracted_groups \"%{group}");
      
      var select3 = linear_select([
      	part4,
      	part5,
      ]);
      
      var all2 = all_match({
      	processors: [
      		select3,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","The groups extracted after user logs in"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg1 = msg("AAA_EXTRACTED_GROUPS", all2);
      
      var part6 = match("MESSAGE#1:AAA_LOGIN_FAILED", "nwparser.payload", "User %{username->} - Client_ip %{saddr->} - Failure_reason \"%{result}\"", processor_chain([
      	dup5,
      	setc("ec_subject","User"),
      	dup6,
      	dup7,
      	dup8,
      	setc("event_description","The aaa module failed to login the user"),
      	setc("severity","Alert"),
      	dup4,
      ]));
      
      var msg2 = msg("AAA_LOGIN_FAILED", part6);
      
      var part7 = match("MESSAGE#2:ACL_ACL_PKT_LOG", "nwparser.payload", "Source %{saddr}:%{sport->} --> Destination %{daddr}:%{dport->} - Protocol %{protocol->} - TimeStamp %{info->} - Hitcount %{dclass_counter1->} - Hit Rule %{rulename->} - Data %{message_body}", processor_chain([
      	dup9,
      	setc("event_description","ACL_PKT_LOG"),
      	dup10,
      	dup4,
      ]));
      
      var msg3 = msg("ACL_ACL_PKT_LOG", part7);
      
      var part8 = match("MESSAGE#3:APPFW_APPFW_BUFFEROVERFLOW_COOKIE", "nwparser.payload", "%{saddr->} %{fld2->} %{rule_group->} %{info}: %{url->} \u003c\u003c%{disposition}>", processor_chain([
      	dup11,
      	setc("event_description","AppFw Buffer Overflow violation in Cookie"),
      	dup3,
      	dup4,
      ]));
      
      var msg4 = msg("APPFW_APPFW_BUFFEROVERFLOW_COOKIE", part8);
      
      var part9 = match("MESSAGE#4:APPFW_APPFW_BUFFEROVERFLOW_HDR", "nwparser.payload", "%{saddr->} %{fld2->} %{rule_group->} %{info}: %{url->} \u003c\u003c%{disposition}>", processor_chain([
      	dup11,
      	setc("event_description","AppFw Buffer Overflow violation in HTTP Headers"),
      	dup3,
      	dup4,
      ]));
      
      var msg5 = msg("APPFW_APPFW_BUFFEROVERFLOW_HDR", part9);
      
      var part10 = match("MESSAGE#5:APPFW_APPFW_BUFFEROVERFLOW_URL", "nwparser.payload", "%{saddr->} %{fld2->} %{rule_group->} %{info}: %{url->} \u003c\u003c%{disposition}>", processor_chain([
      	dup12,
      	dup13,
      	dup3,
      	dup4,
      ]));
      
      var msg6 = msg("APPFW_APPFW_BUFFEROVERFLOW_URL", part10);
      
      var part11 = match("MESSAGE#137:APPFW_APPFW_BUFFEROVERFLOW_URL:01", "nwparser.payload", "%{saddr->} %{fld2->} %{info}: %{url}", processor_chain([
      	dup12,
      	dup13,
      	dup3,
      	dup4,
      ]));
      
      var msg7 = msg("APPFW_APPFW_BUFFEROVERFLOW_URL:01", part11);
      
      var select4 = linear_select([
      	msg6,
      	msg7,
      ]);
      
      var part12 = match("MESSAGE#6:APPFW_APPFW_COOKIE/1_0", "nwparser.p0", "%{fld2->} %{fld3->} %{rule_group->} Cookie%{p0}");
      
      var part13 = match("MESSAGE#6:APPFW_APPFW_COOKIE/1_1", "nwparser.p0", "%{fld2->} %{rule_group->} Cookie%{p0}");
      
      var part14 = match("MESSAGE#6:APPFW_APPFW_COOKIE/1_2", "nwparser.p0", "%{rule_group->} Cookie%{p0}");
      
      var select5 = linear_select([
      	part12,
      	part13,
      	part14,
      ]);
      
      var part15 = match("MESSAGE#6:APPFW_APPFW_COOKIE/2", "nwparser.p0", "%{url->} validation failed for %{fld3->} \u003c\u003c%{disposition}>");
      
      var all3 = all_match({
      	processors: [
      		dup14,
      		select5,
      		part15,
      	],
      	on_success: processor_chain([
      		dup11,
      		setc("event_description","AppFw Cookie violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg8 = msg("APPFW_APPFW_COOKIE", all3);
      
      var part16 = match("MESSAGE#7:APPFW_APPFW_DENYURL/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} Disallow Deny URL: %{p0}");
      
      var part17 = match("MESSAGE#7:APPFW_APPFW_DENYURL/1_1", "nwparser.p0", "%{rule_group->} Disallow Deny URL: %{p0}");
      
      var select6 = linear_select([
      	part16,
      	part17,
      ]);
      
      var all4 = all_match({
      	processors: [
      		dup14,
      		select6,
      		dup15,
      	],
      	on_success: processor_chain([
      		dup12,
      		setc("ec_activity","Deny"),
      		setc("ec_theme","Policy"),
      		setc("event_description","AppFw DenyURL violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg9 = msg("APPFW_APPFW_DENYURL", all4);
      
      var part18 = match("MESSAGE#8:APPFW_APPFW_FIELDCONSISTENCY/1_0", "nwparser.p0", "%{fld1->} %{fld2->} %{rule_group->} Field consistency%{p0}");
      
      var part19 = match("MESSAGE#8:APPFW_APPFW_FIELDCONSISTENCY/1_1", "nwparser.p0", "%{fld2->} %{rule_group->} Field consistency%{p0}");
      
      var part20 = match("MESSAGE#8:APPFW_APPFW_FIELDCONSISTENCY/1_2", "nwparser.p0", "%{rule_group->} Field consistency%{p0}");
      
      var select7 = linear_select([
      	part18,
      	part19,
      	part20,
      ]);
      
      var all5 = all_match({
      	processors: [
      		dup14,
      		select7,
      		dup16,
      	],
      	on_success: processor_chain([
      		dup11,
      		setc("event_description","AppFw Field Consistency violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg10 = msg("APPFW_APPFW_FIELDCONSISTENCY", all5);
      
      var part21 = match("MESSAGE#9:APPFW_APPFW_FIELDFORMAT/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} Field%{p0}");
      
      var part22 = match("MESSAGE#9:APPFW_APPFW_FIELDFORMAT/1_1", "nwparser.p0", "%{rule_group->} Field%{p0}");
      
      var select8 = linear_select([
      	part21,
      	part22,
      ]);
      
      var part23 = match("MESSAGE#9:APPFW_APPFW_FIELDFORMAT/2", "nwparser.p0", "%{url->} %{info->} =\"%{fld4}\" \u003c\u003c%{disposition}>");
      
      var all6 = all_match({
      	processors: [
      		dup14,
      		select8,
      		part23,
      	],
      	on_success: processor_chain([
      		dup11,
      		setc("event_description","AppFw Field Format violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg11 = msg("APPFW_APPFW_FIELDFORMAT", all6);
      
      var part24 = match("MESSAGE#10:APPFW_APPFW_SQL/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} SQL%{p0}");
      
      var part25 = match("MESSAGE#10:APPFW_APPFW_SQL/1_1", "nwparser.p0", "%{rule_group->} SQL%{p0}");
      
      var select9 = linear_select([
      	part24,
      	part25,
      ]);
      
      var all7 = all_match({
      	processors: [
      		dup14,
      		select9,
      		dup16,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup17,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg12 = msg("APPFW_APPFW_SQL", all7);
      
      var part26 = match("MESSAGE#11:APPFW_APPFW_SQL_1/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} %{p0}");
      
      var part27 = match("MESSAGE#11:APPFW_APPFW_SQL_1/1_1", "nwparser.p0", "%{rule_group->} %{p0}");
      
      var select10 = linear_select([
      	part26,
      	part27,
      ]);
      
      var all8 = all_match({
      	processors: [
      		dup14,
      		select10,
      		dup16,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup17,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg13 = msg("APPFW_APPFW_SQL_1", all8);
      
      var select11 = linear_select([
      	msg12,
      	msg13,
      ]);
      
      var part28 = match("MESSAGE#12:APPFW_APPFW_SAFECOMMERCE/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} Maximum no. %{p0}");
      
      var part29 = match("MESSAGE#12:APPFW_APPFW_SAFECOMMERCE/1_1", "nwparser.p0", "%{rule_group->} Maximum no. %{p0}");
      
      var select12 = linear_select([
      	part28,
      	part29,
      ]);
      
      var part30 = match("MESSAGE#12:APPFW_APPFW_SAFECOMMERCE/2", "nwparser.p0", "%{url->} of potential credit card numbers seen \u003c\u003c%{info}>");
      
      var all9 = all_match({
      	processors: [
      		dup14,
      		select12,
      		part30,
      	],
      	on_success: processor_chain([
      		dup9,
      		setc("event_description","AppFw SafeCommerce credit cards seen"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg14 = msg("APPFW_APPFW_SAFECOMMERCE", all9);
      
      var part31 = match("MESSAGE#13:APPFW_APPFW_SAFECOMMERCE_XFORM/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} %{url->} Transformed (%{info}) Maximum no. %{p0}");
      
      var part32 = match("MESSAGE#13:APPFW_APPFW_SAFECOMMERCE_XFORM/1_1", "nwparser.p0", "%{rule_group->} %{url->} (%{info}) %{p0}");
      
      var select13 = linear_select([
      	part31,
      	part32,
      ]);
      
      var part33 = match("MESSAGE#13:APPFW_APPFW_SAFECOMMERCE_XFORM/2", "nwparser.p0", "potential credit card numbers seen in server response%{}");
      
      var all10 = all_match({
      	processors: [
      		dup14,
      		select13,
      		part33,
      	],
      	on_success: processor_chain([
      		dup9,
      		setc("event_description","AppFw SafeCommerce Transformed for credit cards seen in server repsonse"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg15 = msg("APPFW_APPFW_SAFECOMMERCE_XFORM", all10);
      
      var part34 = match("MESSAGE#14:APPFW_APPFW_STARTURL/1_0", "nwparser.p0", "%{fld2->} %{fld3->} %{rule_group->} Disallow Illegal URL: %{p0}");
      
      var part35 = match("MESSAGE#14:APPFW_APPFW_STARTURL/1_1", "nwparser.p0", "%{fld2->} %{rule_group->} Disallow Illegal URL: %{p0}");
      
      var part36 = match("MESSAGE#14:APPFW_APPFW_STARTURL/1_2", "nwparser.p0", "%{rule_group->} Disallow Illegal URL: %{p0}");
      
      var select14 = linear_select([
      	part34,
      	part35,
      	part36,
      ]);
      
      var all11 = all_match({
      	processors: [
      		dup14,
      		select14,
      		dup15,
      	],
      	on_success: processor_chain([
      		dup12,
      		setc("event_description","AppFw StartURL violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg16 = msg("APPFW_APPFW_STARTURL", all11);
      
      var part37 = match("MESSAGE#15:APPFW_APPFW_XSS/1_0", "nwparser.p0", "%{fld2->} %{rule_group->} Cross-site%{p0}");
      
      var part38 = match("MESSAGE#15:APPFW_APPFW_XSS/1_1", "nwparser.p0", "%{rule_group->} Cross-site%{p0}");
      
      var select15 = linear_select([
      	part37,
      	part38,
      ]);
      
      var part39 = match("MESSAGE#15:APPFW_APPFW_XSS/2", "nwparser.p0", "%{url->} script %{info->} \u003c\u003c%{disposition}>");
      
      var all12 = all_match({
      	processors: [
      		dup14,
      		select15,
      		part39,
      	],
      	on_success: processor_chain([
      		dup12,
      		setc("event_description","AppFw XSS violation"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg17 = msg("APPFW_APPFW_XSS", all12);
      
      var part40 = match("MESSAGE#16:APPFW_AF_400_RESP", "nwparser.payload", "%{saddr->} \"%{info}\"", processor_chain([
      	dup11,
      	dup18,
      	dup3,
      	dup4,
      ]));
      
      var msg18 = msg("APPFW_AF_400_RESP", part40);
      
      var part41 = match("MESSAGE#138:APPFW_AF_400_RESP:01", "nwparser.payload", "%{saddr->} %{info}", processor_chain([
      	dup11,
      	dup18,
      	dup3,
      	dup4,
      ]));
      
      var msg19 = msg("APPFW_AF_400_RESP:01", part41);
      
      var select16 = linear_select([
      	msg18,
      	msg19,
      ]);
      
      var part42 = match("MESSAGE#17:APPFW_APPFW_SAFEOBJECT", "nwparser.payload", "%{saddr->} %{fld10->} Match found with Safe Object: %{info->} \u003c\u003c%{disposition}>", processor_chain([
      	dup11,
      	setc("event_description","AppFw Safe Object"),
      	dup3,
      	dup4,
      ]));
      
      var msg20 = msg("APPFW_APPFW_SAFEOBJECT", part42);
      
      var part43 = match("MESSAGE#18:APPFW_APPFW_CSRF_TAG", "nwparser.payload", "%{saddr->} %{fld10->} CSRF Tag validation failed: \u003c\u003c%{disposition}>", processor_chain([
      	dup11,
      	setc("event_description","AppFw CSRF Tag Validation Failed"),
      	dup3,
      	dup4,
      ]));
      
      var msg21 = msg("APPFW_APPFW_CSRF_TAG", part43);
      
      var part44 = match("MESSAGE#135:APPFW_APPFW_CSRF_TAG:01", "nwparser.payload", "%{saddr->} %{fld1->} %{fld2->} %{fld3->} %{url}", processor_chain([
      	dup9,
      	dup3,
      	dup4,
      ]));
      
      var msg22 = msg("APPFW_APPFW_CSRF_TAG:01", part44);
      
      var select17 = linear_select([
      	msg21,
      	msg22,
      ]);
      
      var part45 = match("MESSAGE#19:APPFW_AF_MEMORY_ERR", "nwparser.payload", "Memory allocation request for %{bytes->} bytes failed. Call stack PCs: %{fld1}", processor_chain([
      	dup11,
      	setc("event_description","Memory allocation request for some bytes failed"),
      	dup19,
      	dup4,
      ]));
      
      var msg23 = msg("APPFW_AF_MEMORY_ERR", part45);
      
      var part46 = match("MESSAGE#20:APPFW_Message/1_0", "nwparser.p0", "Invalid rule id %{p0}");
      
      var part47 = match("MESSAGE#20:APPFW_Message/1_1", "nwparser.p0", "Duplicate rule id %{p0}");
      
      var select18 = linear_select([
      	part46,
      	part47,
      ]);
      
      var part48 = match("MESSAGE#20:APPFW_Message/2", "nwparser.p0", "%{fld1}\"");
      
      var all13 = all_match({
      	processors: [
      		dup20,
      		select18,
      		part48,
      	],
      	on_success: processor_chain([
      		dup11,
      		setc("event_description","Invalid/Duplicate Rule id"),
      		dup19,
      		dup4,
      	]),
      });
      
      var msg24 = msg("APPFW_Message", all13);
      
      var part49 = match("MESSAGE#21:APPFW_Message:01", "nwparser.payload", "\"Setting default custom settings for profile %{fld1->} (%{fld2})\"", processor_chain([
      	dup9,
      	setc("event_description","Setting default custom settings for profile"),
      	dup19,
      	dup4,
      ]));
      
      var msg25 = msg("APPFW_Message:01", part49);
      
      var part50 = match("MESSAGE#22:APPFW_Message:02", "nwparser.payload", "\"Setting same CustomSettings( ) to profile. %{fld2}\"", processor_chain([
      	dup9,
      	setc("event_description","Setting same CustomSettings( ) to profile."),
      	dup4,
      ]));
      
      var msg26 = msg("APPFW_Message:02", part50);
      
      var select19 = linear_select([
      	msg24,
      	msg25,
      	msg26,
      ]);
      
      var msg27 = msg("DR_HA_Message", dup113);
      
      var part51 = match("MESSAGE#24:EVENT_ALERTENDED/0", "nwparser.payload", "%{process->} ended %{p0}");
      
      var all14 = all_match({
      	processors: [
      		part51,
      		dup99,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Alert process ended"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg28 = msg("EVENT_ALERTENDED", all14);
      
      var part52 = match("MESSAGE#25:EVENT_ALERTSTARTED/0", "nwparser.payload", "%{process->} started %{p0}");
      
      var all15 = all_match({
      	processors: [
      		part52,
      		dup99,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Alert process started"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg29 = msg("EVENT_ALERTSTARTED", all15);
      
      var part53 = match("MESSAGE#26:EVENT_CONFIGEND", "nwparser.payload", "CONFIG %{info}", processor_chain([
      	dup2,
      	dup27,
      	dup28,
      	dup29,
      	setc("event_description","Configuration read completed from ns.conf file during boot-up"),
      	dup3,
      	dup4,
      ]));
      
      var msg30 = msg("EVENT_CONFIGEND", part53);
      
      var part54 = match("MESSAGE#27:EVENT_CONFIGSTART", "nwparser.payload", "CONFIG %{info}", processor_chain([
      	dup2,
      	dup27,
      	dup30,
      	dup29,
      	setc("event_description","Configuration read started from ns.conf file during boot-up"),
      	dup3,
      	dup4,
      ]));
      
      var msg31 = msg("EVENT_CONFIGSTART", part54);
      
      var all16 = all_match({
      	processors: [
      		dup31,
      		dup100,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup34,
      		dup28,
      		setc("event_description","Device Down"),
      		dup10,
      		dup35,
      	]),
      });
      
      var msg32 = msg("EVENT_DEVICEDOWN", all16);
      
      var part55 = match("MESSAGE#29:EVENT_DEVICEOFS", "nwparser.payload", "%{obj_type->} \"%{obj_name}\" - State %{event_state}", processor_chain([
      	dup11,
      	dup34,
      	dup28,
      	setc("event_description","Device Out Of Service"),
      	dup10,
      	dup4,
      ]));
      
      var msg33 = msg("EVENT_DEVICEOFS", part55);
      
      var all17 = all_match({
      	processors: [
      		dup31,
      		dup100,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup34,
      		dup30,
      		setc("event_description","Device UP"),
      		dup10,
      		dup35,
      	]),
      });
      
      var msg34 = msg("EVENT_DEVICEUP", all17);
      
      var part56 = match("MESSAGE#31:EVENT_MONITORDOWN/1_1", "nwparser.p0", "\"%{obj_name}\"");
      
      var select20 = linear_select([
      	dup37,
      	part56,
      	dup38,
      ]);
      
      var all18 = all_match({
      	processors: [
      		dup36,
      		select20,
      	],
      	on_success: processor_chain([
      		dup11,
      		setc("event_description","The monitor bound to the service is down"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg35 = msg("EVENT_MONITORDOWN", all18);
      
      var select21 = linear_select([
      	dup37,
      	dup38,
      ]);
      
      var all19 = all_match({
      	processors: [
      		dup36,
      		select21,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup39,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg36 = msg("EVENT_MONITORUP", all19);
      
      var part57 = match("MESSAGE#33:EVENT_NICRESET", "nwparser.payload", "%{obj_type->} \"%{obj_name}\" - State %{event_state}", processor_chain([
      	dup2,
      	dup39,
      	dup3,
      	dup4,
      ]));
      
      var msg37 = msg("EVENT_NICRESET", part57);
      
      var part58 = match("MESSAGE#34:EVENT_ROUTEDOWN", "nwparser.payload", "%{obj_type->} %{obj_name->} - State %{event_state}", processor_chain([
      	dup11,
      	dup40,
      	dup28,
      	setc("event_description","Route is Down"),
      	dup3,
      	dup4,
      ]));
      
      var msg38 = msg("EVENT_ROUTEDOWN", part58);
      
      var part59 = match("MESSAGE#35:EVENT_ROUTEUP", "nwparser.payload", "%{obj_type->} %{obj_name->} - State %{event_state}", processor_chain([
      	dup2,
      	dup40,
      	dup30,
      	setc("event_description","Route is UP"),
      	dup41,
      	dup4,
      ]));
      
      var msg39 = msg("EVENT_ROUTEUP", part59);
      
      var part60 = match("MESSAGE#36:EVENT_STARTCPU", "nwparser.payload", "CPU_started %{info}", processor_chain([
      	dup2,
      	setc("event_description","CPU Started"),
      	dup3,
      	dup4,
      ]));
      
      var msg40 = msg("EVENT_STARTCPU", part60);
      
      var part61 = match("MESSAGE#37:EVENT_STARTSAVECONFIG", "nwparser.payload", "SAVECONFIG %{info}", processor_chain([
      	dup2,
      	setc("event_description","Save configuration started"),
      	dup3,
      	dup4,
      ]));
      
      var msg41 = msg("EVENT_STARTSAVECONFIG", part61);
      
      var part62 = match("MESSAGE#38:EVENT_STARTSYS", "nwparser.payload", "System started - %{info}", processor_chain([
      	dup2,
      	dup34,
      	dup30,
      	setc("event_description","Netscaler Started"),
      	dup3,
      	dup4,
      ]));
      
      var msg42 = msg("EVENT_STARTSYS", part62);
      
      var part63 = match("MESSAGE#39:EVENT_STATECHANGE", "nwparser.payload", "%{obj_type->} \"%{obj_name}\" - State %{event_state}", processor_chain([
      	dup2,
      	dup34,
      	dup30,
      	setc("event_description","HA State has changed"),
      	dup3,
      	dup4,
      ]));
      
      var msg43 = msg("EVENT_STATECHANGE", part63);
      
      var part64 = match("MESSAGE#40:EVENT_STATECHANGE_HEARTBEAT", "nwparser.payload", "%{obj_type->} (%{obj_name}) - %{event_state->} %{info}", processor_chain([
      	dup2,
      	setc("event_description","Heartbeat State report"),
      	dup3,
      	dup4,
      ]));
      
      var msg44 = msg("EVENT_STATECHANGE_HEARTBEAT", part64);
      
      var part65 = match("MESSAGE#41:EVENT_STATECHANGE:01", "nwparser.payload", "%{obj_type->} \"%{obj_name}\" - %{event_state->} %{info}", processor_chain([
      	dup2,
      	dup4,
      ]));
      
      var msg45 = msg("EVENT_STATECHANGE:01", part65);
      
      var select22 = linear_select([
      	msg43,
      	msg44,
      	msg45,
      ]);
      
      var part66 = match("MESSAGE#42:EVENT_STOPSAVECONFIG", "nwparser.payload", "SAVECONFIG%{info}", processor_chain([
      	dup2,
      	dup27,
      	dup28,
      	setc("event_description","Save configuration stopped"),
      	dup3,
      	dup4,
      ]));
      
      var msg46 = msg("EVENT_STOPSAVECONFIG", part66);
      
      var part67 = match("MESSAGE#43:EVENT_STOPSYS", "nwparser.payload", "System stopped - %{info}", processor_chain([
      	dup2,
      	dup34,
      	dup28,
      	setc("event_description","Netscaler Stopped"),
      	dup3,
      	dup4,
      ]));
      
      var msg47 = msg("EVENT_STOPSYS", part67);
      
      var part68 = match_copy("MESSAGE#44:EVENT_UNKNOWN", "nwparser.payload", "info", processor_chain([
      	dup11,
      	setc("event_description","Unknown Event"),
      	dup3,
      	dup4,
      ]));
      
      var msg48 = msg("EVENT_UNKNOWN", part68);
      
      var part69 = match("MESSAGE#45:PITBOSS_Message1/1_0", "nwparser.p0", "%{fld1->} %{fld10->} Adding %{p0}");
      
      var part70 = match("MESSAGE#45:PITBOSS_Message1/1_1", "nwparser.p0", "Adding %{p0}");
      
      var select23 = linear_select([
      	part69,
      	part70,
      ]);
      
      var all20 = all_match({
      	processors: [
      		dup42,
      		select23,
      		dup43,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Pitboss watch is added"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg49 = msg("PITBOSS_Message1", all20);
      
      var part71 = match("MESSAGE#46:PITBOSS_Message2/1_0", "nwparser.p0", "%{fld1->} %{fld10->} Deleting %{p0}");
      
      var part72 = match("MESSAGE#46:PITBOSS_Message2/1_1", "nwparser.p0", "Deleting %{p0}");
      
      var select24 = linear_select([
      	part71,
      	part72,
      ]);
      
      var all21 = all_match({
      	processors: [
      		dup42,
      		select24,
      		dup23,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Pitboss watch is deleted"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg50 = msg("PITBOSS_Message2", all21);
      
      var part73 = match("MESSAGE#47:PITBOSS_Message3/0", "nwparser.payload", "\"%{fld1->} %{fld10->} %{p0}");
      
      var part74 = match("MESSAGE#47:PITBOSS_Message3/1_0", "nwparser.p0", "Pitboss policy is%{p0}");
      
      var part75 = match("MESSAGE#47:PITBOSS_Message3/1_1", "nwparser.p0", "PB_OP_CHANGE_POLICY new policy%{p0}");
      
      var part76 = match("MESSAGE#47:PITBOSS_Message3/1_2", "nwparser.p0", "pb_op_longer_hb%{p0}");
      
      var select25 = linear_select([
      	part74,
      	part75,
      	part76,
      ]);
      
      var part77 = match("MESSAGE#47:PITBOSS_Message3/2", "nwparser.p0", "%{} %{info}\"");
      
      var all22 = all_match({
      	processors: [
      		part73,
      		select25,
      		part77,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Pitboss policy"),
      		dup3,
      		dup4,
      		dup44,
      	]),
      });
      
      var msg51 = msg("PITBOSS_Message3", all22);
      
      var part78 = match("MESSAGE#48:PITBOSS_Message4/1_0", "nwparser.p0", "%{fld1->} %{fld10->} process %{p0}");
      
      var part79 = match("MESSAGE#48:PITBOSS_Message4/1_1", "nwparser.p0", "process %{p0}");
      
      var select26 = linear_select([
      	part78,
      	part79,
      ]);
      
      var all23 = all_match({
      	processors: [
      		dup42,
      		select26,
      		dup43,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup45,
      		dup3,
      		dup4,
      		dup44,
      	]),
      });
      
      var msg52 = msg("PITBOSS_Message4", all23);
      
      var part80 = match("MESSAGE#49:PITBOSS_Message5/1_0", "nwparser.p0", "%{fld1->} %{fld10->} New %{p0}");
      
      var part81 = match("MESSAGE#49:PITBOSS_Message5/1_1", "nwparser.p0", "New %{p0}");
      
      var select27 = linear_select([
      	part80,
      	part81,
      ]);
      
      var all24 = all_match({
      	processors: [
      		dup42,
      		select27,
      		dup43,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup45,
      		dup3,
      		dup4,
      		dup44,
      	]),
      });
      
      var msg53 = msg("PITBOSS_Message5", all24);
      
      var select28 = linear_select([
      	msg49,
      	msg50,
      	msg51,
      	msg52,
      	msg53,
      ]);
      
      var part82 = match("MESSAGE#50:ROUTING_Message", "nwparser.payload", "\"IMI: %{event_description->} : nodeID(%{fld1}) IP(%{saddr}) instance(%{fld2}) Configuration Coordinator(%{fld3}) Nodeset(%{fld4})\"", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg54 = msg("ROUTING_Message", part82);
      
      var msg55 = msg("ROUTING_Message:01", dup113);
      
      var part83 = match("MESSAGE#52:ROUTING_Message:02", "nwparser.payload", "\"%{fld1->} started\"", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg56 = msg("ROUTING_Message:02", part83);
      
      var select29 = linear_select([
      	msg54,
      	msg55,
      	msg56,
      ]);
      
      var part84 = match("MESSAGE#53:ROUTING_ZEBOS_CMD_EXECUTED", "nwparser.payload", "%{obj_type->} Command \"%{action}\" %{info}", processor_chain([
      	dup2,
      	setc("event_description","User has executed a command in ZebOS(vtysh)"),
      	dup3,
      	dup4,
      ]));
      
      var msg57 = msg("ROUTING_ZEBOS_CMD_EXECUTED", part84);
      
      var part85 = match("MESSAGE#54:SNMP_TRAP_SENT7/0", "nwparser.payload", "%{obj_type->} ( %{space}entityName = \"%{p0}");
      
      var part86 = match("MESSAGE#54:SNMP_TRAP_SENT7/1_0", "nwparser.p0", "%{obj_name}(%{info}...\",%{p0}");
      
      var part87 = match("MESSAGE#54:SNMP_TRAP_SENT7/1_1", "nwparser.p0", "%{obj_name}...\",%{p0}");
      
      var select30 = linear_select([
      	part86,
      	part87,
      ]);
      
      var part88 = match("MESSAGE#54:SNMP_TRAP_SENT7/2", "nwparser.p0", "%{}alarmEntityCurState = %{event_state}, %{p0}");
      
      var part89 = match("MESSAGE#54:SNMP_TRAP_SENT7/3_0", "nwparser.p0", "svcServiceFullName.%{fld2->} = \"%{service}\", nsPartitionName = %{fld4})");
      
      var part90 = match("MESSAGE#54:SNMP_TRAP_SENT7/3_1", "nwparser.p0", "vsvrFullName.%{fld3->} = \"%{obj_server}\", nsPartitionName = %{fld4})");
      
      var part91 = match("MESSAGE#54:SNMP_TRAP_SENT7/3_2", "nwparser.p0", "svcGrpMemberFullName.%{fld6->} = \"%{fld7}\", nsPartitionName = %{fld4})");
      
      var select31 = linear_select([
      	part89,
      	part90,
      	part91,
      	dup46,
      ]);
      
      var all25 = all_match({
      	processors: [
      		part85,
      		select30,
      		part88,
      		select31,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg58 = msg("SNMP_TRAP_SENT7", all25);
      
      var part92 = match("MESSAGE#55:SNMP_TRAP_SENT8", "nwparser.payload", "%{obj_type->} ( entityName = \"%{obj_name}...\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg59 = msg("SNMP_TRAP_SENT8", part92);
      
      var part93 = match("MESSAGE#56:SNMP_TRAP_SENT9", "nwparser.payload", "%{obj_type->} ( haNicsMonitorFailed = %{obj_name}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg60 = msg("SNMP_TRAP_SENT9", part93);
      
      var part94 = match("MESSAGE#57:SNMP_TRAP_SENT10", "nwparser.payload", "%{obj_type->} ( %{space}haPeerSystemState = \"%{event_state}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg61 = msg("SNMP_TRAP_SENT10", part94);
      
      var part95 = match("MESSAGE#58:SNMP_TRAP_SENT11", "nwparser.payload", "%{obj_type->} ( sysHealthDiskName = \"%{obj_name}\", sysHealthDiskPerusage = %{fld2}, alarmHighThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg62 = msg("SNMP_TRAP_SENT11", part95);
      
      var part96 = match("MESSAGE#59:SNMP_TRAP_SENT12", "nwparser.payload", "%{obj_type->} ( vsvrName = \"%{dclass_counter1_string}\", vsvrRequestRate = \"%{dclass_counter1}\", alarmHighThreshold = %{dclass_counter2}, vsvrFullName = \"%{fld1}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg63 = msg("SNMP_TRAP_SENT12", part96);
      
      var part97 = match("MESSAGE#60:SNMP_TRAP_SENT13", "nwparser.payload", "%{obj_type->} ( monServiceName = \"%{fld1}\", monitorName = \"%{dclass_counter1_string}\", responseTimeoutThreshold = %{dclass_counter1}, alarmMonrespto = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg64 = msg("SNMP_TRAP_SENT13", part97);
      
      var part98 = match("MESSAGE#61:SNMP_TRAP_SENT14", "nwparser.payload", "%{obj_type->} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmNormalThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg65 = msg("SNMP_TRAP_SENT14", part98);
      
      var part99 = match("MESSAGE#62:SNMP_TRAP_SENT15", "nwparser.payload", "%{obj_type->} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmLowThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg66 = msg("SNMP_TRAP_SENT15", part99);
      
      var part100 = match("MESSAGE#63:SNMP_TRAP_SENT16", "nwparser.payload", "%{obj_type->} ( sysHealthCounterName = \"%{dclass_counter1_string}\", sysHealthCounterValue = %{dclass_counter1}, alarmHighThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg67 = msg("SNMP_TRAP_SENT16", part100);
      
      var part101 = match("MESSAGE#64:SNMP_TRAP_SENT17", "nwparser.payload", "%{obj_type->} ( alarmRateLmtThresholdExceeded = \"%{obj_name}: \"%{info}...\", ipAddressGathered = \"%{fld1}\", stringComputed = \"%{fld2}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg68 = msg("SNMP_TRAP_SENT17", part101);
      
      var part102 = match("MESSAGE#65:SNMP_TRAP_SENT/0", "nwparser.payload", "%{obj_type->} ( entityName = \"%{obj_name->} (%{p0}");
      
      var part103 = match("MESSAGE#65:SNMP_TRAP_SENT/1_0", "nwparser.p0", "%{info}...\" %{p0}");
      
      var part104 = match("MESSAGE#65:SNMP_TRAP_SENT/1_1", "nwparser.p0", "%{info}\" %{p0}");
      
      var select32 = linear_select([
      	part103,
      	part104,
      ]);
      
      var part105 = match("MESSAGE#65:SNMP_TRAP_SENT/2", "nwparser.p0", ", sysIpAddress = %{hostip})");
      
      var all26 = all_match({
      	processors: [
      		part102,
      		select32,
      		part105,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg69 = msg("SNMP_TRAP_SENT", all26);
      
      var part106 = match("MESSAGE#66:SNMP_TRAP_SENT6", "nwparser.payload", "%{obj_type->} ( appfwLogMsg = %{obj_name}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg70 = msg("SNMP_TRAP_SENT6", part106);
      
      var part107 = match("MESSAGE#67:SNMP_TRAP_SENT5/0", "nwparser.payload", "%{obj_type->} ( %{space->} %{p0}");
      
      var part108 = match("MESSAGE#67:SNMP_TRAP_SENT5/1_0", "nwparser.p0", "partition id = %{fld12}, nsUserName = \"%{p0}");
      
      var part109 = match("MESSAGE#67:SNMP_TRAP_SENT5/1_1", "nwparser.p0", "nsUserName = \"%{p0}");
      
      var select33 = linear_select([
      	part108,
      	part109,
      ]);
      
      var part110 = match("MESSAGE#67:SNMP_TRAP_SENT5/2", "nwparser.p0", "\",%{username->} configurationCmd = \"%{action}\", authorizationStatus = %{event_state}, commandExecutionStatus = %{disposition}, %{p0}");
      
      var part111 = match("MESSAGE#67:SNMP_TRAP_SENT5/3_0", "nwparser.p0", "commandFailureReason = \"%{result}\", nsClientIPAddr = %{saddr}, sysIpAddress =%{hostip})");
      
      var part112 = match("MESSAGE#67:SNMP_TRAP_SENT5/3_1", "nwparser.p0", "commandFailureReason = \"%{result}\", nsClientIPAddr = %{saddr}, nsPartitionName = %{fld1})");
      
      var part113 = match("MESSAGE#67:SNMP_TRAP_SENT5/3_2", "nwparser.p0", "nsClientIPAddr = %{saddr}, nsPartitionName = %{fld1})");
      
      var part114 = match("MESSAGE#67:SNMP_TRAP_SENT5/3_3", "nwparser.p0", "nsClientIPAddr = %{saddr}, sysIpAddress =%{hostip->} )");
      
      var part115 = match("MESSAGE#67:SNMP_TRAP_SENT5/3_4", "nwparser.p0", "sysIpAddress =%{hostip})");
      
      var select34 = linear_select([
      	part111,
      	part112,
      	part113,
      	part114,
      	part115,
      ]);
      
      var all27 = all_match({
      	processors: [
      		part107,
      		select33,
      		part110,
      		select34,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg71 = msg("SNMP_TRAP_SENT5", all27);
      
      var part116 = match("MESSAGE#68:SNMP_TRAP_SENT1", "nwparser.payload", "%{obj_type->} ( nsUserName = \"%{username}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	setf("obj_name","username"),
      	dup10,
      	dup4,
      ]));
      
      var msg72 = msg("SNMP_TRAP_SENT1", part116);
      
      var part117 = match("MESSAGE#69:SNMP_TRAP_SENT2", "nwparser.payload", "%{obj_type->} ( nsCPUusage = %{dclass_counter1}, alarm %{trigger_val->} = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg73 = msg("SNMP_TRAP_SENT2", part117);
      
      var part118 = match("MESSAGE#70:SNMP_TRAP_SENT3", "nwparser.payload", "%{obj_type->} ( sysHealthDiskName = \"%{filename}\", sysHealthDiskPerusage = %{dclass_counter1}, alarmNormalThreshold = %{dclass_counter2}, sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg74 = msg("SNMP_TRAP_SENT3", part118);
      
      var part119 = match("MESSAGE#71:SNMP_TRAP_SENT4", "nwparser.payload", "%{obj_type->} ( sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg75 = msg("SNMP_TRAP_SENT4", part119);
      
      var part120 = match("MESSAGE#72:SNMP_TRAP_SENT18", "nwparser.payload", "%{obj_type->} (entityName = \"%{obj_name}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg76 = msg("SNMP_TRAP_SENT18", part120);
      
      var part121 = match("MESSAGE#73:SNMP_TRAP_SENT19", "nwparser.payload", "%{obj_type->} ( %{space->} nsUserName = \"%{username}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg77 = msg("SNMP_TRAP_SENT19", part121);
      
      var part122 = match("MESSAGE#74:SNMP_TRAP_SENT21/0", "nwparser.payload", "%{obj_type->} (partition id = %{fld12}, entityName = \"%{p0}");
      
      var part123 = match("MESSAGE#74:SNMP_TRAP_SENT21/1_0", "nwparser.p0", "%{obj_name}(%{fld4}...\", %{p0}");
      
      var part124 = match("MESSAGE#74:SNMP_TRAP_SENT21/1_1", "nwparser.p0", "%{obj_name}...\", %{p0}");
      
      var select35 = linear_select([
      	part123,
      	part124,
      ]);
      
      var part125 = match("MESSAGE#74:SNMP_TRAP_SENT21/2_0", "nwparser.p0", "svcGrpMemberFullName.%{fld2->} = \"%{fld3}\", sysIpAddress = %{hostip->} )");
      
      var part126 = match("MESSAGE#74:SNMP_TRAP_SENT21/2_1", "nwparser.p0", "vsvrFullName.%{fld2->} = \"%{fld3}\", sysIpAddress = %{hostip->} )");
      
      var part127 = match("MESSAGE#74:SNMP_TRAP_SENT21/2_2", "nwparser.p0", "sysIpAddress = %{hostip->} )");
      
      var select36 = linear_select([
      	part125,
      	part126,
      	part127,
      ]);
      
      var all28 = all_match({
      	processors: [
      		part122,
      		select35,
      		select36,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg78 = msg("SNMP_TRAP_SENT21", all28);
      
      var part128 = match("MESSAGE#75:SNMP_TRAP_SENT22/0", "nwparser.payload", "%{obj_type->} (entityName = \"%{p0}");
      
      var part129 = match("MESSAGE#75:SNMP_TRAP_SENT22/1_0", "nwparser.p0", "%{obj_name}...\" %{p0}");
      
      var part130 = match("MESSAGE#75:SNMP_TRAP_SENT22/1_1", "nwparser.p0", "%{obj_name}\"%{p0}");
      
      var select37 = linear_select([
      	part129,
      	part130,
      ]);
      
      var part131 = match("MESSAGE#75:SNMP_TRAP_SENT22/2", "nwparser.p0", ", %{p0}");
      
      var part132 = match("MESSAGE#75:SNMP_TRAP_SENT22/3_0", "nwparser.p0", "svcGrpMemberFullName.%{p0}");
      
      var part133 = match("MESSAGE#75:SNMP_TRAP_SENT22/3_1", "nwparser.p0", "vsvrFullName.%{p0}");
      
      var part134 = match("MESSAGE#75:SNMP_TRAP_SENT22/3_2", "nwparser.p0", "svcServiceFullName.%{p0}");
      
      var select38 = linear_select([
      	part132,
      	part133,
      	part134,
      ]);
      
      var part135 = match("MESSAGE#75:SNMP_TRAP_SENT22/4", "nwparser.p0", "%{fld2->} = \"%{fld3}\", nsPartitionName = %{fld1})");
      
      var all29 = all_match({
      	processors: [
      		part128,
      		select37,
      		part131,
      		select38,
      		part135,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg79 = msg("SNMP_TRAP_SENT22", all29);
      
      var part136 = match("MESSAGE#76:SNMP_TRAP_SENT23", "nwparser.payload", "%{obj_type->} (platformRateLimitPacketDropCount = %{dclass_counter1}, platformLicensedThroughput = %{fld2}, nsPartitionName = %{fld3})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg80 = msg("SNMP_TRAP_SENT23", part136);
      
      var part137 = match("MESSAGE#77:SNMP_TRAP_SENT24", "nwparser.payload", "%{obj_type->} (vsvrName.%{fld2->} = \"%{fld3}\", vsvrCurSoValue = %{fld4}, vsvrSoMethod = \"%{fld5}\", vsvrSoThresh = \"%{info}\", vsvrFullName.%{fld6->} = \"%{fld7}\", nsPartitionName = %{fld8})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg81 = msg("SNMP_TRAP_SENT24", part137);
      
      var part138 = match("MESSAGE#78:SNMP_TRAP_SENT25/0", "nwparser.payload", "%{obj_type->} (%{p0}");
      
      var part139 = match("MESSAGE#78:SNMP_TRAP_SENT25/1_0", "nwparser.p0", "partition id = %{fld12}, sslCertKeyName.%{p0}");
      
      var part140 = match("MESSAGE#78:SNMP_TRAP_SENT25/1_1", "nwparser.p0", " sslCertKeyName.%{p0}");
      
      var select39 = linear_select([
      	part139,
      	part140,
      ]);
      
      var part141 = match("MESSAGE#78:SNMP_TRAP_SENT25/2", "nwparser.p0", "\",%{fld2->} = \"%{fld1->} sslDaysToExpire.%{fld3->} = %{dclass_counter1}, %{p0}");
      
      var part142 = match("MESSAGE#78:SNMP_TRAP_SENT25/3_0", "nwparser.p0", "nsPartitionName = %{fld4})");
      
      var select40 = linear_select([
      	part142,
      	dup46,
      ]);
      
      var all30 = all_match({
      	processors: [
      		part138,
      		select39,
      		part141,
      		select40,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg82 = msg("SNMP_TRAP_SENT25", all30);
      
      var part143 = match("MESSAGE#79:SNMP_TRAP_SENT26", "nwparser.payload", "%{obj_type->} (nsUserName = \"%{username}\", nsPartitionName = %{fld1})", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg83 = msg("SNMP_TRAP_SENT26", part143);
      
      var part144 = match("MESSAGE#80:SNMP_TRAP_SENT20", "nwparser.payload", "%{info->} (sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg84 = msg("SNMP_TRAP_SENT20", part144);
      
      var part145 = match("MESSAGE#81:SNMP_TRAP_SENT28", "nwparser.payload", "%{obj_type}(lldpRemLocalPortNum.%{fld1}= \"%{fld5}\", lldpRemChassisId.%{fld2}= \"%{dmacaddr}\", lldpRemPortId.%{fld3}= \"%{dinterface}\", sysIpAddress =%{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg85 = msg("SNMP_TRAP_SENT28", part145);
      
      var part146 = match("MESSAGE#82:SNMP_TRAP_SENT29", "nwparser.payload", "%{obj_type}(haNicMonitorSucceeded = \"%{fld1}\", sysIpAddress =%{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg86 = msg("SNMP_TRAP_SENT29", part146);
      
      var part147 = match("MESSAGE#83:SNMP_TRAP_SENT:04", "nwparser.payload", "%{fld1}:StatusPoll:%{fld2->} - Device State changed to %{disposition->} for %{saddr}", processor_chain([
      	dup9,
      	dup4,
      	setc("event_description","Device State changed"),
      ]));
      
      var msg87 = msg("SNMP_TRAP_SENT:04", part147);
      
      var msg88 = msg("SNMP_TRAP_SENT:05", dup101);
      
      var part148 = match("MESSAGE#136:SNMP_TRAP_SENT:01/0", "nwparser.payload", "%{obj_type->} (appfwLogMsg = \"%{obj_name->} %{info}\",%{p0}");
      
      var part149 = match("MESSAGE#136:SNMP_TRAP_SENT:01/1_0", "nwparser.p0", "sysIpAddress = %{hostip}");
      
      var part150 = match("MESSAGE#136:SNMP_TRAP_SENT:01/1_1", "nwparser.p0", "nsPartitionName =%{fld1}");
      
      var select41 = linear_select([
      	part149,
      	part150,
      ]);
      
      var all31 = all_match({
      	processors: [
      		part148,
      		select41,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup47,
      		dup10,
      		dup4,
      	]),
      });
      
      var msg89 = msg("SNMP_TRAP_SENT:01", all31);
      
      var part151 = match("MESSAGE#143:SNMP_TRAP_SENT:02", "nwparser.payload", "%{obj_type->} (haNicsMonitorFailed = \"%{fld1}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg90 = msg("SNMP_TRAP_SENT:02", part151);
      
      var part152 = match("MESSAGE#178:SNMP_TRAP_SENT27", "nwparser.payload", "%{obj_type->} (partition id = %{fld1}, entityName = \"%{obj_name}(%{fld31}\", svcServiceFullName.%{fld2->} = \"%{fld3}\", sysIpAddress = %{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup10,
      	dup4,
      ]));
      
      var msg91 = msg("SNMP_TRAP_SENT27", part152);
      
      var part153 = match("MESSAGE#179:SNMP_TRAP_SENT:03", "nwparser.payload", "%{obj_type}(sysHealthCounterName.PowerSupply1Status = \"%{dclass_counter1_string}\", sysHealthCounterValue.PowerSupply1Status = %{dclass_counter1}, sysHealthPowerSupplyStatus = \"%{result}\", sysIpAddress =%{hostip})", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg92 = msg("SNMP_TRAP_SENT:03", part153);
      
      var select42 = linear_select([
      	msg58,
      	msg59,
      	msg60,
      	msg61,
      	msg62,
      	msg63,
      	msg64,
      	msg65,
      	msg66,
      	msg67,
      	msg68,
      	msg69,
      	msg70,
      	msg71,
      	msg72,
      	msg73,
      	msg74,
      	msg75,
      	msg76,
      	msg77,
      	msg78,
      	msg79,
      	msg80,
      	msg81,
      	msg82,
      	msg83,
      	msg84,
      	msg85,
      	msg86,
      	msg87,
      	msg88,
      	msg89,
      	msg90,
      	msg91,
      	msg92,
      ]);
      
      var part154 = match("MESSAGE#85:SSLVPN_CLISEC_CHECK", "nwparser.payload", "User %{username->} - Client IP %{hostip->} - Vserver %{saddr}:%{sport->} - Client_security_expression \"CLIENT.REG('%{info}').VALUE == %{trigger_val->} || %{change_new->} - %{result}", processor_chain([
      	dup9,
      	dup47,
      	dup4,
      ]));
      
      var msg93 = msg("SSLVPN_CLISEC_CHECK", part154);
      
      var part155 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/1_1", "nwparser.p0", "SPCBId %{sessionid->} - ClientIP %{p0}");
      
      var select43 = linear_select([
      	dup49,
      	part155,
      ]);
      
      var part156 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/2", "nwparser.p0", "%{} %{saddr}- ClientPort %{sport->} - VserverServiceIP %{daddr->} - VserverServicePort %{dport->} - ClientVersion %{s_sslver->} - CipherSuite \"%{s_cipher}\" - Reason \"%{result}\"");
      
      var all32 = all_match({
      	processors: [
      		dup48,
      		select43,
      		part156,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup40,
      		dup8,
      		setc("event_description","SSL Handshake failed"),
      		dup41,
      		dup4,
      	]),
      });
      
      var msg94 = msg("SSLLOG_SSL_HANDSHAKE_FAILURE", all32);
      
      var part157 = match("MESSAGE#87:SSLLOG_SSL_HANDSHAKE_SUCCESS/1_0", "nwparser.p0", "SPCBId %{sessionid->} ClientIP %{p0}");
      
      var select44 = linear_select([
      	part157,
      	dup49,
      ]);
      
      var part158 = match("MESSAGE#87:SSLLOG_SSL_HANDSHAKE_SUCCESS/2", "nwparser.p0", "%{saddr->} - ClientPort %{sport->} - VserverServiceIP %{daddr->} - VserverServicePort %{dport->} - ClientVersion %{s_sslver->} - CipherSuite \"%{s_cipher}\" - Session %{info}");
      
      var all33 = all_match({
      	processors: [
      		dup48,
      		select44,
      		part158,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup40,
      		setc("ec_outcome","Success"),
      		setc("event_description","SSL Handshake succeeded"),
      		dup41,
      		dup4,
      	]),
      });
      
      var msg95 = msg("SSLLOG_SSL_HANDSHAKE_SUCCESS", all33);
      
      var part159 = match("MESSAGE#88:SSLLOG_SSL_HANDSHAKE_SUBJECTNAME", "nwparser.payload", "SPCBId %{sessionid->} - SubjectName \"%{cert_subject}\"", processor_chain([
      	dup9,
      	dup41,
      	dup50,
      ]));
      
      var msg96 = msg("SSLLOG_SSL_HANDSHAKE_SUBJECTNAME", part159);
      
      var part160 = match("MESSAGE#89:SSLLOG_SSL_HANDSHAKE_ISSUERNAME", "nwparser.payload", "SPCBId %{sessionid->} - IssuerName \"%{fld1}\"", processor_chain([
      	dup9,
      	dup41,
      	dup50,
      ]));
      
      var msg97 = msg("SSLLOG_SSL_HANDSHAKE_ISSUERNAME", part160);
      
      var part161 = match("MESSAGE#90:SSLVPN_AAAEXTRACTED_GROUPS", "nwparser.payload", "Extracted_groups \"%{group}\"", processor_chain([
      	dup2,
      	setc("event_description","The groups extracted after user logs into SSLVPN"),
      	dup3,
      	dup4,
      ]));
      
      var msg98 = msg("SSLVPN_AAAEXTRACTED_GROUPS", part161);
      
      var part162 = match("MESSAGE#91:SSLVPN_CLISEC_EXP_EVAL/0", "nwparser.payload", "User %{username->} : - Client IP %{hostip->} - Vserver %{saddr}:%{sport->} - Client security expression CLIENT.REG('%{info}') %{p0}");
      
      var part163 = match("MESSAGE#91:SSLVPN_CLISEC_EXP_EVAL/1_0", "nwparser.p0", "EXISTS %{p0}");
      
      var part164 = match("MESSAGE#91:SSLVPN_CLISEC_EXP_EVAL/1_1", "nwparser.p0", ".VALUE == %{trigger_val->} %{p0}");
      
      var select45 = linear_select([
      	part163,
      	part164,
      ]);
      
      var part165 = match("MESSAGE#91:SSLVPN_CLISEC_EXP_EVAL/2", "nwparser.p0", "evaluated to %{change_new}(%{ntype})");
      
      var all34 = all_match({
      	processors: [
      		part162,
      		select45,
      		part165,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","SSLVPN session Client Security expression EXISTS and evaluated"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg99 = msg("SSLVPN_CLISEC_EXP_EVAL", all34);
      
      var part166 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/0", "nwparser.payload", "Context %{fld1->} - %{p0}");
      
      var part167 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/1_0", "nwparser.p0", "SessionId: %{sessionid->} User %{p0}");
      
      var part168 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/1_1", "nwparser.p0", "%{fld5->} User %{p0}");
      
      var select46 = linear_select([
      	part167,
      	part168,
      ]);
      
      var part169 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/2", "nwparser.p0", "%{username->} : Group(s) %{group->} : %{p0}");
      
      var part170 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/3_0", "nwparser.p0", "Vserver %{hostip->} - %{fld6->} %{p0}");
      
      var part171 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/3_1", "nwparser.p0", "- %{fld7->} %{p0}");
      
      var select47 = linear_select([
      	part170,
      	part171,
      ]);
      
      var part172 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/4_0", "nwparser.p0", "GMT %{web_method->} %{p0}");
      
      var part173 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/4_1", "nwparser.p0", "%{web_method->} %{p0}");
      
      var select48 = linear_select([
      	part172,
      	part173,
      ]);
      
      var part174 = match("MESSAGE#92:SSLVPN_HTTPREQUEST/5", "nwparser.p0", "%{url->} %{fld8}");
      
      var all35 = all_match({
      	processors: [
      		part166,
      		select46,
      		part169,
      		select47,
      		select48,
      		part174,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup51,
      		setc("event_description","SSLVPN session receives a HTTP request"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg100 = msg("SSLVPN_HTTPREQUEST", all35);
      
      var part175 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - Start_time %{p0}");
      
      var part176 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/3", "nwparser.p0", "%{duration_string->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Total_compressedbytes_send %{comp_sbytes->} - Total_compressedbytes_recv %{comp_rbytes->} - Compression_ratio_send %{dclass_ratio1->} - Compression_ratio_recv %{dclass_ratio2}");
      
      var all36 = all_match({
      	processors: [
      		part175,
      		dup102,
      		dup103,
      		part176,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup58,
      		dup59,
      		dup60,
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg101 = msg("SSLVPN_ICAEND_CONNSTAT", all36);
      
      var part177 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - username:domainname %{username}:%{ddomain->} - startTime %{p0}");
      
      var part178 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/1_0", "nwparser.p0", "\" %{fld10->} GMT\" - endTime %{p0}");
      
      var part179 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/1_1", "nwparser.p0", "\" %{fld10}\" - endTime %{p0}");
      
      var part180 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/1_2", "nwparser.p0", "%{fld10->} - endTime %{p0}");
      
      var select49 = linear_select([
      	part178,
      	part179,
      	part180,
      ]);
      
      var part181 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/3", "nwparser.p0", "%{duration_string->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Total_compressedbytes_send %{comp_sbytes->} - Total_compressedbytes_recv %{comp_rbytes->} - Compression_ratio_send %{dclass_ratio1->} - Compression_ratio_recv %{dclass_ratio2->} %{p0}");
      
      var part182 = match("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/4_0", "nwparser.p0", "- connectionId %{connectionid}");
      
      var part183 = match_copy("MESSAGE#139:SSLVPN_ICAEND_CONNSTAT:01/4_1", "nwparser.p0", "fld2");
      
      var select50 = linear_select([
      	part182,
      	part183,
      ]);
      
      var all37 = all_match({
      	processors: [
      		part177,
      		select49,
      		dup103,
      		part181,
      		select50,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup58,
      		dup59,
      		dup60,
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg102 = msg("SSLVPN_ICAEND_CONNSTAT:01", all37);
      
      var select51 = linear_select([
      	msg101,
      	msg102,
      ]);
      
      var part184 = match("MESSAGE#94:SSLVPN_LOGIN/4", "nwparser.p0", "%{daddr}:%{dport->} - Browser_type %{fld2->} - SSLVPN_client_type %{info->} - Group(s) \"%{group}\"");
      
      var all38 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		dup66,
      		dup105,
      		part184,
      	],
      	on_success: processor_chain([
      		dup69,
      		dup6,
      		dup7,
      		setc("event_description","SSLVPN login succeeds"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg103 = msg("SSLVPN_LOGIN", all38);
      
      var part185 = match("MESSAGE#95:SSLVPN_LOGOUT/7", "nwparser.p0", "%{duration_string->} - Http_resources_accessed %{fld3->} - NonHttp_services_accessed %{fld4->} - Total_TCP_connections %{fld5->} - Total_UDP_flows %{fld6->} - Total_policies_allowed %{fld7->} - Total_policies_denied %{fld8->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Total_compressedbytes_send %{comp_sbytes->} - Total_compressedbytes_recv %{comp_rbytes->} - Compression_ratio_send %{dclass_ratio1->} - Compression_ratio_recv %{dclass_ratio2->} - LogoutMethod \"%{result}\" - Group(s) \"%{group}\"");
      
      var all39 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		dup66,
      		dup105,
      		dup70,
      		dup102,
      		dup103,
      		part185,
      	],
      	on_success: processor_chain([
      		dup71,
      		dup72,
      		dup7,
      		setc("event_description","SSLVPN session logs out"),
      		dup59,
      		dup60,
      		setc("event_description"," Default Event"),
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg104 = msg("SSLVPN_LOGOUT", all39);
      
      var part186 = match("MESSAGE#96:SSLVPN_TCPCONN_TIMEDOUT/4", "nwparser.p0", "%{daddr}:%{dport->} - Last_contact %{fld2->} - Group(s) \"%{group}\"");
      
      var all40 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		dup66,
      		dup105,
      		part186,
      	],
      	on_success: processor_chain([
      		setc("eventcategory","1801030100"),
      		dup72,
      		dup7,
      		setc("event_description","SSLVPN TCP Connection Timed Out"),
      		dup3,
      		dup4,
      	]),
      });
      
      var msg105 = msg("SSLVPN_TCPCONN_TIMEDOUT", all40);
      
      var part187 = match("MESSAGE#97:SSLVPN_UDPFLOWSTAT/2", "nwparser.p0", "%{daddr}:%{dport->} - Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - Start_time %{p0}");
      
      var part188 = match("MESSAGE#97:SSLVPN_UDPFLOWSTAT/5", "nwparser.p0", "%{duration_string->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Access %{disposition->} - Group(s) \"%{group}\"");
      
      var all41 = all_match({
      	processors: [
      		dup73,
      		dup105,
      		part187,
      		dup102,
      		dup103,
      		part188,
      	],
      	on_success: processor_chain([
      		dup69,
      		setc("event_description","SSLVPN UDP Flow Statistics"),
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg106 = msg("SSLVPN_UDPFLOWSTAT", all41);
      
      var part189 = match("MESSAGE#98:SSLVPN_ICASTART", "nwparser.payload", "Server port = %{dport->} - Server server ip = %{daddr->} - username:domain_name = %{username}:%{ddomain->} - application name = %{application}", processor_chain([
      	dup69,
      	setc("event_description","ICA started"),
      	dup3,
      	dup4,
      ]));
      
      var msg107 = msg("SSLVPN_ICASTART", part189);
      
      var part190 = match("MESSAGE#99:SSLVPN_ICASTART:01/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - username:domainname %{username}:%{ddomain->} - applicationName %{application->} - startTime %{p0}");
      
      var part191 = match("MESSAGE#99:SSLVPN_ICASTART:01/1_0", "nwparser.p0", "\" %{fld10->} GMT\" - connectionId %{p0}");
      
      var part192 = match("MESSAGE#99:SSLVPN_ICASTART:01/1_1", "nwparser.p0", "\" %{fld10}\" - connectionId %{p0}");
      
      var part193 = match("MESSAGE#99:SSLVPN_ICASTART:01/1_2", "nwparser.p0", "%{fld10->} - connectionId %{p0}");
      
      var select52 = linear_select([
      	part191,
      	part192,
      	part193,
      ]);
      
      var part194 = match_copy("MESSAGE#99:SSLVPN_ICASTART:01/2", "nwparser.p0", "fld5");
      
      var all42 = all_match({
      	processors: [
      		part190,
      		select52,
      		part194,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg108 = msg("SSLVPN_ICASTART:01", all42);
      
      var select53 = linear_select([
      	msg107,
      	msg108,
      ]);
      
      var part195 = match("MESSAGE#100:SSLVPN_Message/1_0", "nwparser.p0", "%{action}: %{fld1->} \"");
      
      var part196 = match("MESSAGE#100:SSLVPN_Message/1_1", "nwparser.p0", "%{action->} %{fld1}\"");
      
      var part197 = match("MESSAGE#100:SSLVPN_Message/1_2", "nwparser.p0", "%{action}: %{fld1}");
      
      var select54 = linear_select([
      	part195,
      	part196,
      	part197,
      ]);
      
      var all43 = all_match({
      	processors: [
      		dup74,
      		select54,
      	],
      	on_success: processor_chain([
      		dup2,
      		setc("event_description","Message"),
      		dup10,
      		dup4,
      	]),
      });
      
      var msg109 = msg("SSLVPN_Message", all43);
      
      var part198 = match("MESSAGE#101:SSLVPN_TCPCONNSTAT/2", "nwparser.p0", "%{} %{username}- Client_ip %{hostip->} - Nat_ip %{stransaddr->} - Vserver %{daddr}:%{dport->} - Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - Start_time %{p0}");
      
      var part199 = match("MESSAGE#101:SSLVPN_TCPCONNSTAT/5", "nwparser.p0", "%{duration_string->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Total_compressedbytes_send %{comp_sbytes->} - Total_compressedbytes_recv %{comp_rbytes->} - Compression_ratio_send %{dclass_ratio1->} - Compression_ratio_recv %{dclass_ratio2->} - Access %{disposition->} - Group(s) \"%{group}\"");
      
      var all44 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		part198,
      		dup102,
      		dup103,
      		part199,
      	],
      	on_success: processor_chain([
      		dup9,
      		setc("event_description","TCP connection related information for a connection belonging to a SSLVPN session"),
      		dup59,
      		dup60,
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg110 = msg("SSLVPN_TCPCONNSTAT", all44);
      
      var all45 = all_match({
      	processors: [
      		dup75,
      		dup106,
      		dup78,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup40,
      		dup30,
      		dup79,
      		dup3,
      		dup61,
      		dup4,
      	]),
      });
      
      var msg111 = msg("TCP_CONN_DELINK", all45);
      
      var all46 = all_match({
      	processors: [
      		dup80,
      		dup107,
      		dup106,
      		dup78,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup40,
      		dup28,
      		dup83,
      		dup3,
      		dup61,
      		dup62,
      		dup4,
      	]),
      });
      
      var msg112 = msg("TCP_CONN_TERMINATE", all46);
      
      var part200 = match("MESSAGE#140:TCP_CONN_TERMINATE:01", "nwparser.payload", "Source %{saddr}Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes}", processor_chain([
      	dup2,
      	dup40,
      	dup28,
      	dup83,
      	dup3,
      	dup4,
      ]));
      
      var msg113 = msg("TCP_CONN_TERMINATE:01", part200);
      
      var select55 = linear_select([
      	msg112,
      	msg113,
      ]);
      
      var part201 = match("MESSAGE#104:TCP_OTHERCONN_DELINK/1_0", "nwparser.p0", "%{fld11->} GMT Total_bytes_send %{p0}");
      
      var part202 = match("MESSAGE#104:TCP_OTHERCONN_DELINK/1_1", "nwparser.p0", "%{fld11->} Total_bytes_send %{p0}");
      
      var select56 = linear_select([
      	part201,
      	part202,
      ]);
      
      var all47 = all_match({
      	processors: [
      		dup75,
      		select56,
      		dup78,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup40,
      		dup30,
      		setc("event_description","A Server side and a Client side TCP connection is delinked. This is not tracked by Netscaler"),
      		dup3,
      		dup61,
      		dup4,
      	]),
      });
      
      var msg114 = msg("TCP_OTHERCONN_DELINK", all47);
      
      var part203 = match("MESSAGE#105:TCP_NAT_OTHERCONN_DELINK/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{daddr}:%{dport->} - NatIP %{stransaddr}:%{stransport->} - Destination %{dtransaddr}:%{dtransport->} - Start Time %{p0}");
      
      var part204 = match("MESSAGE#105:TCP_NAT_OTHERCONN_DELINK/1_0", "nwparser.p0", "%{fld10->} GMT - Delink Time %{p0}");
      
      var part205 = match("MESSAGE#105:TCP_NAT_OTHERCONN_DELINK/1_1", "nwparser.p0", "%{fld10->} - Delink Time %{p0}");
      
      var select57 = linear_select([
      	part204,
      	part205,
      ]);
      
      var part206 = match("MESSAGE#105:TCP_NAT_OTHERCONN_DELINK/3", "nwparser.p0", "%{sbytes->} - Total_bytes_recv %{rbytes->} - %{info}");
      
      var all48 = all_match({
      	processors: [
      		part203,
      		select57,
      		dup106,
      		part206,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup40,
      		setc("event_description","A server side and a client side TCP connection for RNAT are delinked"),
      		dup3,
      		dup61,
      		dup4,
      		dup62,
      	]),
      });
      
      var msg115 = msg("TCP_NAT_OTHERCONN_DELINK", all48);
      
      var part207 = match("MESSAGE#106:UI_CMD_EXECUTED:Login", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"login %{fld11}\" - Status \"Success%{info}\"", processor_chain([
      	dup69,
      	dup84,
      	dup3,
      	dup4,
      	dup85,
      	dup6,
      	dup86,
      ]));
      
      var msg116 = msg("UI_CMD_EXECUTED:Login", part207);
      
      var part208 = match("MESSAGE#107:UI_CMD_EXECUTED:LoginFail", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"login %{fld11}\" - Status \"ERROR:%{info}\"", processor_chain([
      	dup5,
      	dup84,
      	dup3,
      	dup4,
      	setc("disposition","Error"),
      	dup6,
      	dup86,
      ]));
      
      var msg117 = msg("UI_CMD_EXECUTED:LoginFail", part208);
      
      var part209 = match("MESSAGE#108:UI_CMD_EXECUTED:Logout", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"logout %{fld11}\" - Status \"Success%{info}\"", processor_chain([
      	dup71,
      	dup84,
      	dup3,
      	dup4,
      	dup85,
      	dup72,
      	dup87,
      ]));
      
      var msg118 = msg("UI_CMD_EXECUTED:Logout", part209);
      
      var msg119 = msg("UI_CMD_EXECUTED", dup108);
      
      var part210 = match("MESSAGE#144:UI_CMD_EXECUTED:01_Login", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"login %{fld11}\"", processor_chain([
      	dup69,
      	dup84,
      	dup3,
      	dup4,
      	dup6,
      	dup86,
      ]));
      
      var msg120 = msg("UI_CMD_EXECUTED:01_Login", part210);
      
      var part211 = match("MESSAGE#145:UI_CMD_EXECUTED:01_Logout", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"logout %{fld11}\"", processor_chain([
      	dup71,
      	dup84,
      	dup3,
      	dup4,
      	dup72,
      	dup87,
      ]));
      
      var msg121 = msg("UI_CMD_EXECUTED:01_Logout", part211);
      
      var part212 = match("MESSAGE#146:UI_CMD_EXECUTED:01", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action}\"", processor_chain([
      	dup88,
      	dup89,
      	dup3,
      	dup4,
      ]));
      
      var msg122 = msg("UI_CMD_EXECUTED:01", part212);
      
      var select58 = linear_select([
      	msg116,
      	msg117,
      	msg118,
      	msg119,
      	msg120,
      	msg121,
      	msg122,
      ]);
      
      var part213 = match("MESSAGE#110:SSLVPN_NONHTTP_RESOURCEACCESS_DENIED/2", "nwparser.p0", "%{daddr}:%{dport->} - Source %{saddr}:%{sport->} - Destination %{dtransaddr}:%{dtransport->} - Total_bytes_send %{comp_sbytes->} - Total_bytes_recv %{comp_rbytes->} - Denied_by_policy \"%{fld2}\" - Group(s) \"%{group}\"");
      
      var all49 = all_match({
      	processors: [
      		dup73,
      		dup105,
      		part213,
      	],
      	on_success: processor_chain([
      		dup11,
      		dup51,
      		dup8,
      		dup4,
      	]),
      });
      
      var msg123 = msg("SSLVPN_NONHTTP_RESOURCEACCESS_DENIED", all49);
      
      var part214 = match("MESSAGE#111:EVENT_VRIDINIT", "nwparser.payload", "%{fld1->} - State Init", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg124 = msg("EVENT_VRIDINIT", part214);
      
      var part215 = match("MESSAGE#112:CLUSTERD_Message:01", "nwparser.payload", "\"REC: status %{info->} from client %{fld1->} for ID %{id}\"", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg125 = msg("CLUSTERD_Message:01", part215);
      
      var part216 = match("MESSAGE#113:CLUSTERD_Message:02/1_0", "nwparser.p0", "%{info}(%{saddr}) port(%{sport}) msglen(%{fld1}) rcv(%{packets}) R(%{result}) \" ");
      
      var select59 = linear_select([
      	part216,
      	dup90,
      ]);
      
      var all50 = all_match({
      	processors: [
      		dup74,
      		select59,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var msg126 = msg("CLUSTERD_Message:02", all50);
      
      var select60 = linear_select([
      	msg125,
      	msg126,
      ]);
      
      var part217 = match("MESSAGE#114:IPSEC_Message/0_0", "nwparser.payload", "\"crypto: driver %{fld1->} registers alg %{fld2->} flags %{fld3->} maxoplen %{fld4->} \"");
      
      var part218 = match("MESSAGE#114:IPSEC_Message/0_1", "nwparser.payload", " \"%{info->} \"");
      
      var select61 = linear_select([
      	part217,
      	part218,
      ]);
      
      var all51 = all_match({
      	processors: [
      		select61,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var msg127 = msg("IPSEC_Message", all51);
      
      var part219 = match("MESSAGE#115:NSNETSVC_Message", "nwparser.payload", "\"%{event_type}: %{info->} \"", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg128 = msg("NSNETSVC_Message", part219);
      
      var part220 = match("MESSAGE#116:SSLVPN_HTTP_RESOURCEACCESS_DENIED/2", "nwparser.p0", "%{} %{username}- Vserver %{daddr}:%{dport->} - Total_bytes_send %{sbytes->} - Remote_host %{hostname->} - Denied_url %{url->} - Denied_by_policy %{policyname->} - Group(s) \"%{group}\"");
      
      var all52 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		part220,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var msg129 = msg("SSLVPN_HTTP_RESOURCEACCESS_DENIED", all52);
      
      var part221 = match("MESSAGE#117:NSNETSVC_REQ_PARSE_ERROR/0", "nwparser.payload", "Client %{saddr->} - Profile %{p0}");
      
      var part222 = match("MESSAGE#117:NSNETSVC_REQ_PARSE_ERROR/1_0", "nwparser.p0", "%{info}, %{event_description->} - URL");
      
      var part223 = match("MESSAGE#117:NSNETSVC_REQ_PARSE_ERROR/1_1", "nwparser.p0", "%{info->} - %{event_description->} - URL");
      
      var select62 = linear_select([
      	part222,
      	part223,
      ]);
      
      var all53 = all_match({
      	processors: [
      		part221,
      		select62,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup4,
      	]),
      });
      
      var msg130 = msg("NSNETSVC_REQ_PARSE_ERROR", all53);
      
      var part224 = match("MESSAGE#118:Source:01/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Vserver %{daddr}:%{dport->} - NatIP %{stransaddr}:%{stransport->} - Destination %{dtransaddr}:%{dtransport->} - Delink Time %{fld11->} %{p0}");
      
      var part225 = match("MESSAGE#118:Source:01/1_0", "nwparser.p0", "GMT - Total_bytes_send %{sbytes->} - Total_bytes_recv %{p0}");
      
      var part226 = match("MESSAGE#118:Source:01/1_1", "nwparser.p0", "- Total_bytes_send %{sbytes->} - Total_bytes_recv %{p0}");
      
      var part227 = match("MESSAGE#118:Source:01/1_2", "nwparser.p0", "GMT Total_bytes_send %{sbytes->} - Total_bytes_recv %{p0}");
      
      var part228 = match("MESSAGE#118:Source:01/1_3", "nwparser.p0", "Total_bytes_send %{sbytes->} - Total_bytes_recv %{p0}");
      
      var select63 = linear_select([
      	part225,
      	part226,
      	part227,
      	part228,
      ]);
      
      var part229 = match_copy("MESSAGE#118:Source:01/2", "nwparser.p0", "rbytes");
      
      var all54 = all_match({
      	processors: [
      		part224,
      		select63,
      		part229,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup79,
      	]),
      });
      
      var msg131 = msg("Source:01", all54);
      
      var all55 = all_match({
      	processors: [
      		dup80,
      		dup107,
      		dup106,
      		dup78,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup61,
      		dup62,
      	]),
      });
      
      var msg132 = msg("Source:02", all55);
      
      var select64 = linear_select([
      	msg131,
      	msg132,
      ]);
      
      var part230 = match("MESSAGE#120:User", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{fld1}\" - Status \"%{result}\"", processor_chain([
      	dup2,
      ]));
      
      var msg133 = msg("User", part230);
      
      var part231 = match("MESSAGE#121:SPCBId", "nwparser.payload", "SPCBId %{sessionid->} - ClientIP %{saddr->} - ClientPort %{sport->} - VserverServiceIP %{daddr->} - VserverServicePort %{dport->} - ClientVersion %{s_sslver->} - CipherSuite \"%{s_cipher}\" - %{result}", processor_chain([
      	dup11,
      	dup40,
      	dup8,
      	dup41,
      ]));
      
      var msg134 = msg("SPCBId", part231);
      
      var msg135 = msg("APPFW_COOKIE", dup109);
      
      var msg136 = msg("APPFW_CSRF_TAG", dup109);
      
      var msg137 = msg("APPFW_STARTURL", dup109);
      
      var msg138 = msg("APPFW_FIELDCONSISTENCY", dup109);
      
      var msg139 = msg("APPFW_REFERER_HEADER", dup109);
      
      var part232 = match("MESSAGE#127:APPFW_SIGNATURE_MATCH", "nwparser.payload", "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr->} spt=%{sport->} method=%{web_method->} request=%{url->} msg=%{info->} cn1=%{fld2->} cn2=%{fld3->} cs1=%{policyname->} cs2=%{fld5->} cs3=%{fld6->} cs4=%{severity->} cs5=%{fld8->} cs6=%{fld9->} act=%{action}", processor_chain([
      	dup9,
      	dup91,
      ]));
      
      var msg140 = msg("APPFW_SIGNATURE_MATCH", part232);
      
      var msg141 = msg("AF_400_RESP", dup110);
      
      var msg142 = msg("AF_MALFORMED_REQ_ERR", dup110);
      
      var part233 = tagval("MESSAGE#130:CITRIX_TVM", "nwparser.payload", tvm, {
      	"act": "action",
      	"cn1": "fld2",
      	"cn2": "fld3",
      	"cs1": "policyname",
      	"cs2": "fld5",
      	"cs4": "severity",
      	"cs5": "fld8",
      	"method": "web_method",
      	"msg": "info",
      	"request": "url",
      	"spt": "sport",
      	"src": "saddr",
      }, processor_chain([
      	dup11,
      	dup91,
      	setf("vid","hfld1"),
      	setf("msg_id","hfld1"),
      	lookup({
      		dest: "nwparser.event_cat",
      		map: map_getEventLegacyCategory,
      		key: field("action"),
      	}),
      	lookup({
      		dest: "nwparser.event_cat_name",
      		map: map_getEventLegacyCategoryName,
      		key: field("event_cat"),
      	}),
      ]));
      
      var msg143 = msg("CITRIX_TVM", part233);
      
      var part234 = match("MESSAGE#131:APPFW_APPFW_POLICY_HIT", "nwparser.payload", "%{saddr->} %{fld1->} %{fld2->} %{fld3->} %{url->} %{event_description}", processor_chain([
      	dup9,
      	dup40,
      	dup3,
      	dup4,
      ]));
      
      var msg144 = msg("APPFW_APPFW_POLICY_HIT", part234);
      
      var part235 = match("MESSAGE#132:APPFW_APPFW_CONTENT_TYPE", "nwparser.payload", "%{saddr->} %{fld1->} %{fld2->} %{rule_group->} %{url->} Unknown content-type header value=%{fld4->} %{info->} \u003c\u003c%{disposition}>", processor_chain([
      	dup9,
      	dup91,
      	dup4,
      ]));
      
      var msg145 = msg("APPFW_APPFW_CONTENT_TYPE", part235);
      
      var part236 = match("MESSAGE#133:APPFW_RESP_APPFW_XML_WSI_ERR_BODY_ENV_NAMESPACE", "nwparser.payload", "%{saddr->} %{fld1->} %{fld2->} %{rule_group->} %{url->} WSI check failed: %{fld4}: %{info->} \u003c\u003c%{disposition}>", processor_chain([
      	dup9,
      	dup91,
      	dup4,
      ]));
      
      var msg146 = msg("APPFW_RESP_APPFW_XML_WSI_ERR_BODY_ENV_NAMESPACE", part236);
      
      var part237 = match("MESSAGE#134:APPFW_APPFW_REFERER_HEADER", "nwparser.payload", "%{saddr->} %{fld2->} %{fld3->} %{rule_group->} %{url->} Referer header check failed: referer header URL '%{web_referer}' not in Start URL or closure list \u003c\u003c%{disposition}>", processor_chain([
      	dup9,
      	dup40,
      	dup3,
      	dup4,
      	setc("event_description","referer header URL not in Start URL or closure list"),
      ]));
      
      var msg147 = msg("APPFW_APPFW_REFERER_HEADER", part237);
      
      var part238 = match("MESSAGE#141:RESPONDER_Message", "nwparser.payload", "\"URL%{url}Client IP%{hostip}Client Dest%{fld1}", processor_chain([
      	dup9,
      	dup3,
      	dup4,
      ]));
      
      var msg148 = msg("RESPONDER_Message", part238);
      
      var part239 = match("MESSAGE#142:RESPONDER_Message:01", "nwparser.payload", "\"NSRateLimit=%{filter}, ClientIP=%{saddr}\"", processor_chain([
      	dup9,
      	dup3,
      	dup4,
      ]));
      
      var msg149 = msg("RESPONDER_Message:01", part239);
      
      var select65 = linear_select([
      	msg148,
      	msg149,
      ]);
      
      var part240 = match("MESSAGE#147:APPFW_AF_MALFORMED_REQ_ERR", "nwparser.payload", "%{saddr->} %{fld1->} - %{fld2->} - %{event_description->} \u003c\u003c%{disposition}>", processor_chain([
      	dup11,
      	dup3,
      	dup4,
      ]));
      
      var msg150 = msg("APPFW_AF_MALFORMED_REQ_ERR", part240);
      
      var part241 = match("MESSAGE#148:APPFW_APPFW_SIGNATURE_MATCH", "nwparser.payload", "%{saddr->} %{fld1->} - %{fld2->} - %{rule_group->} %{url->} %{event_description->} rule ID %{rule_uid}: %{info->} \u003c\u003c%{disposition}>", processor_chain([
      	dup9,
      	domain("web_domain","url"),
      	root("web_root","url"),
      	page("webpage","url"),
      	setf("filename","webpage"),
      	dup3,
      	dup4,
      ]));
      
      var msg151 = msg("APPFW_APPFW_SIGNATURE_MATCH", part241);
      
      var part242 = match("MESSAGE#149:APPFW_APPFW_SIGNATURE_MATCH:01", "nwparser.payload", "%{saddr->} %{fld1->} %{fld2->} %{rule_group->} %{url->} Signature violation rule ID %{rule_uid}: %{info->} \u003c\u003c%{disposition}>", processor_chain([
      	dup9,
      	dup91,
      	dup4,
      	setc("event_description","Signature violation"),
      ]));
      
      var msg152 = msg("APPFW_APPFW_SIGNATURE_MATCH:01", part242);
      
      var select66 = linear_select([
      	msg151,
      	msg152,
      ]);
      
      var part243 = match("MESSAGE#150:GUI_CMD_EXECUTED:01", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action}\" -serverIP %{daddr->} -serverPort %{dport->} -logLevel %{fld1->} -dateFormat %{fld2->} -logFacility %{fld3->} -tcp %{fld4->} -acl %{fld5->} -timeZone %{fld6->} -userDefinedAuditlog %{fld7->} -appflowExport %{fld8}\" - Status \"%{disposition}\"", processor_chain([
      	dup88,
      	dup89,
      	dup3,
      	dup4,
      ]));
      
      var msg153 = msg("GUI_CMD_EXECUTED:01", part243);
      
      var part244 = match("MESSAGE#151:GUI_CMD_EXECUTED:02", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action->} -priority %{fld1->} -devno %{fld2}\" - Status \"%{disposition}\"", processor_chain([
      	dup88,
      	dup89,
      	dup3,
      	dup4,
      ]));
      
      var msg154 = msg("GUI_CMD_EXECUTED:02", part244);
      
      var part245 = match("MESSAGE#152:GUI_CMD_EXECUTED:Login", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"login %{fld11}\" - Status \"Success%{info}\"", processor_chain([
      	dup69,
      	dup92,
      	dup3,
      	dup4,
      	dup85,
      	dup6,
      	dup86,
      ]));
      
      var msg155 = msg("GUI_CMD_EXECUTED:Login", part245);
      
      var part246 = match("MESSAGE#153:GUI_CMD_EXECUTED:Logout", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"logout %{fld11}\" - Status \"Success%{info}\"", processor_chain([
      	dup71,
      	dup92,
      	dup3,
      	dup4,
      	dup85,
      	dup72,
      	dup87,
      ]));
      
      var msg156 = msg("GUI_CMD_EXECUTED:Logout", part246);
      
      var msg157 = msg("GUI_CMD_EXECUTED", dup108);
      
      var part247 = match("MESSAGE#155:GUI_CMD_EXECUTED:03", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action->} - Status \"%{disposition}\" - Message \"%{info}\"", processor_chain([
      	dup88,
      	dup89,
      	dup4,
      ]));
      
      var msg158 = msg("GUI_CMD_EXECUTED:03", part247);
      
      var select67 = linear_select([
      	msg153,
      	msg154,
      	msg155,
      	msg156,
      	msg157,
      	msg158,
      ]);
      
      var msg159 = msg("CLI_CMD_EXECUTED", dup108);
      
      var part248 = match("MESSAGE#157:API_CMD_EXECUTED", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action}\" - Status \"%{disposition}\"", processor_chain([
      	dup88,
      	setc("event_description","API command executed in NetScaler"),
      	dup3,
      	dup4,
      ]));
      
      var msg160 = msg("API_CMD_EXECUTED", part248);
      
      var part249 = match("MESSAGE#158:AAA_Message/1_0", "nwparser.p0", "%{result->} for user %{username->} = %{fld1->} \"");
      
      var part250 = match("MESSAGE#158:AAA_Message/1_1", "nwparser.p0", "%{info->} \"");
      
      var select68 = linear_select([
      	part249,
      	part250,
      ]);
      
      var all56 = all_match({
      	processors: [
      		dup93,
      		select68,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var msg161 = msg("AAA_Message", all56);
      
      var part251 = match("MESSAGE#159:AAATM_Message:04", "nwparser.payload", "\"%{event_type}: created session for \u003c\u003c%{domain}> with cookie: \u003c\u003c%{web_cookie}>\"", processor_chain([
      	dup9,
      	dup91,
      	dup4,
      ]));
      
      var msg162 = msg("AAATM_Message:04", part251);
      
      var part252 = match("MESSAGE#160:AAATM_Message/1_0", "nwparser.p0", "%{fld1->} for user %{username->} \"");
      
      var select69 = linear_select([
      	part252,
      	dup90,
      ]);
      
      var all57 = all_match({
      	processors: [
      		dup93,
      		select69,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
      var msg163 = msg("AAATM_Message", all57);
      
      var part253 = match("MESSAGE#161:AAATM_Message:01", "nwparser.payload", "\"%{fld1->} creating session %{info}\"", processor_chain([
      	dup9,
      	dup4,
      	setc("event_type","creating session"),
      ]));
      
      var msg164 = msg("AAATM_Message:01", part253);
      
      var part254 = match("MESSAGE#162:AAATM_Message:02", "nwparser.payload", "\"cookie idx is %{fld1}, %{info}\"", processor_chain([
      	dup9,
      	dup4,
      	setc("event_type","cookie idx"),
      ]));
      
      var msg165 = msg("AAATM_Message:02", part254);
      
      var part255 = match("MESSAGE#163:AAATM_Message:03", "nwparser.payload", "\"sent request to %{fld1->} for authentication, user \u003c\u003c%{domain}\\%{username}>, client ip %{saddr}\"", processor_chain([
      	setc("eventcategory","1304000000"),
      	dup4,
      	setc("event_type","sent request"),
      ]));
      
      var msg166 = msg("AAATM_Message:03", part255);
      
      var part256 = match("MESSAGE#164:AAATM_Message:05", "nwparser.payload", "\"authentication succeeded for user \u003c\u003c%{domain}\\%{username}>, client ip %{saddr}, setting up session\"", processor_chain([
      	setc("eventcategory","1302000000"),
      	dup4,
      	setc("event_type","setting up session"),
      ]));
      
      var msg167 = msg("AAATM_Message:05", part256);
      
      var msg168 = msg("AAATM_Message:06", dup111);
      
      var select70 = linear_select([
      	msg162,
      	msg163,
      	msg164,
      	msg165,
      	msg166,
      	msg167,
      	msg168,
      ]);
      
      var part257 = match("MESSAGE#166:AAATM_HTTPREQUEST/0", "nwparser.payload", "Context %{fld1->} - SessionId: %{sessionid}- %{event_computer->} User %{username->} : Group(s) %{group->} : Vserver %{daddr}:%{dport->} - %{fld2->} %{p0}");
      
      var part258 = match("MESSAGE#166:AAATM_HTTPREQUEST/1_0", "nwparser.p0", "%{timezone}: SSO is %{fld3->} : %{p0}");
      
      var part259 = match("MESSAGE#166:AAATM_HTTPREQUEST/1_1", "nwparser.p0", "%{timezone->} %{p0}");
      
      var select71 = linear_select([
      	part258,
      	part259,
      ]);
      
      var part260 = match("MESSAGE#166:AAATM_HTTPREQUEST/2", "nwparser.p0", "%{web_method->} %{url->} %{fld4}");
      
      var all58 = all_match({
      	processors: [
      		part257,
      		select71,
      		part260,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      		date_time({
      			dest: "effective_time",
      			args: ["fld2"],
      			fmts: [
      				[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      			],
      		}),
      		setc("event_description","AAATM HTTP Request"),
      	]),
      });
      
      var msg169 = msg("AAATM_HTTPREQUEST", all58);
      
      var msg170 = msg("SSLVPN_REMOVE_SESSION_ERR", dup114);
      
      var msg171 = msg("SSLVPN_REMOVE_SESSION", dup114);
      
      var msg172 = msg("SSLVPN_REMOVE_SESSION_INFO", dup114);
      
      var part261 = match("MESSAGE#170:ICA_NETWORK_UPDATE", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - ica_rtt %{fld5->} - clientside_rxbytes %{rbytes}- clientside_txbytes %{sbytes->} - clientside_packet_retransmits %{fld6->} - serverside_packet_retransmits %{fld7->} - clientside_rtt %{fld8->} - serverside_rtt %{fld9->} - clientside_jitter %{fld10->} - serverside_jitter %{fld11}", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg173 = msg("ICA_NETWORK_UPDATE", part261);
      
      var part262 = match("MESSAGE#171:ICA_CHANNEL_UPDATE", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - channel_update_begin %{fld5->} - channel_update_end %{fld6->} - channel_id_1 %{fld7->} - channel_id_1_val %{fld8->} - channel_id_2 %{fld9->} - channel_id_2_val %{fld10->} -channel_id_3 %{fld11->} - channel_id_3_val %{fld12->} - channel_id_4 %{fld13->} - channel_id_4_val %{fld14->} -channel_id_5 %{fld15->} - channel_id_5_val %{fld16}", processor_chain([
      	dup9,
      	date_time({
      		dest: "starttime",
      		args: ["fld5"],
      		fmts: [
      			[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		],
      	}),
      	date_time({
      		dest: "endtime",
      		args: ["fld6"],
      		fmts: [
      			[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		],
      	}),
      	dup4,
      ]));
      
      var msg174 = msg("ICA_CHANNEL_UPDATE", part262);
      
      var part263 = match("MESSAGE#172:ICA_SESSION_UPDATE", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - nsica_session_status %{fld5->} - nsica_session_client_ip %{saddr->} - nsica_session_client_port %{sport->} - nsica_session_server_ip %{daddr->} - nsica_session_server_port %{dport->} - nsica_session_reconnect_count %{fld6->} - nsica_session_acr_count %{fld7->} - connection_priority %{fld8->} - timestamp %{fld9}", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg175 = msg("ICA_SESSION_UPDATE", part263);
      
      var msg176 = msg("ICA_Message", dup111);
      
      var part264 = match("MESSAGE#174:ICA_SESSION_SETUP", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - session_setup_time %{fld5->} - client_ip %{saddr->} - client_type %{fld6->} - client_launcher %{fld7->} - client_version %{version->} - client_hostname %{shost->} - domain_name %{domain->} - server_name %{dhost->} - connection_priority %{fld8}", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var msg177 = msg("ICA_SESSION_SETUP", part264);
      
      var part265 = match("MESSAGE#175:ICA_APPLICATION_LAUNCH", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - launch_mechanism %{fld5->} - app_launch_time %{fld6->} - app_process_id %{fld7->} - app_name %{fld8->} - module_path %{filename}", processor_chain([
      	dup9,
      	date_time({
      		dest: "starttime",
      		args: ["fld6"],
      		fmts: [
      			[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		],
      	}),
      	dup4,
      ]));
      
      var msg178 = msg("ICA_APPLICATION_LAUNCH", part265);
      
      var part266 = match("MESSAGE#176:ICA_SESSION_TERMINATE", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - session_end_time %{fld5}", processor_chain([
      	dup9,
      	date_time({
      		dest: "endtime",
      		args: ["fld5"],
      		fmts: [
      			[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		],
      	}),
      	dup4,
      ]));
      
      var msg179 = msg("ICA_SESSION_TERMINATE", part266);
      
      var part267 = match("MESSAGE#177:ICA_APPLICATION_TERMINATE", "nwparser.payload", "session_guid %{fld1->} - device_serial_number %{fld2->} - client_cookie %{fld3->} - flags %{fld4->} - app_termination_type %{fld5->} - app_process_id %{fld6->} - app_termination_time %{fld7}", processor_chain([
      	dup9,
      	date_time({
      		dest: "endtime",
      		args: ["fld7"],
      		fmts: [
      			[dG,dc("/"),dF,dc("/"),dW,dc(":"),dH,dc(":"),dU,dc(":"),dO],
      		],
      	}),
      	dup4,
      ]));
      
      var msg180 = msg("ICA_APPLICATION_TERMINATE", part267);
      
      var all59 = all_match({
      	processors: [
      		dup94,
      		dup112,
      		dup97,
      	],
      	on_success: processor_chain([
      		setc("eventcategory","1801010100"),
      		dup4,
      	]),
      });
      
      var msg181 = msg("SSLVPN_REMOVE_SESSION_DEBUG", all59);
      
      var part268 = match("MESSAGE#181:AAATM_LOGIN/4", "nwparser.p0", "%{daddr}:%{dport->} - Browser_type %{user_agent}- Group(s) \"%{group}\"");
      
      var all60 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		dup66,
      		dup105,
      		part268,
      	],
      	on_success: processor_chain([
      		dup69,
      		dup6,
      		dup7,
      		dup4,
      	]),
      });
      
      var msg182 = msg("AAATM_LOGIN", all60);
      
      var part269 = match("MESSAGE#182:AAATM_LOGOUT/7", "nwparser.p0", "%{duration_string->} - Http_resources_accessed %{fld3->} - Total_TCP_connections %{fld5->} - Total_policies_allowed %{fld7->} - Total_policies_denied %{fld8->} - Total_bytes_send %{sbytes->} - Total_bytes_recv %{rbytes->} - Total_compressedbytes_send %{fld12->} - Total_compressedbytes_recv %{fld13->} - Compression_ratio_send %{dclass_ratio1->} - Compression_ratio_recv %{dclass_ratio2->} - LogoutMethod \"%{result}\" - Group(s) \"%{group}\"");
      
      var all61 = all_match({
      	processors: [
      		dup48,
      		dup104,
      		dup66,
      		dup105,
      		dup70,
      		dup102,
      		dup103,
      		part269,
      	],
      	on_success: processor_chain([
      		dup71,
      		dup72,
      		dup7,
      		dup4,
      		dup59,
      		dup60,
      		dup61,
      		dup62,
      	]),
      });
      
      var msg183 = msg("AAATM_LOGOUT", all61);
      
      var msg184 = msg("EVENT_LOGINFAILURE", dup101);
      
      var chain1 = processor_chain([
      	select2,
      	msgid_select({
      		"AAATM_HTTPREQUEST": msg169,
      		"AAATM_LOGIN": msg182,
      		"AAATM_LOGOUT": msg183,
      		"AAATM_Message": select70,
      		"AAA_EXTRACTED_GROUPS": msg1,
      		"AAA_LOGIN_FAILED": msg2,
      		"AAA_Message": msg161,
      		"ACL_ACL_PKT_LOG": msg3,
      		"AF_400_RESP": msg141,
      		"AF_MALFORMED_REQ_ERR": msg142,
      		"API_CMD_EXECUTED": msg160,
      		"APPFW_AF_400_RESP": select16,
      		"APPFW_AF_MALFORMED_REQ_ERR": msg150,
      		"APPFW_AF_MEMORY_ERR": msg23,
      		"APPFW_APPFW_BUFFEROVERFLOW_COOKIE": msg4,
      		"APPFW_APPFW_BUFFEROVERFLOW_HDR": msg5,
      		"APPFW_APPFW_BUFFEROVERFLOW_URL": select4,
      		"APPFW_APPFW_CONTENT_TYPE": msg145,
      		"APPFW_APPFW_COOKIE": msg8,
      		"APPFW_APPFW_CSRF_TAG": select17,
      		"APPFW_APPFW_DENYURL": msg9,
      		"APPFW_APPFW_FIELDCONSISTENCY": msg10,
      		"APPFW_APPFW_FIELDFORMAT": msg11,
      		"APPFW_APPFW_POLICY_HIT": msg144,
      		"APPFW_APPFW_REFERER_HEADER": msg147,
      		"APPFW_APPFW_SAFECOMMERCE": msg14,
      		"APPFW_APPFW_SAFECOMMERCE_XFORM": msg15,
      		"APPFW_APPFW_SAFEOBJECT": msg20,
      		"APPFW_APPFW_SIGNATURE_MATCH": select66,
      		"APPFW_APPFW_SQL": select11,
      		"APPFW_APPFW_STARTURL": msg16,
      		"APPFW_APPFW_XSS": msg17,
      		"APPFW_COOKIE": msg135,
      		"APPFW_CSRF_TAG": msg136,
      		"APPFW_FIELDCONSISTENCY": msg138,
      		"APPFW_Message": select19,
      		"APPFW_REFERER_HEADER": msg139,
      		"APPFW_RESP_APPFW_XML_WSI_ERR_BODY_ENV_NAMESPACE": msg146,
      		"APPFW_SIGNATURE_MATCH": msg140,
      		"APPFW_STARTURL": msg137,
      		"CITRIX_TVM": msg143,
      		"CLI_CMD_EXECUTED": msg159,
      		"CLUSTERD_Message": select60,
      		"DR_HA_Message": msg27,
      		"EVENT_ALERTENDED": msg28,
      		"EVENT_ALERTSTARTED": msg29,
      		"EVENT_CONFIGEND": msg30,
      		"EVENT_CONFIGSTART": msg31,
      		"EVENT_DEVICEDOWN": msg32,
      		"EVENT_DEVICEOFS": msg33,
      		"EVENT_DEVICEUP": msg34,
      		"EVENT_LOGINFAILURE": msg184,
      		"EVENT_MONITORDOWN": msg35,
      		"EVENT_MONITORUP": msg36,
      		"EVENT_NICRESET": msg37,
      		"EVENT_ROUTEDOWN": msg38,
      		"EVENT_ROUTEUP": msg39,
      		"EVENT_STARTCPU": msg40,
      		"EVENT_STARTSAVECONFIG": msg41,
      		"EVENT_STARTSYS": msg42,
      		"EVENT_STATECHANGE": select22,
      		"EVENT_STOPSAVECONFIG": msg46,
      		"EVENT_STOPSYS": msg47,
      		"EVENT_UNKNOWN": msg48,
      		"EVENT_VRIDINIT": msg124,
      		"GUI_CMD_EXECUTED": select67,
      		"ICA_APPLICATION_LAUNCH": msg178,
      		"ICA_APPLICATION_TERMINATE": msg180,
      		"ICA_CHANNEL_UPDATE": msg174,
      		"ICA_Message": msg176,
      		"ICA_NETWORK_UPDATE": msg173,
      		"ICA_SESSION_SETUP": msg177,
      		"ICA_SESSION_TERMINATE": msg179,
      		"ICA_SESSION_UPDATE": msg175,
      		"IPSEC_Message": msg127,
      		"NSNETSVC_Message": msg128,
      		"NSNETSVC_REQ_PARSE_ERROR": msg130,
      		"PITBOSS_Message": select28,
      		"RESPONDER_Message": select65,
      		"ROUTING_Message": select29,
      		"ROUTING_ZEBOS_CMD_EXECUTED": msg57,
      		"SNMP_TRAP_SENT": select42,
      		"SPCBId": msg134,
      		"SSLLOG_SSL_HANDSHAKE_FAILURE": msg94,
      		"SSLLOG_SSL_HANDSHAKE_ISSUERNAME": msg97,
      		"SSLLOG_SSL_HANDSHAKE_SUBJECTNAME": msg96,
      		"SSLLOG_SSL_HANDSHAKE_SUCCESS": msg95,
      		"SSLVPN_AAAEXTRACTED_GROUPS": msg98,
      		"SSLVPN_CLISEC_CHECK": msg93,
      		"SSLVPN_CLISEC_EXP_EVAL": msg99,
      		"SSLVPN_HTTPREQUEST": msg100,
      		"SSLVPN_HTTP_RESOURCEACCESS_DENIED": msg129,
      		"SSLVPN_ICAEND_CONNSTAT": select51,
      		"SSLVPN_ICASTART": select53,
      		"SSLVPN_LOGIN": msg103,
      		"SSLVPN_LOGOUT": msg104,
      		"SSLVPN_Message": msg109,
      		"SSLVPN_NONHTTP_RESOURCEACCESS_DENIED": msg123,
      		"SSLVPN_REMOVE_SESSION": msg171,
      		"SSLVPN_REMOVE_SESSION_DEBUG": msg181,
      		"SSLVPN_REMOVE_SESSION_ERR": msg170,
      		"SSLVPN_REMOVE_SESSION_INFO": msg172,
      		"SSLVPN_TCPCONNSTAT": msg110,
      		"SSLVPN_TCPCONN_TIMEDOUT": msg105,
      		"SSLVPN_UDPFLOWSTAT": msg106,
      		"Source": select64,
      		"TCP_CONN_DELINK": msg111,
      		"TCP_CONN_TERMINATE": select55,
      		"TCP_NAT_OTHERCONN_DELINK": msg115,
      		"TCP_OTHERCONN_DELINK": msg114,
      		"UI_CMD_EXECUTED": select58,
      		"User": msg133,
      	}),
      ]);
      
      var part270 = match("MESSAGE#6:APPFW_APPFW_COOKIE/0", "nwparser.payload", "%{saddr->} %{p0}");
      
      var part271 = match("MESSAGE#7:APPFW_APPFW_DENYURL/2", "nwparser.p0", "%{url->} \u003c\u003c%{disposition}>");
      
      var part272 = match("MESSAGE#8:APPFW_APPFW_FIELDCONSISTENCY/2", "nwparser.p0", "%{url->} %{info->} \u003c\u003c%{disposition}>");
      
      var part273 = match("MESSAGE#20:APPFW_Message/0", "nwparser.payload", "\"%{p0}");
      
      var part274 = match("MESSAGE#23:DR_HA_Message/1_0", "nwparser.p0", "HASTATE %{p0}");
      
      var part275 = match("MESSAGE#23:DR_HA_Message/1_1", "nwparser.p0", "%{network_service}: %{p0}");
      
      var part276 = match("MESSAGE#23:DR_HA_Message/2", "nwparser.p0", "%{info}\"");
      
      var part277 = match("MESSAGE#24:EVENT_ALERTENDED/1_0", "nwparser.p0", "for %{dclass_counter1}");
      
      var part278 = match_copy("MESSAGE#24:EVENT_ALERTENDED/1_1", "nwparser.p0", "space");
      
      var part279 = match("MESSAGE#28:EVENT_DEVICEDOWN/0", "nwparser.payload", "%{obj_type->} \"%{obj_name}\"%{p0}");
      
      var part280 = match("MESSAGE#28:EVENT_DEVICEDOWN/1_0", "nwparser.p0", " - State %{event_state}");
      
      var part281 = match_copy("MESSAGE#28:EVENT_DEVICEDOWN/1_1", "nwparser.p0", "");
      
      var part282 = match("MESSAGE#31:EVENT_MONITORDOWN/0", "nwparser.payload", "%{obj_type->} %{p0}");
      
      var part283 = match("MESSAGE#31:EVENT_MONITORDOWN/1_0", "nwparser.p0", "%{obj_name->} - State %{event_state}");
      
      var part284 = match("MESSAGE#31:EVENT_MONITORDOWN/1_2", "nwparser.p0", "%{obj_name}");
      
      var part285 = match("MESSAGE#45:PITBOSS_Message1/0", "nwparser.payload", "\" %{p0}");
      
      var part286 = match("MESSAGE#45:PITBOSS_Message1/2", "nwparser.p0", "%{info}\"");
      
      var part287 = match("MESSAGE#54:SNMP_TRAP_SENT7/3_3", "nwparser.p0", "sysIpAddress = %{hostip})");
      
      var part288 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/0", "nwparser.payload", "%{} %{p0}");
      
      var part289 = match("MESSAGE#86:SSLLOG_SSL_HANDSHAKE_FAILURE/1_0", "nwparser.p0", "ClientIP %{p0}");
      
      var part290 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_0", "nwparser.p0", "\" %{fld10->} GMT\" - End_time %{p0}");
      
      var part291 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_1", "nwparser.p0", "\" %{fld10}\" - End_time %{p0}");
      
      var part292 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/1_2", "nwparser.p0", "%{fld10->} - End_time %{p0}");
      
      var part293 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_0", "nwparser.p0", "\" %{fld11->} GMT\" - Duration %{p0}");
      
      var part294 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_1", "nwparser.p0", "\" %{fld11}\" - Duration %{p0}");
      
      var part295 = match("MESSAGE#93:SSLVPN_ICAEND_CONNSTAT/2_2", "nwparser.p0", "%{fld11->} - Duration %{p0}");
      
      var part296 = match("MESSAGE#94:SSLVPN_LOGIN/1_0", "nwparser.p0", "Context %{fld1->} - SessionId: %{sessionid}- User %{p0}");
      
      var part297 = match("MESSAGE#94:SSLVPN_LOGIN/1_1", "nwparser.p0", "Context %{fld1->} - User %{p0}");
      
      var part298 = match("MESSAGE#94:SSLVPN_LOGIN/1_2", "nwparser.p0", "User %{p0}");
      
      var part299 = match("MESSAGE#94:SSLVPN_LOGIN/2", "nwparser.p0", "%{} %{username}- Client_ip %{saddr->} - Nat_ip %{p0}");
      
      var part300 = match("MESSAGE#94:SSLVPN_LOGIN/3_0", "nwparser.p0", "\"%{stransaddr}\" - Vserver %{p0}");
      
      var part301 = match("MESSAGE#94:SSLVPN_LOGIN/3_1", "nwparser.p0", "%{stransaddr->} - Vserver %{p0}");
      
      var part302 = match("MESSAGE#95:SSLVPN_LOGOUT/4", "nwparser.p0", "%{daddr}:%{dport->} - Start_time %{p0}");
      
      var part303 = match("MESSAGE#97:SSLVPN_UDPFLOWSTAT/0", "nwparser.payload", "Context %{fld1->} - SessionId: %{sessionid}- User %{username->} - Client_ip %{hostip->} - Nat_ip %{p0}");
      
      var part304 = match("MESSAGE#100:SSLVPN_Message/0", "nwparser.payload", "%{}\"%{p0}");
      
      var part305 = match("MESSAGE#102:TCP_CONN_DELINK/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Vserver %{daddr}:%{dport->} - NatIP %{stransaddr}:%{stransport->} - Destination %{dtransaddr}:%{dtransport->} - Delink Time %{p0}");
      
      var part306 = match("MESSAGE#102:TCP_CONN_DELINK/1_0", "nwparser.p0", "%{fld11->} GMT - Total_bytes_send %{p0}");
      
      var part307 = match("MESSAGE#102:TCP_CONN_DELINK/1_1", "nwparser.p0", "%{fld11->} - Total_bytes_send %{p0}");
      
      var part308 = match("MESSAGE#102:TCP_CONN_DELINK/2", "nwparser.p0", "%{sbytes->} - Total_bytes_recv %{rbytes}");
      
      var part309 = match("MESSAGE#103:TCP_CONN_TERMINATE/0", "nwparser.payload", "Source %{saddr}:%{sport->} - Destination %{daddr}:%{dport->} - Start Time %{p0}");
      
      var part310 = match("MESSAGE#103:TCP_CONN_TERMINATE/1_0", "nwparser.p0", "%{fld10->} GMT - End Time %{p0}");
      
      var part311 = match("MESSAGE#103:TCP_CONN_TERMINATE/1_1", "nwparser.p0", "%{fld10->} - End Time %{p0}");
      
      var part312 = match("MESSAGE#113:CLUSTERD_Message:02/1_1", "nwparser.p0", "%{info->} \"");
      
      var part313 = match("MESSAGE#158:AAA_Message/0", "nwparser.payload", "\"%{event_type}: %{p0}");
      
      var part314 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/0", "nwparser.payload", "Sessionid %{sessionid->} - User %{username->} - Client_ip %{saddr->} - Nat_ip %{p0}");
      
      var part315 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/1_0", "nwparser.p0", "\"%{stransaddr}\" - Vserver_ip %{p0}");
      
      var part316 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/1_1", "nwparser.p0", "%{stransaddr->} - Vserver_ip %{p0}");
      
      var part317 = match("MESSAGE#167:SSLVPN_REMOVE_SESSION_ERR/2", "nwparser.p0", "%{daddr->} - Errmsg \" %{event_description->} \"");
      
      var select72 = linear_select([
      	dup21,
      	dup22,
      ]);
      
      var select73 = linear_select([
      	dup25,
      	dup26,
      ]);
      
      var select74 = linear_select([
      	dup32,
      	dup33,
      ]);
      
      var part318 = match("MESSAGE#84:SNMP_TRAP_SENT:05", "nwparser.payload", "%{fld1}:UserLogin:%{username->} - %{event_description->} from client IP Address %{saddr}", processor_chain([
      	dup5,
      	dup4,
      ]));
      
      var select75 = linear_select([
      	dup52,
      	dup53,
      	dup54,
      ]);
      
      var select76 = linear_select([
      	dup55,
      	dup56,
      	dup57,
      ]);
      
      var select77 = linear_select([
      	dup63,
      	dup64,
      	dup65,
      ]);
      
      var select78 = linear_select([
      	dup67,
      	dup68,
      ]);
      
      var select79 = linear_select([
      	dup76,
      	dup77,
      ]);
      
      var select80 = linear_select([
      	dup81,
      	dup82,
      ]);
      
      var part319 = match("MESSAGE#109:UI_CMD_EXECUTED", "nwparser.payload", "User %{username->} - Remote_ip %{saddr->} - Command \"%{action}\" - Status \"%{disposition}\"", processor_chain([
      	dup88,
      	dup89,
      	dup3,
      	dup4,
      ]));
      
      var part320 = match("MESSAGE#122:APPFW_COOKIE", "nwparser.payload", "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr->} spt=%{sport->} method=%{web_method->} request=%{url->} msg=%{info->} cn1=%{fld2->} cn2=%{fld3->} cs1=%{policyname->} cs2=%{fld5->} cs3=%{fld6->} cs4=%{severity->} cs5=%{fld8->} act=%{action}", processor_chain([
      	dup9,
      	dup91,
      ]));
      
      var part321 = match("MESSAGE#128:AF_400_RESP", "nwparser.payload", "%{product}|%{version}|%{rule}|%{fld1}|%{severity}|src=%{saddr->} spt=%{sport->} method=%{web_method->} request=%{url->} msg=%{info->} cn1=%{fld2->} cn2=%{fld3->} cs1=%{policyname->} cs2=%{fld5->} cs4=%{severity->} cs5=%{fld8->} act=%{action}", processor_chain([
      	dup11,
      	dup91,
      ]));
      
      var part322 = match_copy("MESSAGE#165:AAATM_Message:06", "nwparser.payload", "info", processor_chain([
      	dup9,
      	dup4,
      ]));
      
      var select81 = linear_select([
      	dup95,
      	dup96,
      ]);
      
      var all62 = all_match({
      	processors: [
      		dup20,
      		dup98,
      		dup23,
      	],
      	on_success: processor_chain([
      		dup2,
      		dup24,
      		dup3,
      		dup4,
      	]),
      });
      
      var all63 = all_match({
      	processors: [
      		dup94,
      		dup112,
      		dup97,
      	],
      	on_success: processor_chain([
      		dup9,
      		dup4,
      	]),
      });
      
- community_id:
- add_locale: ~
- add_fields:
    target: ''
    fields:
        ecs.version: 1.5.0
