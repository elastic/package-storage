- description: |-
    Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: client.address
  type: keyword
- description: |-
    The domain name of the client system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: client.domain
  type: keyword
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: Port of the client.
  name: client.port
  type: long
- description: Unique container id.
  name: container.id
  type: keyword
- description: IP address of the destination (IPv4 or IPv6).
  name: destination.ip
  type: ip
- description: User email address.
  name: destination.user.email
  type: keyword
- description: Unique identifier of the user.
  name: destination.user.id
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    Identification code for this event, if one exists.
    Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.
  name: event.code
  type: keyword
- description: Unique ID to describe the event.
  name: event.id
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
    `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
    Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
    Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
    Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
  name: event.outcome
  type: keyword
- description: |-
    Source of the event.
    Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).
  name: event.provider
  type: keyword
- description: |-
    The numeric severity of the event according to your event source.
    What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
    The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.
  name: event.severity
  type: long
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: Directory where the file is located. It should include the drive letter, when appropriate.
  name: file.directory
  type: keyword
- description: |-
    File extension, excluding the leading dot.
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: file.extension
  type: keyword
- description: Inode representing the file in the filesystem.
  name: file.inode
  type: keyword
- description: Last time the file content was modified.
  name: file.mtime
  type: date
- description: Name of the file including the extension, without the directory.
  name: file.name
  type: keyword
- description: File owner's username.
  name: file.owner
  type: keyword
- description: Name of the group.
  name: group.name
  type: keyword
- description: |-
    Unique host id.
    As hostname is not always unique, use values that are meaningful in your environment.
    Example: The current usage of `beat.name`.
  name: host.id
  type: keyword
- description: |-
    Name of the host.
    It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
  name: host.name
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: |-
    In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
    The field value must be normalized to lowercase for querying.
  name: network.type
  type: keyword
- description: Unique identifier for the organization.
  name: organization.id
  type: keyword
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: organization.name
  type: keyword
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.name
  type: keyword
- description: All of the IPs seen on your event.
  name: related.ip
  type: ip
- description: All the user names or other user identifiers seen on the event.
  name: related.user
  type: keyword
- description: A categorization value keyword used by the entity using the rule for detection of this event.
  name: rule.category
  type: keyword
- description: The description of the rule generating the event.
  name: rule.description
  type: keyword
- description: A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
  name: rule.id
  type: keyword
- description: The name of the rule or signature generating the event.
  name: rule.name
  type: keyword
- description: |-
    Reference URL to additional information about the rule used to generate this event.
    The URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.
  name: rule.reference
  type: keyword
- description: Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.
  name: rule.ruleset
  type: keyword
- description: |-
    Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: server.address
  type: keyword
- description: |-
    The domain name of the server system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: server.domain
  type: keyword
- description: IP address of the server (IPv4 or IPv6).
  name: server.ip
  type: ip
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: source.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: source.as.organization.name
  type: keyword
- description: City name.
  name: source.geo.city_name
  type: keyword
- description: Name of the continent.
  name: source.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: source.geo.country_iso_code
  type: keyword
- description: Country name.
  name: source.geo.country_name
  type: keyword
- description: Longitude and latitude.
  level: core
  name: source.geo.location
  type: geo_point
- description: |-
    User-defined description of a location, at the level of granularity they care about.
    Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
    Not typically used in automated geolocation.
  name: source.geo.name
  type: keyword
- description: Region ISO code.
  name: source.geo.region_iso_code
  type: keyword
- description: Region name.
  name: source.geo.region_name
  type: keyword
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: Port of the source.
  name: source.port
  type: long
- description: User email address.
  name: source.user.email
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: The id of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
  name: threat.technique.id
  type: keyword
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  multi_fields:
    - name: text
      type: match_only_text
  name: url.original
  type: wildcard
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.domain
  type: keyword
- description: User email address.
  name: user.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.full_name
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
- description: |-
    Name of the directory the user is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.target.domain
  type: keyword
- description: User email address.
  name: user.target.email
  type: keyword
- description: User's full name, if available.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.target.full_name
  type: keyword
- description: |-
    Name of the directory the group is a member of.
    For example, an LDAP or Active Directory domain name.
  name: user.target.group.domain
  type: keyword
- description: Unique identifier for the group on the system/platform.
  name: user.target.group.id
  type: keyword
- description: Name of the group.
  name: user.target.group.name
  type: keyword
- description: Unique identifier of the user.
  name: user.target.id
  type: keyword
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.target.name
  type: keyword
- description: Name of the device.
  name: user_agent.device.name
  type: keyword
- description: Name of the user agent.
  name: user_agent.name
  type: keyword
- description: Unparsed user_agent string.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.original
  type: keyword
- description: Operating system name, including the version or code name.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.full
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: user_agent.os.name
  type: keyword
- description: Operating system version as a raw string.
  name: user_agent.os.version
  type: keyword
- description: Version of the user agent.
  name: user_agent.version
  type: keyword
