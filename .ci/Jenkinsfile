#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/package-storage"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_REGISTRY_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    PIPELINE_LOG_LEVEL='INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    booleanParam(name: 'run_all_stages', defaultValue: false, description: 'Force to run all stages.')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          insideGo{
            sh(label: 'Checks formatting / linting',script: 'mage -debug check')
          }
        }
      }
    }
    /**
     Builds and validates the packages
     */
    stage('Build') {
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          insideGo(){
            sh(label: 'Checks if the packages can be build and are valid',script: 'mage -debug build')
          }
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('TestIntegration') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/go/bin:${env.PATH}"
      }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          sh(label: 'Runs the (integration) tests',script: '''
            eval "$(gvm 1.14.2)"
            go get -u github.com/magefile/mage
            go get -u github.com/elastic/go-licenser
            go get -u -v golang.org/x/tools/cmd/goimports
            mage -debug testIntegration
          ''')
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def insideGo(Closure body){
  def goAgent = docker.build("go-agent", ".ci/jenkins-go-agent")
  goAgent.inside("-v ${env.WORKSPACE}/src:/go/src"){
    withEnv([
      "HOME=${env.WORKSPACE}/${BASE_DIR}",
      "GOPATH=/go",
    ]) {
      sh(label: 'Go version', script: 'go version')
      sh(label: 'Install Mage', script: '''
        go get -u github.com/magefile/mage 
        mage -version
      ''')
      body()
    }
  }
}
