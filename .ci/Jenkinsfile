#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/package-storage"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_REGISTRY_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    PIPELINE_LOG_LEVEL='INFO'
    GO_VERSION = '1.13.12'
    DOCKER_IMG = "${env.DOCKER_REGISTRY}/package-registry/distribution"
    DOCKER_IMG_PR = "${env.DOCKER_REGISTRY}/observability-ci/package-registry/distribution"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  parameters {
    booleanParam(name: 'run_all_stages', defaultValue: false, description: 'Force to run all stages.')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Checks formatting / linting',script: 'mage -debug check')
          }
        }
      }
    }
    /**
     Builds and validates the packages
     */
    stage('Build') {
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Checks if the packages can be build and are valid',script: 'mage -debug build')
          }
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('TestIntegration') {
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Runs the (integration) tests',script: 'mage -debug testIntegration|tee tests-report.txt')
          }
        }
      }
      post {
        always {
          convertGoTestResults(
            input: "${BASE_DIR}/tests-report.txt",
            output: "${BASE_DIR}/junit-report.xml"
          )
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}
