#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20 && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/package-storage"
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_REGISTRY_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    PIPELINE_LOG_LEVEL='INFO'
    DOCKER_IMG = "${env.DOCKER_REGISTRY}/package-registry/distribution"
    DOCKER_IMG_PR = "${env.DOCKER_REGISTRY}/observability-ci/package-registry/distribution"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|^\\/test$)')
  }
  parameters {
    booleanParam(name: 'run_all_stages', defaultValue: false, description: 'Force to run all stages.')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        cleanup()
        dir("${BASE_DIR}"){
          whenTrue(isGitRegionMatch(patterns: [".*/_.*"])) {
            error('_dev in packages are intended to exist only for development purposes.')
          }
        }
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Checks formatting / linting',script: 'mage -debug check')
          }
        }
      }
    }
    /**
     Builds and validates the packages
     */
    stage('Build') {
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Checks if the packages can be build and are valid',script: 'mage -debug build')
          }
        }
      }
    }
    /**
     Execute integration tests.
     */
    // Disable it temporarily
    /*stage('TestIntegration') {
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Runs the (integration) tests',script: 'mage -debug testIntegration|tee tests-report.txt')
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/build/elastic-stack-logs/*.log")
          convertGoTestResults(
            input: "${BASE_DIR}/tests-report.txt",
            output: "${BASE_DIR}/junit-report.xml"
          )
        }
      }
    }*/
    /**
     Publish Docker images.
     */
    stage('Publish Docker image'){
      when {
        anyOf {
          branch 'snapshot'
          branch 'staging'
          branch 'production'
        }
      }
      environment {
        DOCKER_IMG_TAG = "${env.DOCKER_IMG}:${env.GIT_BASE_COMMIT}"
        DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG}:${env.BRANCH_NAME}"
      }
      steps {
        cleanup()
        pushDockerImage()
      }
    }
    /**
     Publish PR Docker images.
     */
    stage('Publish PR Docker image'){
      when {
        changeRequest(target: '(snapshot|staging|production)', comparator: 'REGEXP')
      }
      environment {
        DOCKER_IMG_TAG = "${env.DOCKER_IMG_PR}:${env.GIT_BASE_COMMIT}"
        DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG_PR}:${env.BRANCH_NAME}"
      }
      steps {
        cleanup()
        pushDockerImage()
      }
    }
    stage('v2: Publish packages') {
      steps {
        script {
          cleanup()
          dir("${BASE_DIR}") {
            dir("packages") {
              def packageRevision = [:]
              findFiles()?.findAll{ !it.name.endsWith('@tmp') }?.collect{ it.name }?.sort()?.each {
                def packageName = it
                dir("${packageName}") {
                  findFiles()?.findAll{ !it.name.endsWith('@tmp') }?.collect{ it.name }?.sort()?.each {
                    def packageVersion = it
                    // Check if the package revision is published
                    def response = httpRequest(httpMode: "HEAD", url: "https://package-storage.elastic.co/artifacts/packages/${packageName}-${packageVersion}.zip",
                      validResponseCodes: '200:404')
                    if (response.status == 200) {
                      continue // already published
                    }
                    sh(label: "Create package: ${packageName}-${packageVersion}.zip", script: """
                    mkdir -p ../build

                    cp -r ${packageVersion} ${packageName}-${packageVersion}
                    zip -r ../build/${packageName}-${packageVersion}.zip ${packageName}-${packageVersion}
                    rm -r ${packageName}-${packageVersion}
                    """)
                  }
                }
              }

              // TODO sign all unpublished packages
              // TODO iterate over packages
              // TODO - trigger publishing job
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}


def pushDockerImage(){
  dir("${BASE_DIR}"){
    dockerLogin(secret: "${env.DOCKER_REGISTRY_SECRET}",
      registry: "${env.DOCKER_REGISTRY}")
    sh(label: 'Build Docker image',
      script: """docker build \
        -t ${env.DOCKER_IMG_TAG} \
        --label BRANCH_NAME=${env.BRANCH_NAME} \
        --label GIT_SHA=${env.GIT_BASE_COMMIT} \
        --label GO_VERSION=${env.GO_VERSION} \
        --label TIMESTAMP=\$(date +%Y-%m-%d_%H:%M) \
        .
    """)
    retryWithSleep(retries: 3, seconds: 5, backoff: true){
      sh(label: 'Push Docker image sha',
        script: "docker push ${env.DOCKER_IMG_TAG}")
      sh(label: 'Re-tag Docker image',
        script: "docker tag ${env.DOCKER_IMG_TAG} ${env.DOCKER_IMG_TAG_BRANCH}")
      sh(label: 'Push Docker image name',
        script: "docker push ${env.DOCKER_IMG_TAG_BRANCH}")
    }
  }
}
